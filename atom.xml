<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独角兽之路</title>
  <subtitle>到了汉堡，我们每天必须演足8小时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hui46226021.github.io/"/>
  <updated>2017-03-20T14:48:43.002Z</updated>
  <id>https://hui46226021.github.io/</id>
  
  <author>
    <name>Harlan Zhush</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 通过gardle限制引入so库 版本</title>
    <link href="https://hui46226021.github.io/2017/03/20/Android%20%E9%80%9A%E8%BF%87gardle%E9%99%90%E5%88%B6%E5%BC%95%E5%85%A5so%E5%BA%93%20%E7%89%88%E6%9C%AC/"/>
    <id>https://hui46226021.github.io/2017/03/20/Android 通过gardle限制引入so库 版本/</id>
    <published>2017-03-20T15:37:23.000Z</published>
    <updated>2017-03-20T14:48:43.002Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:android 的cpu不同 需要引入的so版本也不尽相同，有时候 会出现由于so库加载不到 崩溃的情况<br><a id="more"></a></p>
<p>今天 集成百度地图api的时候  同时项目里 还有 之前实现的一个 模糊图像的功能，<br>由于 百度地图 提供了 armeabi 的so库，而模糊功能的 依赖    compile ‘net.qiujuer.genius:blur:2.0.0-beta4’实现的，这个库里面 包含了  armeabi  armeabi-v7a arm64-v8a  每个里面 有libgenius_blur.so</p>
<p>这就导致  在部分 arm64的 手机上 百度地图的相关功能 会加载不到 so库,导致程序崩溃</p>
<p>最后找到解决方案 </p>
<p>在app 的 build.gradle 下的defaultConfig 添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ndk&#123;</div><div class="line">    moduleName <span class="string">"libgenius_blur"</span></div><div class="line">    ldLibs <span class="string">"log"</span></div><div class="line">    abiFilters <span class="string">"armeabi"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完美运行   谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:android 的cpu不同 需要引入的so版本也不尽相同，有时候 会出现由于so库加载不到 崩溃的情况&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="gradle" scheme="https://hui46226021.github.io/categories/Android/JAVA/gradle/"/>
    
      <category term="so" scheme="https://hui46226021.github.io/categories/Android/JAVA/gradle/so/"/>
    
    
      <category term="so库" scheme="https://hui46226021.github.io/tags/so%E5%BA%93/"/>
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>腾讯 IM 封装成Library</title>
    <link href="https://hui46226021.github.io/2017/03/18/%E8%85%BE%E8%AE%AFIM%E5%B0%81%E8%A3%85%20ShIMLibrary/"/>
    <id>https://hui46226021.github.io/2017/03/18/腾讯IM封装 ShIMLibrary/</id>
    <published>2017-03-18T14:37:23.000Z</published>
    <updated>2017-03-19T07:23:19.016Z</updated>
    
    <content type="html"><![CDATA[<p>把腾讯 IM 封装成Library<br><a id="more"></a></p>
<h1 id="IM-Demo"><a href="#IM-Demo" class="headerlink" title="IM_Demo"></a>IM_Demo</h1><h2 id="把腾讯-IM-封装成Library"><a href="#把腾讯-IM-封装成Library" class="headerlink" title="把腾讯 IM 封装成Library"></a>把腾讯 IM 封装成Library</h2><p>依照Demo主项目</p>
<p>先到腾讯IM 管理平台创建应用  <a href="https://www.qcloud.com/document/product/269/1504" target="_blank" rel="external">传送门</a></p>
<ul>
<li>1.导入JrImLibrary</li>
<li>2.复制 主项目下im 下面的三个类</li>
<li>3.在Application 中初始化IM模块</li>
<li>4.替换string.xml 下面的 sdk_appid 和 account_type</li>
<li>5.还有部分功能 没有实现 例如 上传图片，和搜索用户（考虑在主项目里实现）</li>
<li>6.服务器端 签名生成 JAVA 代码  [下载地址] (<a href="https://github.com/hui46226021/ShIMLibrary/raw/master/java_native.rar" target="_blank" rel="external">https://github.com/hui46226021/ShIMLibrary/raw/master/java_native.rar</a>)</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/1.gif" alt=""> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/2.gif" alt=""></p>
<p> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/3.gif" alt=""></p>
<p> 源码地址:<a href="https://github.com/hui46226021/ShIMLibrary" target="_blank" rel="external">https://github.com/hui46226021/ShIMLibrary</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把腾讯 IM 封装成Library&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="IM" scheme="https://hui46226021.github.io/categories/Android/JAVA/IM/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="即时通讯" scheme="https://hui46226021.github.io/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
      <category term="腾讯IM" scheme="https://hui46226021.github.io/tags/%E8%85%BE%E8%AE%AFIM/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoPlay android视频播放器</title>
    <link href="https://hui46226021.github.io/2017/03/18/ShVideoPlay%20android%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://hui46226021.github.io/2017/03/18/ShVideoPlay android视频播放器/</id>
    <published>2017-03-18T14:37:23.000Z</published>
    <updated>2017-03-19T07:14:30.506Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频播放器<br><a id="more"></a></p>
<h1 id="ShVideoPlay"><a href="#ShVideoPlay" class="headerlink" title="ShVideoPlay"></a>ShVideoPlay</h1><p>android 视频播放封装<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideoplayer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shvideoplayer:1.0.2'</span></div></pre></td></tr></table></figure></p>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoPlay" target="_blank" rel="external">https://github.com/hui46226021/ShVideoPlay</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频播放器&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="FFmpeg" scheme="https://hui46226021.github.io/categories/Android/JAVA/FFmpeg/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频播放" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoDemo android 适配录制，压缩</title>
    <link href="https://hui46226021.github.io/2017/03/18/ShVideoDemo%20android%20%E9%80%82%E9%85%8D%E5%BD%95%E5%88%B6%EF%BC%8C%E5%8E%8B%E7%BC%A9/"/>
    <id>https://hui46226021.github.io/2017/03/18/ShVideoDemo android 适配录制，压缩/</id>
    <published>2017-03-18T14:37:23.000Z</published>
    <updated>2017-03-19T06:50:28.536Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）<br><a id="more"></a></p>
<h1 id="ShVideoDemo"><a href="#ShVideoDemo" class="headerlink" title="ShVideoDemo"></a>ShVideoDemo</h1><p>Android 视频录制Demo 防微信小视频 视频压缩（FFmpeg）</p>
<p>#Download</p>
<p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.shvideo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideolibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.shvideo:shvideolibrary:1.0.3'</span></div></pre></td></tr></table></figure></p>
<font color="#ff0022ff" size="7" face="黑体">注意:targetSdkVersion 23 及以上 要注意 6.0运行时权限 或干脆用23以下</font>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShVideoDemo/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoDemo" target="_blank" rel="external">https://github.com/hui46226021/ShVideoDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="FFmpeg" scheme="https://hui46226021.github.io/categories/Android/JAVA/FFmpeg/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频压缩" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="视频录制" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android JSON解析工具ShJsonUtils</title>
    <link href="https://hui46226021.github.io/2017/03/18/JSON%E8%A7%A3%E6%9E%90/"/>
    <id>https://hui46226021.github.io/2017/03/18/JSON解析/</id>
    <published>2017-03-18T13:37:23.000Z</published>
    <updated>2017-03-19T06:17:19.432Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:封装了一个 json解析的库<br><a id="more"></a></p>
<h1 id="ShJsonUtils"><a href="#ShJsonUtils" class="headerlink" title="ShJsonUtils"></a>ShJsonUtils</h1><p>android json解析框架<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shjson:1.2.3'</span></div></pre></td></tr></table></figure></p>
<p>#使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">JSONUtil jsonUtil = <span class="keyword">new</span> JSONUtil(jsonStr);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class);</div><div class="line"><span class="comment">//三维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class,En.class);</div><div class="line">List&lt;People&gt; peoples2 =jsonUtil.getList(People.class,<span class="string">"data.people"</span>);</div><div class="line">String animal = jsonUtil.getObject(String.class,<span class="string">"data.animal"</span>);</div><div class="line">Look look = jsonUtil.getObject(Look.class,<span class="string">"data.look"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>创建 JSONUtil 对象，传入json字符串</li>
<li>通过getObject方法 获取 实体对象 ，层级用.隔开</li>
<li>通过getList方法 获取 数组对象 ，层级用.隔开</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShJsonUtils/edit/master/README.md" target="_blank" rel="external">https://github.com/hui46226021/ShJsonUtils/edit/master/README.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:封装了一个 json解析的库&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="JSON" scheme="https://hui46226021.github.io/categories/Android/JAVA/JSON/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="JSON解析" scheme="https://hui46226021.github.io/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>友盟封装第三方登录 第三方粉线</title>
    <link href="https://hui46226021.github.io/2017/03/18/ShUmengSdk%20%E5%8F%8B%E7%9B%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E5%88%86%E4%BA%AB%20%E7%99%BB%E5%BD%95%20%E5%B0%81%E8%A3%85/"/>
    <id>https://hui46226021.github.io/2017/03/18/ShUmengSdk 友盟第三方分享 登录 封装/</id>
    <published>2017-03-18T13:37:23.000Z</published>
    <updated>2017-03-19T07:16:31.649Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="ShUmengSdk"><a href="#ShUmengSdk" class="headerlink" title="ShUmengSdk"></a>ShUmengSdk</h1><p>封装友盟 第三方 分享 登录 微信支付</p>
<p>###当前友盟SDK版本v6.0.9</p>
<p>###所需各种 appkey 质询QQ 3431339973</p>
<p>##使用方法</p>
<ul>
<li>导入Module(umeng_sdk)</li>
<li>替换key_strings.xml下的所有 appkey</li>
<li>在项目的Application 里调用  UMShareHelper.init(this); 注册友盟</li>
<li>添加微信 回调页面WXEntryActivity  注意：wxapi 后的路径一定不能变</li>
<li>通过 ShareDialog.getInstance(this,null,”测试分享”,”<a href="https://www.baidu.co,&quot;,&quot;测试分享&quot;).showDialog();弹出分享菜单" target="_blank" rel="external">https://www.baidu.co,&quot;,&quot;测试分享&quot;).showDialog();弹出分享菜单</a></li>
<li>通过 mShareAPI.getPlatformInfo(MainActivity.this, SHARE_MEDIA.WEIXIN, umAuthListener); 第三方登录</li>
</ul>
<p>##注意：在调用分享的页面 要加入 页面回调<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    UMShareAPI.get(<span class="keyword">this</span>).onActivityResult(requestCode, resultCode, data);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ShUmengSdk&quot;&gt;&lt;a href=&quot;#ShUmengSdk&quot; class=&quot;headerlink&quot; title=&quot;ShUmengSdk&quot;&gt;&lt;/a&gt;ShUmengSdk&lt;/h1&gt;&lt;p&gt;封装友盟 第三方 分享 登录 微信支付&lt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="友盟" scheme="https://hui46226021.github.io/tags/%E5%8F%8B%E7%9B%9F/"/>
    
      <category term="第三方登录" scheme="https://hui46226021.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android表单映射框架 SHFormLayout 快速生成表单布局</title>
    <link href="https://hui46226021.github.io/2017/03/17/ShFormLayout/"/>
    <id>https://hui46226021.github.io/2017/03/17/ShFormLayout/</id>
    <published>2017-03-17T14:37:23.000Z</published>
    <updated>2017-03-18T09:47:10.277Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架<br><a id="more"></a></p>
<h1 id="ShFormUtils"><a href="#ShFormUtils" class="headerlink" title="ShFormUtils"></a>ShFormUtils</h1><h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shform:3.2.2'</span></div></pre></td></tr></table></figure></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="表单对象映射"><a href="#表单对象映射" class="headerlink" title="表单对象映射"></a>表单对象映射</h2><ul>
<li>1.页面实现 FormCheckInterface 接口   改接口 是页面表单检查的回调 下面有介绍</li>
<li><p>2.开启表单注入 FormInit.injection(this);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      nameEdit = (EditText) findViewById(R.id.name);</div><div class="line">      phoneEdit = (EditText) findViewById(R.id.phone);</div><div class="line">      professionEdit = (EditText) findViewById(R.id.profession);</div><div class="line">      spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">      married = (CheckBox) findViewById(R.id.married);</div><div class="line">      party = (CheckBox) findViewById(R.id.party);</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * 初始化表单注入  要在 所有控件初始化成功后 调用</div><div class="line">       */</div><div class="line">      FormInit.injection(<span class="keyword">this</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>3.在 onDestroy 里 注销 表单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 注销表单</div><div class="line"> */</div><div class="line">FormInit.deleteInjection(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>4.通过 @FormInjection 绑定控件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * name 对应 实体类 字段名</div><div class="line"> * message 参数为空的时候 默认提示 的字符串</div><div class="line"> * isNull  该字段是否可以为空  默认 false</div><div class="line"> */</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"name"</span>, message = <span class="string">"名字"</span>,isNull = <span class="keyword">true</span>)</div><div class="line">  EditText nameEdit;</div><div class="line">  <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line">  EditText phoneEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line">  EditText professionEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"workingLife"</span>, message = <span class="string">"工作时间"</span>)</div><div class="line">  Spinner spinner;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"married"</span>)</div><div class="line">  CheckBox married;</div></pre></td></tr></table></figure>
</li>
<li><p>4.调用映射方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 表单自动生成对象</div><div class="line">  */</div><div class="line"> UserModel userModel = FormUtls.formToObjectAndCheck(<span class="keyword">this</span>,UserModel.class);</div><div class="line"><span class="comment">/**</span></div><div class="line">  * 实体对象 映射到表单 返回true 表示映射成功</div><div class="line">  */</div><div class="line"> FormUtls.objectToForm(<span class="keyword">this</span>,userModel);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="表单参数检查"><a href="#表单参数检查" class="headerlink" title="表单参数检查"></a>表单参数检查</h2><pre><code>* 1.使用 @FormCheck
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//type 是 验证类型枚举   默认 是自定义验证</span></div><div class="line"> <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line"> EditText phoneEdit;</div><div class="line"> <span class="meta">@FormCheck</span></div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line"> EditText professionEdit;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 通过 实现 FormCheckInterface 接口的 formCheck</div><div class="line">      * 自定定义 表单检查 默认要返回true</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@return</span></div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">formCheck</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">         <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">             <span class="keyword">case</span> R.id.profession:</div><div class="line">                 <span class="keyword">if</span>(!(professionEdit.getText()+<span class="string">""</span>).contains(<span class="string">"-"</span>))&#123;</div><div class="line">                     Toast.makeText(<span class="keyword">this</span>,<span class="string">"职业格式不正确"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 表单检查 不合法回调</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@param</span> message</div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formCheckNullCall</span><span class="params">(View v, String message)</span> </span>&#123;</div><div class="line">         Toast.makeText(<span class="keyword">this</span>,message,Toast.LENGTH_SHORT).show();</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h4 id="验证类型"><a href="#验证类型" class="headerlink" title="验证类型"></a>验证类型</h4><pre><code>CUSTOM,//自定义
PHONE,//手机号
EMAIL,//邮箱
CHINESE,//中文
IDCARD,//身份证
ISDATA,//“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年
AMOUNT_MONEY,//金额校验，精确到2位小数
AMOUNT,//存数字
URL,//Url
PASSWORD;//密码强度 是不是6至12位字母组合
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>    
<h2 id="快速生成表单布局-ShFormLayout"><a href="#快速生成表单布局-ShFormLayout" class="headerlink" title="快速生成表单布局 ShFormLayout"></a>快速生成表单布局 ShFormLayout</h2><p>ShFormLayout 可以在使用 系统控件的基础上 实现快速生成表单布局 样式</p>
<p><img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/3.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;com.sh.zsh.code.layout.ShFormLayout</div><div class="line">  &lt;!--该布局 需要在这确定 每行的高度 --&gt;</div><div class="line">              app:less_form_row_height="50dp"</div><div class="line">             android:layout_width="match_parent"</div><div class="line">             android:layout_height="wrap_content"&gt;</div><div class="line">             &lt;TextView</div><div class="line">                 &lt;!--这里表明 这个控件 只是用于显示标题--&gt;</div><div class="line">                 app:less_form_group_titel="true"</div><div class="line">                 android:text="基本信息"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="wrap_content" /&gt;</div><div class="line">             &lt;EditText</div><div class="line">                 &lt;!--该行的标题--&gt;</div><div class="line">                 app:less_form_title="姓名"</div><div class="line">                 &lt;!--该行对应的字段名--&gt;</div><div class="line">                 app:less_form_name="name"</div><div class="line">                 &lt;!--该行是否必填--&gt;</div><div class="line">                 app:less_form_must="true"</div><div class="line">                  android:layout_height="wrap_content"</div><div class="line">                  android:layout_width="match_parent"</div><div class="line">                /&gt;</div><div class="line"></div><div class="line">             &lt;EditText</div><div class="line">                 app:less_form_title="电话"</div><div class="line">                 &lt;!--该行的验证方式--&gt;</div><div class="line">                 app:less_form_check_type="phone"</div><div class="line">                 app:less_form_name="phone"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true"</div><div class="line">                 /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/company"</div><div class="line">                 app:less_form_title="公司"</div><div class="line">                 app:less_form_name="company"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/department"</div><div class="line">                 app:less_form_title="部门"</div><div class="line">                 app:less_form_name="department"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormTimeView</div><div class="line">                 app:less_form_title="出生日期"</div><div class="line">                 app:less_form_name="birthday"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;CheckBox</div><div class="line">                 app:less_form_title="男性："</div><div class="line">                 app:less_form_name="sex"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;LinearLayout</div><div class="line">                 app:less_form_group_top_layout="true"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="150dp"</div><div class="line">                 android:background="@color/white"</div><div class="line">                 android:orientation="horizontal"&gt;</div><div class="line">                 &lt;TextView</div><div class="line">                     android:layout_width="wrap_content"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="18dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:text="签名" /&gt;</div><div class="line"></div><div class="line">                 &lt;EditText</div><div class="line">                     android:id="@+id/sign"</div><div class="line">                     android:gravity="top"</div><div class="line">                     android:layout_width="match_parent"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="16dp"</div><div class="line">                     android:padding="5dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:background="@drawable/bg_text_factoryaudit"</div><div class="line">                     android:hint="多行输入" /&gt;</div><div class="line">             &lt;/LinearLayout&gt;</div><div class="line">         &lt;/com.sh.zsh.code.layout.ShFormLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>快看，你不需要去关心 每一行的样式，高度 只需要确定这一行是 TextView  或是EditText 等控件  就可以了<br>我们来看一下  框架都提供了 哪些表单属性 供我们使用</p>
<ul>
<li>ShFormLayout  <br><br>less_form_row_height  表单每行的 高度</li>
<li>内部控件<br><br>less_form_title   名称<br><br>less_form_title_image  设置名称左侧的icon<br><br>less_form_can_click    该行是否显示 右侧箭头<br><br>less_form_must         该字段是否必填<br><br>less_form_name        该字段对应实体类的字段名称<br><br>less_form_is_null     该字段是否可以为空<br><br>less_form_bottomLine  该行是否显示底部横线<br>less_form_check_type  检查类型<br>less_form_group_titel 该组表单的标题 （上面的例子里 基本信息 那一行）<br>less_form_group_top_layout  改控件不 参与表单映射 和布局生成（上面的例子里签名 那个布局）</li>
<li>FormTimeView  时间控件<br><br>less_time_is_time  时间控件的格式（all，year_month_day，hours_mins，month_day_hour_min，year_month）<br></li>
<li>FormSpinner  选择器  用法参考Demo<br><br>less_form_spi_sel 默认选中第一项</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShFormUtils" target="_blank" rel="external">https://github.com/hui46226021/ShFormUtils</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="View" scheme="https://hui46226021.github.io/categories/Android/JAVA/View/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Form" scheme="https://hui46226021.github.io/tags/Form/"/>
    
      <category term="框架" scheme="https://hui46226021.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="表单映射" scheme="https://hui46226021.github.io/tags/%E8%A1%A8%E5%8D%95%E6%98%A0%E5%B0%84/"/>
    
      <category term="自定义View" scheme="https://hui46226021.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Android-PickerView 时间控件，选择权</title>
    <link href="https://hui46226021.github.io/2017/03/17/Android-PickerView/"/>
    <id>https://hui46226021.github.io/2017/03/17/Android-PickerView/</id>
    <published>2017-03-17T14:37:23.000Z</published>
    <updated>2017-03-19T09:22:56.976Z</updated>
    
    <content type="html"><![CDATA[<p>在 saiwu-bigkoo 大神以上修改 便于自己使用<br><a id="more"></a></p>
<h1 id="PickerView-2-x系列"><a href="#PickerView-2-x系列" class="headerlink" title="PickerView (2.x系列)"></a>PickerView (2.x系列)</h1><p>精仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果<br>——TimePickerView  时间选择器，支持年月日时分，年月日，年月，时分等格式<br>——OptionsPickerView  选项选择器，支持一，二，三级选项选择，并且可以设置是否联动    </p>
<p>2.x是全新的3D效果，比1.x版本更加贴近iOS的效果，从外观细节上也得到了改善。api兼容1.x版本，只需要把依赖的版本号升级即可，几乎不用修改代码即可完成升级。</p>
<p>####使用maven 依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pickerview<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>####使用gradle 依赖:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  compile <span class="string">'com.sh.zsh.code:pickerview:2.1.2'</span></div><div class="line"><span class="comment">//这个是支持农历的分支 compile 'com.bigkoo:pickerview:lunar.1.0'</span></div></pre></td></tr></table></figure></p>
<h2 id="Demo-图片"><a href="#Demo-图片" class="headerlink" title="Demo 图片"></a>Demo 图片</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><a href="https://github.com/saiwu-bigkoo/Android-PickerView/blob/master/app/src/main/java/com/bigkoo/pickerviewdemo/MainActivity.java" target="_blank" rel="external">demo代码请看戳这里</a></li>
</ul>
<blockquote>
<h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>v2.1.2</p>
<ul>
<li>增加设置选中item方法。<br></li>
</ul>
<p>v2.1.1</p>
<ul>
<li>修复dismiss时候点击背景会重复dismiss动画问题。<br></li>
</ul>
<p>v2.1.0</p>
<ul>
<li>去掉反射获取字符串，改为通过继承IPickerViewData。<br></li>
<li>解决多个PickerView同时存在时取消不了弹窗问题。<br></li>
</ul>
<p>v2.0.9</p>
<ul>
<li>解决属性和其他第三方库冲突问题。<br></li>
</ul>
<p>v2.0.8</p>
<ul>
<li>修复＃41 未选中项有错乱数据问题。<br></li>
<li>加入pickerview_customTextSize 和 pickerview_textsize 到 xml 中 来控制自定义文字大小<br></li>
</ul>
<p>v2.0.7</p>
<ul>
<li>修复设置初始化position ，第三级数据不对的BUG。 <br></li>
</ul>
<p>v2.0.6</p>
<ul>
<li>修复不循环模式下点击超出范围问题，修复后点击空白的地方，只能滚到最顶或最底，不会滚出数据范围。 <br></li>
</ul>
<p>v2.0.5</p>
<ul>
<li>修复不循环模式下底部超出范围问题 <br></li>
</ul>
<p>v2.0.4</p>
<ul>
<li>修复不循环模式下顶部超出范围问题 <br></li>
<li>wheel view文字颜色通过xml配置 <br></li>
</ul>
<p>v2.0.3</p>
<ul>
<li>修复时间选择的时候部分数字选不到直接跳到下一个数字的问题 <br></li>
</ul>
<p>v2.0.2</p>
<ul>
<li>修复不循环模式下点击空白item处出现数组越界问题 <br></li>
<li>修复循环模式下只有一条数据的时候只显示三条而不是填充满高度问题  <br></li>
</ul>
<p>v2.0.1</p>
<ul>
<li>去掉popupWindow，改用View，类名也对应修改为TimePickerView和 OptionsPickerView <br></li>
<li>加入遮罩效果  <br></li>
</ul>
<p>v2.0.0 不需修改任何代码就可以兼容1.x</p>
<ul>
<li>外观大整改  <br></li>
<li>支持反射获取getPickerViewText()来获取要展示数据，以前只能传String的对象，现在可以传任意对象只要有getPickerViewText()函数即可显示对应的字符串，如果没有getPickerViewText()函数则使用对象toString作为显示  <br></li>
<li>加入setTitle  <br></li>
</ul>
</blockquote>
<p>-－－－－－－－－－－－－－－－－－－－－华丽丽的分割线－－－－－－－－－－－－－－－－－－－－－－－－－－</p>
<h1 id="PickerView1-x-我已经把1-0-3版本分到v1-x的分支去了，停止维护1-x的分支"><a href="#PickerView1-x-我已经把1-0-3版本分到v1-x的分支去了，停止维护1-x的分支" class="headerlink" title="PickerView1.x (我已经把1.0.3版本分到v1.x的分支去了，停止维护1.x的分支)"></a>PickerView1.x (我已经把1.0.3版本分到v1.x的分支去了，停止维护1.x的分支)</h1><p>####使用gradle 依赖:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.bigkoo:pickerview:1.0.3'</span></div></pre></td></tr></table></figure></p>
<h2 id="Demo-图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）"><a href="#Demo-图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）" class="headerlink" title="Demo 图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）"></a>Demo 图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo_zhangshangshenghuo.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li>WheelView</li>
<li><a href="https://github.com/weidongjian/androidWheelView/" target="_blank" rel="external">androidWheelView</a></li>
</ul>
<p>源码地址:<a href="https://github.com/hui46226021/Android-PickerView" target="_blank" rel="external">https://github.com/hui46226021/Android-PickerView</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 saiwu-bigkoo 大神以上修改 便于自己使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="自定义view" scheme="https://hui46226021.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2.0 - 网络请求库 注解 详解</title>
    <link href="https://hui46226021.github.io/2017/01/01/Retrofit2.0/"/>
    <id>https://hui46226021.github.io/2017/01/01/Retrofit2.0/</id>
    <published>2017-01-01T04:32:21.000Z</published>
    <updated>2017-03-18T01:24:40.644Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit基于注解和动态代理，优化了Android中的网络请求操作。<br><a id="more"></a></p>
<h1 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h1><h2 id="这篇笔记基于Retrofit-1-9。"><a href="#这篇笔记基于Retrofit-1-9。" class="headerlink" title="这篇笔记基于Retrofit 1.9。"></a>这篇笔记基于Retrofit 1.9。</h2><p><img src="https://static.oschina.net/uploads/img/201701/19105443_jXYF.png" alt=""></p>
<p>从上图可见，对Retrofit的使用可以分成三部分：</p>
<ul>
<li>1.建立POJO或者Model Class<br>服务端返回给客户端的数据一般都是JSON格式，所以可以利用GSON或其他库把JSON直接转换成一个对象。POJO或这个Model Class就是这个对象的类。</li>
<li>2.定义REST API Interface<br>定义一个Interface，声明我们需要的网络请求方法。<br>例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">       <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line">       <span class="function">List&lt;Repo&gt; <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Repo，就是第一步中定义的POJO或者Model Class。Retrofit框架会自动把服务端返回的JSON数据，转换成Repo。Retrofit默认采用GSON库。</p>
<ul>
<li>3.RestAdapter<br>RestAdapter用来配置网络请求的参数，并且生成一个接口的实现。<br>配置请求参数：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">             .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">             .setClient(<span class="keyword">new</span> OkClient(<span class="keyword">new</span> OkHttpClient()))</div><div class="line">             .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生成接口的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHubService service = restAdapter.create(GitHubService.class);</div></pre></td></tr></table></figure></p>
<p>以上三步完成后，调用接口函数完成与服务器的交互：</p>
<p>List<repo> repos = service.listRepos(“octocat”);</repo></p>
<p>请求方法</p>
<p>Retrofit框架提供了很多注解，其中HTTP注解有五个，用来修饰请求方法（还可以顺便处理URL路径）：</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>HEAD<br>这五个注解正好涵盖了数据的增删改查方法，符合REST标准。每一个请求方法都必须要由这五个注解中的一个修饰。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以在注解中添加查询参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list?sort=desc"</span>)</div></pre></td></tr></table></figure></p>
<p>URL处理</p>
<ul>
<li><p>@Path - 替换参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@Query - 添加查询参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @<span class="title">Query</span><span class="params">(<span class="string">"sort"</span>)</span> String sort)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@QueryMap - 如果有多个查询参数，把它们放在Map中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @QueryMap Map&lt;String, String&gt; options)</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h2><p>请求体（RequestBody），一般用于POST方法传递请求参数。<br>@Body<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/users/new"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@Body User user, Call&lt;User&gt; call)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数会被指定的转换器转换成字符串或字节流提交到服务器，如果没有指定转换器，Retrofit将会默认使用RequestBody。</p>
<h2 id="FORM-ENCODED-表单-And-MULTIPART"><a href="#FORM-ENCODED-表单-And-MULTIPART" class="headerlink" title="FORM ENCODED(表单) And MULTIPART"></a>FORM ENCODED(表单) And MULTIPART</h2><ul>
<li>FORM ENCODED</li>
</ul>
<p>使用 @FormUrlEncoded 修饰请求方法，可以把表单数据提交到服务端。<br>用 @Field 修饰key-value对。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"/user/edit"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Field(<span class="string">"first_name"</span>)</span> String first, @<span class="title">Field</span><span class="params">(<span class="string">"last_name"</span>)</span> String last)</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>MULTIPART</li>
</ul>
<p>使用 @Multipart 修饰请求方法，@Part 修饰每一个Part<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@PUT</span>(<span class="string">"/user/photo"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Part(<span class="string">"photo"</span>)</span> TypedFile photo, @<span class="title">Part</span><span class="params">(<span class="string">"description"</span>)</span> TypedString description)</span>;</div></pre></td></tr></table></figure></p>
<p>Multipart 中的Part使用 RestAdapter 的转换器来转换，也可以实现 TypedOutput 自己处理序列化。</p>
<p>Multipart主要用来上传文件吗？如果是，具体操作又是如何？ 答案在这里</p>
<h2 id="配制HEADER"><a href="#配制HEADER" class="headerlink" title="配制HEADER"></a>配制HEADER</h2><p>用 @Headers 设置Http请求的header。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/widget/list"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">widgetList</span><span class="params">(Call&lt;List&lt;Widget&gt;&gt; call)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Headers</span>(&#123;</div><div class="line">    <span class="string">"Accept: application/vnd.github.v3.full+json"</span>,</div><div class="line">    <span class="string">"User-Agent: Retrofit-Sample-App"</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;username&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Path(<span class="string">"username"</span>)</span> String username, Call&lt;User&gt;)</span>;</div></pre></td></tr></table></figure></p>
<p>Http请求头不会互相覆盖，如果存在多个请求头的名字相同，那么它们全部都会被包含在Http请求中。</p>
<h2 id="动态更新HEADER"><a href="#动态更新HEADER" class="headerlink" title="动态更新HEADER"></a>动态更新HEADER</h2><ul>
<li>在请求方法的参数中，用 @Header 动态更新Http请求头<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Header(<span class="string">"Authorization"</span>)</span> String authorization, Call&lt;User&gt; call)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数不能为null，否则这个header将会被删掉。</p>
<ul>
<li>在RestAdapter中，利用RequestInterceptor动态更新Header<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RequestInterceptor requestInterceptor = <span class="keyword">new</span> RequestInterceptor() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intercept</span><span class="params">(RequestFacade request)</span> </span>&#123;</div><div class="line">      request.addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Retrofit-Sample-App"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">  .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">  .setRequestInterceptor(requestInterceptor)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>每个请求方法都可以定义成同步或者异步。</p>
<ul>
<li>同步</li>
</ul>
<p>同步方法有返回值，且参数中不包含回调<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line">~~</div><div class="line">* 异步</div><div class="line"></div><div class="line">异步方法没有返回值，且最后一个参数须是Callback对象</div><div class="line">~~~java</div><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div><div class="line">~~</div><div class="line">在Android中，callbacks将会在主线程中调用。在普通Java程序中，callbacks将会在执行HTTP请求方法的那个线程中调用。</div><div class="line"></div><div class="line">## 处理服务器返回结果</div><div class="line"></div><div class="line">RestAdapter中的转换器会把服务器的返回结果（一般为JSON）转换成我们在函数返回值或Callback接口中定义的Java对象。</div><div class="line">~~~java</div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line"></div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div></pre></td></tr></table></figure></p>
<p>List<repo>,就是将要被转换成的Java对象。</repo></p>
<h2 id="直接获取返回体"><a href="#直接获取返回体" class="headerlink" title="直接获取返回体"></a>直接获取返回体</h2><p>如果要直接获取服务器返回的HTTP返回体，在返回值或callback中直接使用 Response对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function">Response <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line"></div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user, Callback&lt;Response&gt; call)</span>;</div></pre></td></tr></table></figure></p>
<p>参考链接:</p>
<p>官方文档：<a href="square.github.io/retrofit/">不过是Retrofit2.0</a><br>中文文档：<a href="blog.chengyunfeng.com/?p=491&amp;utm_source=tuicool&amp;utm_medium=referral">这个是Retrofit1.9</a><br>源码解析：[<a href="http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/" target="_blank" rel="external">http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/</a></p>
<h2 id="原文地址：http-www-jianshu-com-p-63723f593695"><a href="#原文地址：http-www-jianshu-com-p-63723f593695" class="headerlink" title="原文地址：http://www.jianshu.com/p/63723f593695"></a>原文地址：<a href="http://www.jianshu.com/p/63723f593695" target="_blank" rel="external">http://www.jianshu.com/p/63723f593695</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit基于注解和动态代理，优化了Android中的网络请求操作。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="restful" scheme="https://hui46226021.github.io/categories/Android/JAVA/restful/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Retrofit2.0" scheme="https://hui46226021.github.io/tags/Retrofit2-0/"/>
    
      <category term="网络访问" scheme="https://hui46226021.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android Library项目发布到JCenter最简单的配置方法</title>
    <link href="https://hui46226021.github.io/2016/12/22/JCenter/"/>
    <id>https://hui46226021.github.io/2016/12/22/JCenter/</id>
    <published>2016-12-22T04:32:21.000Z</published>
    <updated>2017-03-18T00:57:54.385Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便 需要把jar发布到Maven服务器<br>网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter</p>
<p>先看一下上传过程图解<br><a id="more"></a></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-注册Bintray账号-传送门-https-bintray-com"><a href="#1-注册Bintray账号-传送门-https-bintray-com" class="headerlink" title="1. 注册Bintray账号 ([传送门(https://bintray.com))"></a>1. 注册Bintray账号 ([传送门(<a href="https://bintray.com" target="_blank" rel="external">https://bintray.com</a>))</h2><p>Bintray是jcenter的托管商，因此你必须注册一个Bintray账号，注册完账号后记下你的用户名以及API Key。</p>
<p>登陆后在首页右上角点击用户名进入个人主页，然后点击用户名下面的Edit进入个人信息编辑页面，接下来点击页面左边列表的最后一项API Key</p>
<p>如图所示点击最右边箭头指示的复制按钮即可复制你的API Key</p>
<h1 id="注册得时候要注意-这里有两个坑"><a href="#注册得时候要注意-这里有两个坑" class="headerlink" title="注册得时候要注意   这里有两个坑"></a>注册得时候要注意   这里有两个坑</h1><p>有两个注册 入口  要选上面得那个  否者最后会创建不了项目  报HTTP/1.1 404 Not Found  得错误</p>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_oamt.jpg" alt=""></p>
<ul>
<li>1 注册时，不少邮箱地址还不支持，要注意。 </li>
<li>2 创建仓库时，如果使用Bintray-release,名字就填成maven,因为他的wiki:repoName: The repository name. Set to ‘maven’ by default.(有错误请指出)</li>
</ul>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_dHJe.jpg" alt=""><br>这里写图片描述</p>
<p>Finally，坑了我一天之后，终于BUILD SUCCESSFUL了</p>
<ul>
<li><ol>
<li>检查Android插件版本</li>
</ol>
</li>
</ul>
<p>首先你要检查你的Android插件的版本，因为1.1.0版本有一个BUG会导致生成javadoc失败，所以你只需升级到最新即可。目前最新版本是1.3.0，在项目根目录下的build.gradle文件中修改版本号即可，如下:</p>
<p>复制代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你在看到这篇文章的时候有更新的版本的话，直接改为最新的版本即可。</p>
<ul>
<li><ol>
<li>添加所需插件</li>
</ol>
</li>
</ul>
<p>在项目根目录下build.gradle文件中的dependencies节点中追加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div></pre></td></tr></table></figure></p>
<p>android-maven-gradle-plugin插件是用来打包Maven所需文件的</p>
<p>gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的</p>
<p>完成后如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">        classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置项目信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/project.properties" target="_blank" rel="external">project.properties</a>文件并放到你的library module目录下</p>
<p>project.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=</div><div class="line">project.groupId=</div><div class="line">project.artifactId=</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=</div><div class="line">project.gitUrl=</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>project.name：项目名称</li>
<li>project.groupId：项目组ID，通常情况下如果你的包名为com.example.test，那么项目组ID就是com.example</li>
<li>project.artifactId：项目ID，通常情况下如果你的包名为com.example.test，那么项目ID就是test</li>
<li>project.packaging：包类型，Android库是aar</li>
<li>project.siteUrl：项目官方网站的地址，没有的话就用Github上的地址，例如：<a href="https://github.com/xiaopansky/Sketch" target="_blank" rel="external">https://github.com/xiaopansky/Sketch</a></li>
<li>project.gitUrl：项目的Git地址，例如：<a href="https://github.com/xiaopansky/Sketch.git" target="_blank" rel="external">https://github.com/xiaopansky/Sketch.git</a></li>
<li>javadoc.name：生成的javadoc打开后主页显示的名称，通常跟项目名称一样即可<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=Sketch</div><div class="line">project.groupId=me.xiaopan</div><div class="line">project.artifactId=sketch</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=https://github.com/xiaopansky/Sketch</div><div class="line">project.gitUrl=https://github.com/xiaopansky/Sketch.git</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=Sketch</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置Bintray账号以及开发者信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/local.properties" target="_blank" rel="external">local.properties</a>文件并放到你的library module目录下</p>
<p>local.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#bintray</div><div class="line">bintray.user=</div><div class="line">bintray.apikey=</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=</div><div class="line">developer.name=</div><div class="line">developer.email=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>bintray.user：你的Bintray的用户名</li>
<li>bintray.apikey：你的的Bintray的API Key</li>
<li>developer.id：通常是你在开源社区的昵称</li>
<li>developer.name：你的姓名</li>
<li>developer.email：你的邮箱<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#bintray</div><div class="line">bintray.user=xiaopansky</div><div class="line">bintray.apikey=*****************************</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=xiaopan</div><div class="line">developer.name=********</div><div class="line">developer.email=sky@xiaopan.me</div></pre></td></tr></table></figure>
<p>*号显示的为个人信息不反方便透露，还请见谅</p>
<h2 id="注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"><a href="#注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息" class="headerlink" title="注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"></a>注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息</h2><ul>
<li><ol>
<li>配置bintrayUpload.gradle</li>
</ol>
</li>
</ul>
<p>方法1：直接使用远程bintrayUpload.gradle文件</p>
<p>修改你的library module的build.gradle文件，在最后加上apply from: “<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：" target="_blank" rel="external">https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "https:<span class="comment">//raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle"</span></div></pre></td></tr></table></figure>
<p>方法2：下载后使用本地bintrayUpload.gradle文件</p>
<p>首先下载bintrayUpload.gradle文件并放到你的library module目录下</p>
<p>然后修改你的library module的build.gradle文件，在最后加上apply from: “bintrayUpload.gradle”，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "bintrayUpload.gradle"</div></pre></td></tr></table></figure>
<p>推荐大家使用第一种方案，简单快捷，至此配置工作已全部结束</p>
<ul>
<li><ol>
<li>执行命令打包并上传到Bintray</li>
</ol>
</li>
</ul>
<p>打开终端进入项目目录下，</p>
<p>执行 gradlew install 先编译一下</p>
<p>再执行gradlew bintrayUpload命令即可</p>
<p>另外，如果你的本地已经配置了Gradle了，那么执行gradle bintrayUpload命令也可以。gradlew是Gradle的一层封装，如果你本地没有安装Gradle gradlew就会自动下载Gradle</p>
<ul>
<li><ol>
<li>请求提交你的项目到jcenter</li>
</ol>
</li>
</ul>
<p>前面所有步骤走完之后实际上只是上传了你的项目到Bintray而已，并没有被包含在jcenter中，要想提交到jcenter中还需要Bintray的审核。</p>
<p>登入Bintray网站，进入个人中心，在右侧的Owned Repositories区域点击Maven的图标，进入你的Maven项目列表。</p>
<p>如果已经上传成功了，在这里就能看到你的项目，进入项目详情，在右下角的Linked To区域点击Add to JCenter，然后在Comments输入框里随便填写下信息，最后点Send提交请求即可</p>
<p>一般情况下审核需要4到5个小时，耐心等待就行了，审核通过后会给你发邮件通知你，并且以后更新项目就不需要再审核了。</p>
<ul>
<li><ol>
<li>一句话导入你的项目</li>
</ol>
</li>
</ul>
<p>当审核通过后，别人就可以一句话导入你的项目了，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'me.xiaopan:sketch:2.0.0'</span></div></pre></td></tr></table></figure></p>
<ul>
<li><ol>
<li>额外补充：</li>
</ol>
</li>
</ul>
<p>保持你的library module的名字同artifactId一样</p>
<p>因为在Bintray上你的项目的maven-metadata.xml文件的路径是gruopId+”/“+module名称。</p>
<p>例如你的groupId是com.example，artifactId是test，但module名称是library。</p>
<p>这时候项目文件是在com.example.test目录下的，但maven-metadata.xml文件却是在com.example.library目录下的。</p>
<p>这样一来如果你有多个项目groupId一样，artifactId不一样，但module名称都是library的话，可能就会冲突。</p>
<p>目前为止我还没有找到更好的解决办法，就只能让module名称和artifactId保持一致，如果你们谁有更好的办法，欢迎留言交流。</p>
<ul>
<li><ol>
<li>参考文章</li>
</ol>
</li>
</ul>
<p><a href="http://www.cnblogs.com/qianxudetianxia/p/4322331.html" target="_blank" rel="external">Android拓展系列(12)–使用Gradle发布aar项目到JCenter仓库</a><br><a href="http://blog.csdn.net/maosidiaoxian/article/details/43148643" target="_blank" rel="external">使用Gradle发布Android开源项目到JCenter</a><br><a href="http://www.jianshu.com/p/c721f9297b2f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">Android 项目打包到 JCenter 的坑</a></p>
<ul>
<li><ol>
<li>常见问题</li>
</ol>
</li>
</ul>
<p>Error:Cause: org/gradle/api/publication/maven/internal/DefaultMavenFactory：当你使用的Gradle版本是2.4以上，Android插件版本是1.3.0以上的时候就会出现这个问题，这时候你只需将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可<br>You are using JDK version ‘java version “1.7.0_71”’. Some versions of JDK 1.7 (e.g. 1.7.0_10) may cause class loading errors in Gradle.Please update to a newer version (e.g. 1.7.0_67)：当你使用的Gradle版本是2.4以上，Andriod插件版本是1.2.3的时候就会出现这个问题，同样的你只需要将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可</p>
<p>以上文章转载：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>关于jcenter和Maven Central的理解和gradle是如何从仓库上获取一个library</p>
<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。</p>
<h2 id="Android-studio-是从哪里得到库的？"><a href="#Android-studio-是从哪里得到库的？" class="headerlink" title="Android studio 是从哪里得到库的？"></a>Android studio 是从哪里得到库的？</h2><p>先从这个简单的问题开始，我相信不是每个人都完全明白Android studio 是从哪里得到这些library的。莫非就是Android studio 从google搜索然后下载了一个合适的给我们？</p>
<p>呵 呵，没那么复杂。Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务 器：jcenter 和  Maven Central。</p>
<h2 id="jcenter"><a href="#jcenter" class="headerlink" title="jcenter"></a>jcenter</h2><p>jcenter是一个由 bintray.com维护的Maven仓库 。你可以在<a href="http://jcenter.bintray.com/" target="_blank" rel="external">这里</a>看到整个仓库的内容。</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用jcenter了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Maven-Central"><a href="#Maven-Central" class="headerlink" title="Maven Central"></a>Maven Central</h2><p>Maven Central 则是由sonatype.org维护的Maven仓库。你可以在<a href="https://oss.sonatype.org/content/repositories/releases/" target="_blank" rel="external">这里</a>看到整个仓库。</p>
<p>注：不管是jcenter还是Maven Central ，两者都是Maven仓库</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用Maven Central了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，虽然jcenter和Maven Central 都是标准的 android library仓库，但是它们维护在完全不同的服务器上，由不同的人提供内容，两者之间毫无关系。在jcenter上有的可能 Maven Central 上没有，反之亦然。</p>
<p>除了两个标准的服务器之外，如果我们使用的library的作者是把该library放在自己的服务器上，我们还可以自己定义特有的Maven仓库服务器。Twitter的Fabric.io 就是这种情况，它们在<a href="https://maven.fabric.io/" target="_blank" rel="external">https://maven.fabric.io/</a>public上维护了一个自己的Maven仓库。如果你想使用Fabric.io的library，你必须自己如下定义仓库的url。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123; url <span class="string">'https://maven.fabric.io/public'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在里面使用相同的方法获取一个library。</p>
<p>dependencies {<br>    compile ‘com.crashlytics.sdk.android:crashlytics:2.2.4@aar’<br>}<br>但是将library上传到标准的服务器与自建服务器，哪种方法更好呢？当然是前者。如果将我们的library公开，其他开发者除了一行定义依赖名的代码之外不需要定义任何东西。因此这篇文章中，我们将只关注对开发者更友好的jcenter 和 Maven Central 。</p>
<p>实际上可以在Android Studio上使用的除了Maven 仓库之外还有另外一种仓库：Ivy 仓库 。但是根据我的经验来看，我还没看到任何人用过它，包括我，因此本文就直接忽略了。</p>
<h2 id="理解jcenter和Maven-Central"><a href="#理解jcenter和Maven-Central" class="headerlink" title="理解jcenter和Maven Central"></a>理解jcenter和Maven Central</h2><p>为何有两个标准的仓库？</p>
<p>事实上两个仓库都具有相同的使命：提供Java或者Android library服务。上传到哪个（或者都上传）取决于开发者。</p>
<p>起初，Android Studio 选择Maven Central作为默认仓库。如果你使用老版本的Android Studio创建一个新项目，mavenCentral()会自动的定义在build.gradle中。</p>
<p>但 是Maven Central的最大问题是对开发者不够友好。上传library异常困难。上传上去的开发者都是某种程度的极客。同时还因为诸如安全方面的其他原 因，Android Studio团队决定把默认的仓库替换成jcenter。正如你看到的，一旦使用最新版本的Android Studio创建一个项目，jcenter()自动被定义，而不是mavenCentral()。</p>
<p>有许多将Maven Central替换成jcenter的理由，下面是几个主要的原因。</p>
<ul>
<li><p>jcenter通过CDN发送library，开发者可以享受到更快的下载体验。</p>
</li>
<li><p>jcenter是全世界最大的Java仓库，因此在Maven Central 上有的，在jcenter上也极有可能有。换句话说jcenter是Maven Central的超集。</p>
</li>
<li><p>上传library到仓库很简单，不需要像在 Maven Central上做很多复杂的事情。</p>
</li>
<li><p>友好的用户界面</p>
</li>
<li><p>如果你想把library上传到 Maven Central ，你可以在bintray网站上直接点击一个按钮就能实现。</p>
</li>
</ul>
<p>基于上面的原因以及我自己的经验，可以说替换到jcenter是明智之举。</p>
<p>所以我们这篇文章将把重心放在jcenter，反正如果你能成功把library放在jcenter，转到 Maven Central 是非常容易的事情。</p>
<h2 id="gradle是如何从仓库上获取一个library的？"><a href="#gradle是如何从仓库上获取一个library的？" class="headerlink" title="gradle是如何从仓库上获取一个library的？"></a>gradle是如何从仓库上获取一个library的？</h2><p>在讨论如何上传library到jcenter之前，我们先看看gradle是如何从仓库获取library的。比如我们在 build.gradle输入如下代码的时候，这些库是如果奇迹般下载到我们的项目中的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div></pre></td></tr></table></figure></p>
<p>一般来说，我们需要知道library的字符串形式，包含3部分</p>
<p>GROUP_ID:ARTIFACT_ID:VERSION<br>上面的例子中，GROUP_ID是com.inthecheesefactory.thecheeselibrary ，ARTIFACT_ID是fb-like，VERSION是0.9.3。</p>
<p>GROUP_ID 定义了library的group。有可能在同样的上下文中存在多个不同功能的library。如果library具有相同的group，那么它们将共享 一个GROUP_ID。通常我们以开发者包名紧跟着library的group名称来命名，比如com.squareup.picasso。然后 ARTIFACT_ID中是library的真实名称。至于VERSION，就是版本号而已，虽然可以是任意文字，但是我建议设置为x.y.z的形式，如 果喜欢还可以加上beta这样的后缀。</p>
<p>下面是Square library的一个例子。你可以看到每个都可以很容易的分辨出library和开发者的名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.squareup:otto:1.3.7'</span></div><div class="line">  compile <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></div><div class="line">  compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div><div class="line">  compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么在添加了上面的依赖之后会发生什么呢？简单。Gradle会询问Maven仓库服务器这个library是否存在，如果是，gradle会获得 请求library的路径，一般这个路径都是这样的形式：GROUP_ID/ARTIFACT_ID/VERSION_ID。比如可以在<a href="http://jcenter.bintray.com/com/squareup/otto/1.3.7" target="_blank" rel="external">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a> 和  <a href="https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/" target="_blank" rel="external">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a></p>
<p>下获得com.squareup:otto:1.3.7的library文件。</p>
<p>然后Android Studio 将下载这些文件到我们的电脑上，与我们的项目一起编译。整个过程就是这么简单，一点都不复杂。</p>
<p>我 相信你应该清楚的知道从仓库上下载的library只是存储在仓库服务器上的jar 或者aar文件而已。有点类似于自己去下载这些文件，拷贝然后和项目 一起编译。但是使用gradle依赖管理的最大好处是你除了添加几行文字之外啥也不做。library一下子就可以在项目中使用了。</p>
<p>了解aar文件</p>
<p>等等，我刚才说了仓库中存储的有两种类型的library：jar 和 aar。jar文件大家都知道，但是什么是aar文件呢？</p>
<p>aar文件时在jar文件之上开发的。之所以有它是因为有些Android Library需要植入一些安卓特有的文件，比如AndroidManifest.xml，资源文件，Assets或者JNI。这些都不是jar文件的标准。</p>
<p>因此aar文件就时发明出来包含所有这些东西的。总的来说它和jar一样只是普通的zip文件，不过具有不同的文件结构。jar文件以classes.jar的名字被嵌入到aar文件中。其余的文件罗列如下：</p>
<ul>
<li>/AndroidManifest.xml (mandatory)</li>
<li>/classes.jar (mandatory)</li>
<li>/res/ (mandatory)</li>
<li>/R.txt (mandatory)</li>
<li>/assets/ (optional)</li>
<li>/libs/*.jar (optional)</li>
<li>/jni/<abi>/*.so (optional)</abi></li>
<li>/proguard.txt (optional)</li>
<li>/lint.jar (optional)</li>
</ul>
<p>可以看到.aar文件是专门为安卓设计的。</p>
<p>以上转载：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Gradle 2.4之后已经可以使用JitPack发布项目，这个用起来甚至比上述方法还要简单的多，感兴趣的可以了解一下。</p>
<p>JitPack官网：<a href="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a>相当方便</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便 需要把jar发布到Maven服务器&lt;br&gt;网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：&lt;a href=&quot;https://github.com/xiaopansky/android-library-publish-to-jcenter&quot;&gt;https://github.com/xiaopansky/android-library-publish-to-jcenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter&lt;/p&gt;
&lt;p&gt;先看一下上传过程图解&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="gradle" scheme="https://hui46226021.github.io/categories/Android/JAVA/gradle/"/>
    
      <category term="Maven" scheme="https://hui46226021.github.io/categories/Android/JAVA/gradle/Maven/"/>
    
      <category term="JCenter" scheme="https://hui46226021.github.io/categories/Android/JAVA/gradle/Maven/JCenter/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Maven" scheme="https://hui46226021.github.io/tags/Maven/"/>
    
      <category term="JCenter" scheme="https://hui46226021.github.io/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>基于Redis的Session共享示例</title>
    <link href="https://hui46226021.github.io/2016/12/17/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84Session%E5%85%B1%E4%BA%AB%E7%A4%BA%E4%BE%8B/"/>
    <id>https://hui46226021.github.io/2016/12/17/基于Redis的Session共享示例/</id>
    <published>2016-12-17T08:17:33.000Z</published>
    <updated>2017-03-19T06:00:08.118Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 在单机情况下，Session可由部署在服务器上的Web容器来管理 (如Tomcat、JBoss)。</p>
<p>在负载均衡的集群环境下，负载均衡可能将请求分发到不同的服务器上去，在这种情况，需要将有状态的session统一管理起来<br><a id="more"></a><br><a href="https://my.oschina.net/wangmengjun/blog/810179#0-tsina-1-15650-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="external">https://my.oschina.net/wangmengjun/blog/810179#0-tsina-1-15650-397232819ff9a47a7b7e80a40613cfe1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 在单机情况下，Session可由部署在服务器上的Web容器来管理 (如Tomcat、JBoss)。&lt;/p&gt;
&lt;p&gt;在负载均衡的集群环境下，负载均衡可能将请求分发到不同的服务器上去，在这种情况，需要将有状态的session统一管理起来&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/JAVA/"/>
    
      <category term="Redis" scheme="https://hui46226021.github.io/categories/JAVA/Redis/"/>
    
      <category term="Session" scheme="https://hui46226021.github.io/categories/JAVA/Redis/Session/"/>
    
    
      <category term="Redis" scheme="https://hui46226021.github.io/tags/Redis/"/>
    
      <category term="session共享" scheme="https://hui46226021.github.io/tags/session%E5%85%B1%E4%BA%AB/"/>
    
      <category term="分布式" scheme="https://hui46226021.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>DecorView</title>
    <link href="https://hui46226021.github.io/2016/09/17/DecorView/"/>
    <id>https://hui46226021.github.io/2016/09/17/DecorView/</id>
    <published>2016-09-17T08:17:33.000Z</published>
    <updated>2017-03-17T23:07:17.958Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: Activity 的结构  setContentView  的执行<br><a id="more"></a></p>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>Activity的setContentView 方法里 调用了 getWindow().setContentView(layoutResID);  </p>
<p>这个getWindow 获取到的就是PhoneWindow </p>
<p>在PhoneWindow里面 将布局文件 渲染到 一个mContentParent 的 viewgruop里面</p>
<p>viewgruop 通过generateLayout  (DecorView) 生成 ,generateDecour 方法初始  该方法生成一个 DecorView </p>
<p>DecorView 就是一个 FrameLayout  所以  所有的 Activity 的跟布局 都是一个 FrameLayout</p>
<p>generateLayout  方法里  判断 加载不同的系统布局 （有无标题  Actionbar等）生成一个View Add到DecorView里</p>
<p>这是 DecorView 里 就是一个 线性布局 里面是一个 Titel 下面是个 FrameLayout </p>
<p>getWindow().getDecorView  可以在 decorView findViewById(android.R.id.content) 获取 DecorView 里面的 FrameLayout</p>
<p><img src="https://static.oschina.net/uploads/img/201703/10132806_Lhc8.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: Activity 的结构  setContentView  的执行&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="DecorView" scheme="https://hui46226021.github.io/tags/DecorView/"/>
    
      <category term="源码" scheme="https://hui46226021.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="setContentView" scheme="https://hui46226021.github.io/tags/setContentView/"/>
    
  </entry>
  
  <entry>
    <title>Android 仿微信 相册多图选择器</title>
    <link href="https://hui46226021.github.io/2016/07/01/Android%20%E4%BB%BF%E5%BE%AE%E4%BF%A1%20%E7%9B%B8%E5%86%8C%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://hui46226021.github.io/2016/07/01/Android 仿微信 相册多图选择器/</id>
    <published>2016-07-01T14:37:23.000Z</published>
    <updated>2017-03-17T23:06:27.668Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用<br><a id="more"></a></p>
<h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shphotoselectorlibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shphotoselectorlibrary:2.0.9'</span></div></pre></td></tr></table></figure></p>
<p>该项目依赖 Glide:3.7.0 如果有冲突 可以 修改主项目里的依赖  或者 直接导入Library</p>
<h3 id="跳转到-图片选择器页面"><a href="#跳转到-图片选择器页面" class="headerlink" title="跳转到 图片选择器页面"></a>跳转到 图片选择器页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMGSACTIVITY_REQUEST = <span class="number">10001</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chise</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">		<span class="comment">//可选择图片的最大数量</span></div><div class="line">		intent.putExtra(PhotoActivity.IMAGE_COUNT,<span class="number">9</span>); </div><div class="line">		<span class="comment">//顶部Toolbar栏背景颜色</span></div><div class="line">		intent.putExtra(PhotoActivity.BAR_COLORS,R.color.colorPrimary);</div><div class="line">		intent.setClass(<span class="keyword">this</span>,PhotoActivity.class);</div><div class="line">		startActivityForResult(intent,IMGSACTIVITY_REQUEST);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="在Activity的回调里获取到-所有选择的图片地址"><a href="#在Activity的回调里获取到-所有选择的图片地址" class="headerlink" title="在Activity的回调里获取到 所有选择的图片地址"></a>在Activity的回调里获取到 所有选择的图片地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (requestCode == IMGSACTIVITY_REQUEST &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">			Bundle bundle = data.getExtras();</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (bundle.getStringArrayList(<span class="string">"files"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">					listfile = bundle.getStringArrayList(<span class="string">"files"</span>);</div><div class="line">					listView.setVisibility(View.VISIBLE);</div><div class="line">					ArrayAdapter&lt;String&gt; arryAdapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, listfile);</div><div class="line">					listView.setAdapter(arryAdapter);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/1.gif" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>源码地址：<a href="https://github.com/hui46226021/ShPhotoSelector" target="_blank" rel="external">https://github.com/hui46226021/ShPhotoSelector</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="相册" scheme="https://hui46226021.github.io/tags/%E7%9B%B8%E5%86%8C/"/>
    
      <category term="微信" scheme="https://hui46226021.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="多图选择" scheme="https://hui46226021.github.io/tags/%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>Android分包MultiDex原理详解</title>
    <link href="https://hui46226021.github.io/2016/03/17/Android%E5%88%86%E5%8C%85MultiDex%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://hui46226021.github.io/2016/03/17/Android分包MultiDex原理详解/</id>
    <published>2016-03-17T14:37:23.000Z</published>
    <updated>2017-03-19T04:51:19.546Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:windowIsTranslucent 和windowAnimationStyle冲突<br><a id="more"></a></p>
<h1 id="MultiDex的产生背景"><a href="#MultiDex的产生背景" class="headerlink" title="MultiDex的产生背景"></a>MultiDex的产生背景</h1><p>当Android系统安装一个应用的时候，有一步是对Dex进行优化，这个过程有一个专门的工具来处理，叫DexOpt。DexOpt的执行过程是在第一次加载Dex文件的时候执行的。这个过程会生成一个ODEX文件，即Optimised Dex。执行ODex的效率会比直接执行Dex文件的效率要高很多。</p>
<p>但是在早期的Android系统中，DexOpt有一个问题，DexOpt会把每一个类的方法id检索起来，存在一个链表结构里面。但是这个链表的长度是用一个short类型来保存的，导致了方法id的数目不能够超过65536个。当一个项目足够大的时候，显然这个方法数的上限是不够的。尽管在新版本的Android系统中，DexOpt修复了这个问题，但是我们仍然需要对低版本的Android系统做兼容。</p>
<p>为了解决方法数超限的问题，需要将该dex文件拆成两个或多个，为此谷歌官方推出了multidex兼容包，配合AndroidStudio实现了一个APK包含多个dex的功能。</p>
<h2 id="MultiDex的简要原理"><a href="#MultiDex的简要原理" class="headerlink" title="MultiDex的简要原理"></a>MultiDex的简要原理</h2><p>我们以APK中有两个dex文件为例，第二个dex文件为classes2.dex。</p>
<ul>
<li><p>兼容包在Applicaion实例化之后，会检查系统版本是否支持 multidex，classes2.dex是否需要安装。</p>
</li>
<li><p>如果需要安装则会从APK中解压出classes2.dex并将其拷贝到应用的沙盒目录下。</p>
</li>
<li><p>通过反射将classes2.dex注入到当前的classloader中。</p>
</li>
</ul>
<p>下面引入一下官方的文档。</p>
<p><a href="https://developer.android.com/tools/building/multidex.html#about" target="_blank" rel="external">https://developer.android.com/tools/building/multidex.html#about </a><br>笔者，针对官方文档的翻译如下：</p>
<p>构建超过65K方法的App</p>
<p>随着Android设备的慢慢发展，App的大小会变得越来越大。当我们在开发App的时候由于报的大小和引用库的原因，我们在编译我们项目的时候通常会遇到下面一个错误：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Conversion to Dalvik format failed: Unable to execute dex: method ID not in [<span class="number">0</span>, <span class="number">0xffff</span>]: <span class="number">65536</span></div></pre></td></tr></table></figure></p>
<p>当然，也有一些系统设备会出现以下log信息，不过反馈的是同一个问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trouble writing output:Too many field references: <span class="number">131000</span>; max is <span class="number">65536</span>.You may <span class="keyword">try</span> using --multi-dex option.</div></pre></td></tr></table></figure></p>
<p>这两个错误条件显示一个共同的数字：65536。这个数字，它表示的是你在一个dex包中的函数方法超过了65535个。</p>
<p>如果你已经构建了一个Android App时，并收到了这个错误，那么恭喜你，你有很多代码！</p>
<p>下面我们就具体说说，如何解决这个问题。</p>
<h2 id="关于65K方法限制"><a href="#关于65K方法限制" class="headerlink" title="关于65K方法限制"></a>关于65K方法限制</h2><p>我们知道Android中的可执行伟剑都存储在dex文件中，其中包含已编译的代码来运行你的应用程序。Dalvik虚拟机对可执行dex文件的规格是有方法限制的，即一个单一的dex文件的方法总数最多为65536。</p>
<p>其中包括：</p>
<ul>
<li><p>引用的Android Framework方法</p>
</li>
<li><p>library的方法</p>
</li>
<li><p>我们自己书写代码的方法。</p>
</li>
</ul>
<p>为了突破这个方法数的限制，我们就提出了一个方案——生成多个dex文件。这个多个dex文件的方案，我们又称为multidex方案配置。</p>
<h3 id="Multidex支持Android-5-0之前的版本"><a href="#Multidex支持Android-5-0之前的版本" class="headerlink" title="Multidex支持Android 5.0之前的版本"></a>Multidex支持Android 5.0之前的版本</h3><pre><code>Android5.0版本的平台之前，Android使用的是Dalvik Runtime执行的程序代码。默认情况下，限制应用到一个单一的classes.dex。
</code></pre><p>Dalvik字节码文件每APK。为了绕过这个限制，你可以使用multidex支持库，成为你的应用程序的主要部分和DEX文件进行管理，获得额外的dex文件，它们包含的代码。</p>
<h3 id="Multidex支持Android-5-0及更高版本"><a href="#Multidex支持Android-5-0及更高版本" class="headerlink" title="Multidex支持Android 5.0及更高版本"></a>Multidex支持Android 5.0及更高版本</h3><pre><code>Android 5.0和更高的Runtime 如art，本身就支持从应用的APK文件加载多个DEX文件。art支持预编译的应用程序在安装时扫描类（..）。Dex文件编译成一个单一的Android设备上执行.oat文件。
</code></pre><h2 id="避免65K限制"><a href="#避免65K限制" class="headerlink" title="避免65K限制"></a>避免65K限制</h2><p>当你确定使用multidex的分包策略的时候，请你先确定自己的代码中都是优秀的。你还需要做以下几步：</p>
<ul>
<li><p>去掉一些未使用的import和library</p>
</li>
<li><p>使用ProGuard去掉一些未使用的代码</p>
</li>
</ul>
<h2 id="用Gradle配置使用Multidex"><a href="#用Gradle配置使用Multidex" class="headerlink" title="用Gradle配置使用Multidex"></a>用Gradle配置使用Multidex</h2><p>Android 的 Gradle插件在 Android Build Tool 21.1开始就支持使用multidex了。</p>
<p>设置你的应用程序开发项目中使用multidex配置，要求你做出一些修改您的应用程序开发项目。：</p>
<ul>
<li><p>修改Gradle的配置，支持multidex</p>
</li>
<li><p>修改你的manifest。让其支持multidexapplication类</p>
</li>
</ul>
<p>修改Gradle的build如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">21</span></div><div class="line">    buildToolsVersion <span class="string">"21.1.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        minSdkVersion <span class="number">14</span></div><div class="line">        targetSdkVersion <span class="number">21</span></div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">// Enabling multidex support.</span></div><div class="line">        multiDexEnabled <span class="keyword">true</span></div><div class="line">    &#125;</div><div class="line">    ...&#125;dependencies &#123;</div><div class="line">  compile ‘com.android.support:multidex:<span class="number">1.0</span>.0‘&#125;</div></pre></td></tr></table></figure></p>
<p>Tips: 你可以在Gradle配置文件中的 multiDexEnabled 在 defaultConfig、<br>buildType、productFlavor选项设置。</p>
<p>在manifest文件中，添加MultidexApplication Class的引用，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;<span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.android.multidex.myapplication"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">...</span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"android.support.multidex.MultiDexApplication"</span>&gt;</div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然，如果你重写了 Application，就对自定义Application的继承方式做一个修改。</p>
<h2 id="Multidex的方式的局限性"><a href="#Multidex的方式的局限性" class="headerlink" title="Multidex的方式的局限性"></a>Multidex的方式的局限性</h2><p>虽然我们开起来multidex是一个极好的东西，但是multidex还是存在自己的局限性，我们在开发测试之前要清楚局限性是什么：</p>
<ul>
<li><p>如果二DEX文件太大，安装分割dex文件是一个复杂的过程，可能会导致应用程序无响应（ANR）的错误。在这种情况下，你应该尽量的减小dex文件的大小和删除无用的逻辑，而不是完全依赖于multidex。</p>
</li>
<li><p>在Android 4.0设备（API Level 14）之前，由于Dalvik linearalloc bug（问题22586），multidex很可能是无法运行的。如果希望运行在Level 14之前的Android系统版本，请先确保完整的测试和使用。</p>
</li>
<li><p>应用程序使用了multiedex配置的，会造成使用比较大的内存。当然，可能还会引起dalvik虚拟机的崩溃(issue 78035)。</p>
</li>
<li><p>对于应用程序比较复杂的，存在较多的library的项目。multidex可能会造成不同依赖项目间的dex文件函数相互调用，找不到方法。</p>
</li>
</ul>
<h2 id="优化multidex开发和构建"><a href="#优化multidex开发和构建" class="headerlink" title="优化multidex开发和构建"></a>优化multidex开发和构建</h2><p>一个multidex的配置，对系统apk的构建、签名、打包复杂性大大的增加。这就意味着，你每一次的构建过程都是相当耗时的。</p>
<p>为了加快我们的开发速度，加快构建的过程，我们可以在Gradle productFlavors新建出来一个 development flavor 和 production flavor 来满足我们不同构建需求。</p>
<p>下面是一个列子演示我们如何设置这些flavors在Gradle build文件中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    productFlavors &#123;</div><div class="line">        <span class="comment">// Define separate dev and prod product flavors.</span></div><div class="line">        dev &#123;</div><div class="line">            <span class="comment">// dev utilizes minSDKVersion = 21 to allow the Android gradle plugin</span></div><div class="line">            <span class="comment">// to pre-dex each module and produce an APK that can be tested on</span></div><div class="line">            <span class="comment">// Android Lollipop without time consuming dex merging processes.</span></div><div class="line">            minSdkVersion <span class="number">21</span></div><div class="line">        &#125;</div><div class="line">        prod &#123;</div><div class="line">            <span class="comment">// The actual minSdkVersion for the application.</span></div><div class="line">            minSdkVersion <span class="number">14</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">          ...</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">runProguard <span class="keyword">true</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(‘proguard-android.txt‘)</span>,</div><div class="line">                                                 ‘proguard-rules.pro‘</div><div class="line">        &#125;</div><div class="line">    &#125;&#125;dependencies &#123;</div><div class="line">  compile ‘com.android.support:multidex:<span class="number">1.0</span>.0‘&#125;</div></pre></td></tr></table></figure></p>
<p>在你完成了伤处的配置修改之后，你配置productFlavor 和 buildType来使用 ，devDebug 变种app。使用这些变种app，可以设置proguard disable、multidex enable方便我们测试。</p>
<p>这些配置需要针对Android Gradle插件做如下操作：</p>
<ul>
<li><p>在分包前，编译应用程序中的每一个module包括依赖项目，这个步骤称为 pre-dexing。</p>
</li>
<li><p>include每一个dex文件</p>
</li>
<li><p>最重要的是，对于主dex文件，不会做切分。以保证计算速度。</p>
</li>
</ul>
<p>这样设置既能够保证我们的最终报是一个使用了multidex模式的，而又不影响我们平时开发的测试效率。</p>
<h2 id="在Android-Studio中使用变种App"><a href="#在Android-Studio中使用变种App" class="headerlink" title="在Android Studio中使用变种App"></a>在Android Studio中使用变种App</h2><p>使用multidex工具构建变种App是非常方便的。在Android Studio允许我们选择这种变种构建方式的接口。</p>
<p>使用Android Studio构建 “devDebug”构建变种app需要完成两步：</p>
<ul>
<li><p>打开变种编辑窗口，选择favorites选项。</p>
</li>
<li><p>点击编译不同的变种，如下图所示 </p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://static.oschina.net/uploads/img/201604/11162817_F0W1.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<p>原文地址：<a href="http://www.mamicode.com/info-detail-1031299.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-1031299.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:windowIsTranslucent 和windowAnimationStyle冲突&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="MultiDex" scheme="https://hui46226021.github.io/tags/MultiDex/"/>
    
      <category term="65535" scheme="https://hui46226021.github.io/tags/65535/"/>
    
  </entry>
  
  <entry>
    <title>windowIsTranslucent 和windowAnimationStyle冲突</title>
    <link href="https://hui46226021.github.io/2016/03/17/windowIsTranslucent%20%E5%92%8CwindowAnimationStyle%E5%86%B2%E7%AA%81/"/>
    <id>https://hui46226021.github.io/2016/03/17/windowIsTranslucent 和windowAnimationStyle冲突/</id>
    <published>2016-03-17T14:37:23.000Z</published>
    <updated>2017-03-19T04:45:55.636Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:windowIsTranslucent 和windowAnimationStyle冲突<br><a id="more"></a></p>
<p>今天在写 android仿IOS 侧滑销毁的时候   需要把activity的背景设置成透明 在滑出的时候漏出 栈下面一层的activity  在AppTheme里面 设置了windowIsTranslucent 属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml">  </span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#333333<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#333333<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@style/MyActivitySiwtchAnimation<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  　</div><div class="line">　<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  　</div><div class="line">　<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里之前设置过  activity 切换动画<br>接下来 问题来了 </p>
<p>设置windowIsTranslucent  后android:windowAnimationStyle 失效了，不好使了</p>
<p>差了写资料 已解决 再次记录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyActivitySiwtchAnimation"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Animation.Translucent"</span>&gt;</span><span class="xml">  </span></div><div class="line"><span class="comment">&lt;!--创建效果--&gt;</span>  </div><div class="line"><span class="comment">&lt;!--&lt;item name="@android:activityOpenEnterAnimation"&gt;@anim/out_from_right&lt;/item&gt;--&gt;</span> </div><div class="line"> <span class="comment">&lt;!--&amp;lt;!&amp;ndash;上一个被覆盖效果&amp;ndash;&amp;gt;--&gt;</span> </div><div class="line"> <span class="comment">&lt;!--&lt;item name="@android:activityOpenExitAnimation"&gt;@anim/out_middle&lt;/item&gt;--&gt;</span> </div><div class="line">  <span class="comment">&lt;!--&amp;lt;!&amp;ndash;推出效果&amp;ndash;&amp;gt;--&gt;</span> </div><div class="line"> <span class="comment">&lt;!--&lt;item name="@android:activityCloseExitAnimation"&gt;@anim/out_toleft&lt;/item&gt;--&gt;</span> </div><div class="line"> <span class="comment">&lt;!--&amp;lt;!&amp;ndash;上一个还原效果&amp;ndash;&amp;gt;--&gt;</span> </div><div class="line"> <span class="comment">&lt;!--&lt;item name="@android:activityCloseEnterAnimation"&gt;@anim/out_middle2&lt;/item&gt;--&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterAnimation"</span>&gt;</span>@anim/out_from_right<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitAnimation"</span>&gt;</span>@anim/out_toleft<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>1.让 android:windowAnimationStyle  继承  @android :style/Animation.Translucent<br>此方法 在退出actvity时候动画有效  创建的时候无效</p>
<p>2<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterAnimation"</span>&gt;</span>@anim/out_from_right<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitAnimation"</span>&gt;</span>@anim/out_toleft<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>此方法有效。<br>不过本人是坑爹的锤子手机 在activity切换的时候 自带 一个由下到上的动画  目前的状态是 创建activity是重屏幕右下角出现 ，在其他手机上 还可以</p>
<h2 id="方法二：绝对完美解决"><a href="#方法二：绝对完美解决" class="headerlink" title="方法二：绝对完美解决"></a>方法二：绝对完美解决</h2><p>取消<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@style/MyActivitySiwtchAnimation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>改在 activity 和 fragment的基类里 重写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 重写 activity切换方法 消除系统自带动画</div><div class="line">     * <span class="doctag">@param</span> intent</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.startActivity(intent);</div><div class="line"></div><div class="line">        overridePendingTransition(R.anim.out_from_right,android.R.anim.slide_out_right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.finish();</div><div class="line">        overridePendingTransition(R.anim.out_from_right,android.R.anim.slide_out_right);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode, @Nullable Bundle options)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.startActivityForResult(intent, requestCode, options);</div><div class="line">        overridePendingTransition(R.anim.out_from_right,android.R.anim.slide_out_right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.startActivityForResult(intent, requestCode);</div><div class="line">        overridePendingTransition(R.anim.out_from_right,android.R.anim.slide_out_right);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>实现 切换动画 </p>
<p>这里收集了一些系统动画</p>
<p>//实现淡入浅出的效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out);</div></pre></td></tr></table></figure></p>
<p>// 由左向右滑入的效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">overridePendingTransition(android.R.anim.slide_in_left,android.R.anim.slide_out_right);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:windowIsTranslucent 和windowAnimationStyle冲突&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="windowIsTranslucent" scheme="https://hui46226021.github.io/tags/windowIsTranslucent/"/>
    
  </entry>
  
  <entry>
    <title>andfix 增量升级更新 热补丁修复</title>
    <link href="https://hui46226021.github.io/2016/03/17/andfix/"/>
    <id>https://hui46226021.github.io/2016/03/17/andfix/</id>
    <published>2016-03-17T14:37:23.000Z</published>
    <updated>2017-03-19T03:15:34.747Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵<br><a id="more"></a></p>
<h3 id="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"><a href="#搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）" class="headerlink" title="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"></a>搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）</h3><p>1.dexposed     github <a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">https://github.com/alibaba/dexposed</a></p>
<p>2.andfix   github <a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p>
<p>3.bsdiff  <a href="http://blog.csdn.net/lazyer_dog/article/details/47173013" target="_blank" rel="external">http://blog.csdn.net/lazyer_dog/article/details/47173013</a></p>
<p>dexposed和andfix是alibaba的开源项目，都是apk增量更新的实现框架，目前dexposed的兼容性较差，只有2.3，4.0~4.4兼容，其他Android版本不兼容或未测试，详细可以去dexposed的github项目主页查看，而andfix则兼容2.3~6.0，所以就拿这个项目来实现增量更新吧。至于bsdiff，只是阅览了一下，还没研究过。</p>
<p>首先 Git clone github <a href="https://github.com/alibaba/AndFix，将andfix项目下载下来，Android" target="_blank" rel="external">https://github.com/alibaba/AndFix，将andfix项目下载下来，Android</a> studio可以在build.gradle里导入andfix，</p>
<p>compile ‘com.alipay.euler:andfix:0.3.1@aar’<br>但是我是使用module的方式添加andfix，这样可以直接查看编辑源码，而且直接gradle导入的话还有个问题，后面再说。</p>
<p>andfix项目里有sample，导入也行，自己新建也行，我是自己新建项目，接着导入andfix作为module，demo里就两个类，mainactivity和myapplication</p>
<p>andfix里有些文件夹不用导入的，例如tools，doc等，记得新建jniLibs文件夹，libs里的so文件移到jniLibs里。<br>~~~java<br>public class MainApplication extends Application {<br>    private static final String TAG = “euler”;</p>
<pre><code>private static final String APATCH_PATH = &quot;/out.apatch&quot;;

private static final String DIR = &quot;apatch&quot;;//补丁文件夹
/**
 * patch manager
 */
private PatchManager mPatchManager;

@Override
public void onCreate() {
    super.onCreate();
    // initialize
    mPatchManager = new PatchManager(this);
    mPatchManager.init(&quot;1.0&quot;);
    Log.d(TAG, &quot;inited.&quot;);

    // load patch
    mPatchManager.loadPatch();
</code></pre><p>//        Log.d(TAG, “apatch loaded.”);</p>
<pre><code>    // add patch at runtime
    try {
        // .apatch file path
        String patchFileString = Environment.getExternalStorageDirectory()
                .getAbsolutePath() + APATCH_PATH;
        mPatchManager.addPatch(patchFileString);
        Log.d(TAG, &quot;apatch:&quot; + patchFileString + &quot; added.&quot;);

        //这里我加了个方法，复制加载补丁成功后，删除sdcard的补丁，避免每次进入程序都重新加载一次
        File f = new File(this.getFilesDir(), DIR + APATCH_PATH);
        if (f.exists()) {
            boolean result = new File(patchFileString).delete();
            if (!result)
                Log.e(TAG, patchFileString + &quot; delete fail&quot;);
        }
    } catch (IOException e) {
        Log.e(TAG, &quot;&quot;, e);
    }

}
</code></pre><p>public class MainActivity extends Activity {<br>    private static final String TAG = “euler”;</p>
<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    toast();
}

@Override
protected void onDestroy() {
    super.onDestroy();
    android.os.Process.killProcess(android.os.Process.myPid());
}

//旧方法，1.apk
private void toast() {        Toast.makeText(this, &quot;old&quot;, Toast.LENGTH_SHORT).show();    }}
</code></pre><p>刚刚说的直接在gradle里导入andfix会有个问题，是在原来的项目中，加载一次补丁后，out.apatch文件会copy到getFilesDir目录下的/apatch文件夹中，在下次补丁更新时，会检测补丁是否已经添加在apatch文件夹下，已存在就不会复制加载sdcard的out.apatch。</p>
<p>原来的addpath方法</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if(!src.exists()){<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + path + “] has be loaded.”);<br>        return;<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>修改后，判断apatch下的out.apatch存在即删除掉，重新复制加载sdcard下的out.apatch</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if (!src.exists()) {<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + src.getName() + “] has be loaded.”);<br>        boolean deleteResult = dest.delete();<br>        if (deleteResult)<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] has be delete.”);<br>        else {<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] delete error”);<br>            return;<br>        }<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>还有源码混淆</p>
<p>-optimizationpasses 5                                                           # 指定代码的压缩级别<br>-dontusemixedcaseclassnames                                                     # 是否使用大小写混合<br>-dontskipnonpubliclibraryclasses                                                # 是否混淆第三方jar<br>-dontpreverify                                                                  # 混淆时是否做预校验<br>-verbose                                                                        # 混淆时是否记录日志<br>-optimizations !code/simplification/arithmetic,!field/<em>,!class/merging/</em>        # 混淆时所采用的算法</p>
<h2 id="重要，別忘了這些，不混淆andfix包，不混淆native方法"><a href="#重要，別忘了這些，不混淆andfix包，不混淆native方法" class="headerlink" title="重要，別忘了這些，不混淆andfix包，不混淆native方法"></a>重要，別忘了這些，不混淆andfix包，不混淆native方法</h2><p>-dontwarn android.annotation<br>-dontwarn com.alipay.euler.<strong><br>-keep class com.alipay.euler.</strong> {<em>;}<br>-keep class </em> extends java.lang.annotation.Annotation<br>-keepclasseswithmembernames class * {<br>    native <methods>;<br>}</methods></p>
<p>接着打包1.apk，</p>
<p>然后修改mainactivity的toast()，打包2.apk</p>
<p>//修改Toast內容，2.apk<br>private void toast() {<br>    Toast.makeText(this, “new”, Toast.LENGTH_SHORT).show();<br>}</p>
<p>cmd输入命令，具体参数看usage</p>
<p>如无错误，编译后会生成一个apatch文件，改名成out.apatch</p>
<p>安装打开1.apk</p>
<p>关闭app，将out.apatch放sdcard根目录后，重新打开app，toast方法改变了</p>
<p>ps：</p>
<ol>
<li><p>这里只是简单的测试了一下，没有复杂的功能，而且andfix不支持布局资源等的修改。</p>
</li>
<li><p>github主页的issues反应说Android4.0.4，以及5.0以上版本会crash，不过我使用了两个虚拟机，genymotion的4.2和5.0虚拟机，没有错误，其他请自测</p>
</li>
<li><p>使用了apk加固时（360加固，百度加固等等），发现在加固前要先apkpatch制作补丁，不能使用加固后的apk制作，否则补丁无法使用，但是在加固前制作的补丁可以很容易的被反编译出源码</p>
</li>
</ol>
<p>demo下载 <a href="http://download.csdn.net/detail/ityangjun/9177377" target="_blank" rel="external">http://download.csdn.net/detail/ityangjun/9177377</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转载" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="增量升级" scheme="https://hui46226021.github.io/tags/%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7/"/>
    
      <category term="热补丁修复" scheme="https://hui46226021.github.io/tags/%E7%83%AD%E8%A1%A5%E4%B8%81%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="andfix" scheme="https://hui46226021.github.io/tags/andfix/"/>
    
  </entry>
  
  <entry>
    <title>Android代码和JS 相互调用 html js</title>
    <link href="https://hui46226021.github.io/2016/02/12/Android%E4%BB%A3%E7%A0%81%E5%92%8CJS%20%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%20html%20js/"/>
    <id>https://hui46226021.github.io/2016/02/12/Android代码和JS 相互调用 html js/</id>
    <published>2016-02-12T03:37:23.000Z</published>
    <updated>2017-03-19T03:21:03.479Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:今天接到需求要调用相机拍照 但页面是H5写的 所以研究了下 android里 JAVA 代码和JS 相互调用这方面的姿势<br><a id="more"></a></p>
<h1 id="一-JS调用-JAVA"><a href="#一-JS调用-JAVA" class="headerlink" title="一:JS调用 JAVA"></a>一:JS调用 JAVA</h1><h3 id="1-首先让webview-支持JS"><a href="#1-首先让webview-支持JS" class="headerlink" title="1.首先让webview 支持JS"></a>1.首先让webview 支持JS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h3 id="2-注入-Java-对象到-WebView-中。"><a href="#2-注入-Java-对象到-WebView-中。" class="headerlink" title="2.注入 Java 对象到 WebView 中。"></a>2.注入 Java 对象到 WebView 中。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JSKit js = <span class="keyword">new</span> JSKit(<span class="keyword">this</span>);</div><div class="line"> mWebView.addJavascriptInterface(js, <span class="string">"myjs"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhush on 2016/5/3.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSKit</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MainActivity ma;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JSKit</span><span class="params">(MainActivity context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ma = context;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Toast.makeText(ma, msg, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="注意：在-JELLY-BEAN-MR1以后-需要在被调用的方法上加-JavascriptInterface-要不然调用会失败"><a href="#注意：在-JELLY-BEAN-MR1以后-需要在被调用的方法上加-JavascriptInterface-要不然调用会失败" class="headerlink" title="注意：在 JELLY_BEAN_MR1以后 需要在被调用的方法上加 @JavascriptInterface 要不然调用会失败"></a>注意：在 JELLY_BEAN_MR1以后 需要在被调用的方法上加 @JavascriptInterface 要不然调用会失败</h1><p>[Android版本和API Level对应关系]（<a href="http://blog.csdn.net/huiguixian/article/details/39928027）" target="_blank" rel="external">http://blog.csdn.net/huiguixian/article/details/39928027）</a></p>
<h3 id="3-JS代码"><a href="#3-JS代码" class="headerlink" title="3.JS代码"></a>3.JS代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html40/strict.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, target-densitydpi=device-dpi"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">META</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">   function showMsgInAndroid()&#123;</div><div class="line">       myjs.showMsg('标识符');</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">BODY</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试js使用<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btntest'</span> <span class="attr">onclick</span>=<span class="string">'showMsgInAndroid()'</span>&gt;</span>调用android方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="二：JAVA调用JS"><a href="#二：JAVA调用JS" class="headerlink" title="二：JAVA调用JS"></a>二：JAVA调用JS</h1><p>1.JAVA 代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mWebView.loadUrl(<span class="string">"javascript:funFromjs('"</span>+imageUrl+<span class="string">"')"</span>)</div></pre></td></tr></table></figure></p>
<p>2.JS代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">funFromjs</span><span class="params">(str)</span></span>&#123;</div><div class="line">         alert(str);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Demo下载：<a href="https://github.com/hui46226021/JSAndroidCallCamera.git" target="_blank" rel="external">https://github.com/hui46226021/JSAndroidCallCamera.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:今天接到需求要调用相机拍照 但页面是H5写的 所以研究了下 android里 JAVA 代码和JS 相互调用这方面的姿势&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="Html5" scheme="https://hui46226021.github.io/categories/Android/JAVA/Html5/"/>
    
      <category term="JS" scheme="https://hui46226021.github.io/categories/Android/JAVA/Html5/JS/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="JS JAVA调用" scheme="https://hui46226021.github.io/tags/JS-JAVA%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>总结下 android集成环信SDK遇到的坑</title>
    <link href="https://hui46226021.github.io/2016/02/01/android%E9%9B%86%E6%88%90%E7%8E%AF%E4%BF%A1SDK%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://hui46226021.github.io/2016/02/01/android集成环信SDK遇到的坑/</id>
    <published>2016-02-01T14:37:23.000Z</published>
    <updated>2017-03-18T01:18:54.616Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:集成了一次环信 sdk 用的是他自带的essyui库 集成的过程中遇到了各种问题  翻来覆去弄个了好几天 记录一下<br><a id="more"></a><br>在官网创建应用 这些都很顺利<br>按照文档 导入EasyUI库<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://g.hiphotos.baidu.com/image/pic/item/bba1cd11728b47101f4ad20ac4cec3fdfd03238a.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> </p>
<p>本来预期是 这样就成功了  可是导入后显然不一样<br>怎么办  最后 联系客服 沟通了好半天  最后 确认几次 是不是 直接导入easyui库 即可 客服 信誓旦旦的说 对</p>
<p>最后经过高人指点  先删除 原easyui项目下的 build.gradle  再次导入 成了 跟文档写的一样了</p>
<p>过了第一个坑 </p>
<p>接下来开始编写代码<br>也没什么问题 完美运行起来了   但本还有个 坚果手机 安装测试下  嗯  蹦了 就这么蹦了</p>
<p>查看报错信息<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://d.hiphotos.baidu.com/image/pic/item/29381f30e924b899526856fe69061d950b7bf6a4.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>百度了一下 说是有 so库没有加载进去<br>看了下demo里面easyui库 在看看 自己的项目 发现确实缺少没导入</p>
<p>好高兴 发现问题了<br> 接下来把 so库复制进来  在 build.gradle 文件添加代码 android 下面</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">            main &#123;</div><div class="line">            jniLibs.srcDirs = ['libs']</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>启动 。。。依然报错</p>
<p>联系客服  客服又是信誓旦旦 的说 没毛病</p>
<p>最后 发现 应用中有armeabi-v7a 包</p>
<p>###所以 将armeabi 的文件在复制出一份 放到armeabi-v7a文件夹里 编译 运行  这回真没毛病了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:集成了一次环信 sdk 用的是他自带的essyui库 集成的过程中遇到了各种问题  翻来覆去弄个了好几天 记录一下&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
      <category term="IM" scheme="https://hui46226021.github.io/categories/Android/JAVA/IM/"/>
    
    
      <category term="环信" scheme="https://hui46226021.github.io/tags/%E7%8E%AF%E4%BF%A1/"/>
    
      <category term="即时通讯" scheme="https://hui46226021.github.io/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android动画 详解(二 帧动画 属性动画 )</title>
    <link href="https://hui46226021.github.io/2016/01/17/Android%E5%8A%A8%E7%94%BB%20%E8%AF%A6%E8%A7%A3(%E4%BA%8C%20%E5%B8%A7%E5%8A%A8%E7%94%BB%20%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%20)/"/>
    <id>https://hui46226021.github.io/2016/01/17/Android动画 详解(二 帧动画 属性动画 )/</id>
    <published>2016-01-17T14:37:23.000Z</published>
    <updated>2017-03-19T04:11:20.807Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="一-帧动画介绍"><a href="#一-帧动画介绍" class="headerlink" title="一 帧动画介绍"></a>一 帧动画介绍</h1><p>帧动画 就类似于 电影那种一张图一张图的切换 </p>
<h2 id="XML代码"><a href="#XML代码" class="headerlink" title="XML代码"></a>XML代码</h2><p>先通过XML配置好 需要切换的图片 和 执行是否循环 和执行时间等 文件放在res/drawable 目录下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="comment">&lt;!--   </span></div><div class="line">    oneshot代表着是否只展示一遍，false 不停的循环播放动画   </div><div class="line">    android:duration 时间长度  </div><div class="line"> --&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span>  </span></div><div class="line">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </div><div class="line">  <span class="attr">android:oneshot</span>=<span class="string">"true"</span>  </div><div class="line">  &gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon6"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon5"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon4"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon3"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon2"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/icon1"</span> <span class="attr">android:duration</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="JAVA调用XML开启动画"><a href="#JAVA调用XML开启动画" class="headerlink" title="JAVA调用XML开启动画"></a>JAVA调用XML开启动画</h2><p>先创建一个IamgeView  将其背景设置成 之前配置好的xml</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ImageView imageView = (ImageView) findViewById(R.id.imageView);</div><div class="line"> imageView.setImageResource(R.drawable.animation1);</div><div class="line"> AnimationDrawable animationDrawable = (AnimationDrawable) animationIV.getDrawable();</div><div class="line"> animationDrawable.start();</div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>要在代码中调用 ImageView 的 setBackgroundResource 方法，如果直接在 XML 布局文件中设置其 src 属性当触发动画时会 ForceClose ；</p>
<p>在动画 start 之前要先 stop，不然在第一次动画之后会停在最后一帧，这样动画就只会触发一次；</p>
<p>正如SDK中所提到的，不要在 onCreate 中调用 start，因为 AnimationDrawable 还没有完全跟 Window 相关联，如果想要界面显示时就开始动画的话，可以在 onWindowFoucsChanged 中调用 start 。</p>
<p>属性动画</p>
<p>属性动画指的是  通过改变view 的属性来实现动画  跟补间动画本质的区别在于 补间动画 在改变的只是样子 例如将一个Button 放大 补间动画 放大后 其点击时间 并没有变 还是原来的大小</p>
<p>具体先看这篇文章 <a href="http://blog.csdn.net/lmj623565791/article/details/38067475" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/38067475</a></p>
<p>插值器</p>
<p>Interpolator class  Resource ID 备注</p>
<ul>
<li>AccelerateDecelerateInterpolator    @android:anim/accelerate_decelerate_interpolator    加速减速</li>
<li>AccelerateInterpolator  @android:anim/accelerate_interpolator   加速</li>
<li>AnticipateInterpolator  @android:anim/anticipate_interpolator   退小步往前冲</li>
<li>AnticipateOvershootInterpolator @android:anim/anticipate_overshoot_interpolator 退小步冲过头退回</li>
<li>BounceInterpolator  @android:anim/bounce_interpolator   球落地弹动效果</li>
<li>CycleInterpolator   @android:anim/cycle_interpolator    周期重复</li>
<li>DecelerateInterpolator  @android:anim/decelerate_interpolator   减速</li>
<li>LinearInterpolator  @android:anim/linear_interpolator   匀速</li>
<li>OvershootInterpolator   @android:anim/overshoot_interpolator    冲过头再退回</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;一-帧动画介绍&quot;&gt;&lt;a href=&quot;#一-帧动画介绍&quot; class=&quot;headerlink&quot; title=&quot;一 帧动画介绍&quot;&gt;&lt;/a&gt;一 帧动画介绍&lt;/h1&gt;&lt;p&gt;帧动画 就类似于 电影那种一张图一张图的切换 &lt;/p&gt;
&lt;h2 
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="动画" scheme="https://hui46226021.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android动画 详解（一 补间动画）</title>
    <link href="https://hui46226021.github.io/2015/12/23/Android%E5%8A%A8%E7%94%BB%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%20%E8%A1%A5%E9%97%B4%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>https://hui46226021.github.io/2015/12/23/Android动画 详解（一 补间动画）/</id>
    <published>2015-12-23T11:42:33.000Z</published>
    <updated>2017-03-19T04:38:12.300Z</updated>
    
    <content type="html"><![CDATA[<pre><code>打算整理下 android动画方面的知识，嗯  开始
</code></pre><a id="more"></a>
<h2 id="一-android补间动画-分为四大类"><a href="#一-android补间动画-分为四大类" class="headerlink" title="一.android补间动画 分为四大类"></a>一.android补间动画 分为四大类</h2><p>alpha（透明度渐变）、scale（尺寸渐变）、translate（位置移动）、rotate（旋转）</p>
<p>通过JAVA类来表示 AlphaAnimation    ScaleAnimation   TranslateAnimation RotateAnimation</p>
<h2 id="二-可以通过-XML文件-或者JAVA代码的方式来实现动画"><a href="#二-可以通过-XML文件-或者JAVA代码的方式来实现动画" class="headerlink" title="二.可以通过 XML文件 或者JAVA代码的方式来实现动画"></a>二.可以通过 XML文件 或者JAVA代码的方式来实现动画</h2><h3 id="1-动过XML来实现动画"><a href="#1-动过XML来实现动画" class="headerlink" title="1.动过XML来实现动画"></a>1.动过XML来实现动画</h3><p>在res目录中新建anim文件夹<br>在anim目录中新建一个anim.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">alpha</span>/&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">scale</span>/&gt;</span>       </div><div class="line">  <span class="tag">&lt;<span class="name">translate</span>/&gt;</span>       </div><div class="line">  <span class="tag">&lt;<span class="name">rotate</span>/&gt;</span>  </div><div class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>XML动画详细解析</p>
<h3 id="alpha"><a href="#alpha" class="headerlink" title="alpha"></a>alpha</h3><p>说明: 0.0表示完全透明 1.0表示完全不透明   时间以毫秒为单位</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;   </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android" &gt;       </div><div class="line">        &lt;alpha  android:fromAlpha="0.1"   &lt;!--动画起始时透明度        --&gt;        </div><div class="line">                android:toAlpha="1.0"   &lt;!--动画结束时透明度 --&gt;               </div><div class="line">                android:duration="3000"  /&gt; &lt;!--动画持续时间--&gt; </div><div class="line"> &lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h3><p>说明: 插入器 下一篇详细说</p>
<p>pivotX  pivotY 确定了 放大缩小的中心  上面4个属性 定义了开始 和结束的比例 <1缩小>1放大</1缩小></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">&lt;scale  </div><div class="line">    android:interpolator=  "@android:anim/accelerate_decelerate_interpolator"                                         </div><div class="line">    &lt;!--interpolator 指定一个动画的插入器              --&gt;</div><div class="line">    android:fromXScale="0.0"   </div><div class="line">    &lt;!--起始时 X坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:toXScale="1.4"        </div><div class="line">    &lt;!--结束时 X坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:fromYScale="0.0" </div><div class="line">    &lt;!--起始时Y坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:toYScale="1.4"   </div><div class="line">    &lt;!--结束时Y坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:pivotX="50%"   </div><div class="line">    &lt;!--属性为动画相对于物件的X坐标的开始位置              --&gt;</div><div class="line">    android:pivotY="50%"   </div><div class="line">    &lt;!--属性为动画相对于物件的Y坐标的开始位置              --&gt;</div><div class="line">    android:fillAfter="false"   </div><div class="line">    &lt;!--当设置为true ，该动画转化在动画结束后被应用              --&gt;</div><div class="line">    android:duration="700"   </div><div class="line">    &lt;!--时间       --&gt;</div><div class="line">    /&gt;   </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>Translate</p>
<h3 id="说明：没啥说的了"><a href="#说明：没啥说的了" class="headerlink" title="说明：没啥说的了"></a>说明：没啥说的了</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;   </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">&lt;translate  </div><div class="line">    android:fromXDelta="30"   </div><div class="line">    &lt;!--始时 X坐标上的位置                   --&gt;</div><div class="line">    android:toXDelta="-80"   </div><div class="line">    &lt;!--结束时 X坐标上的位置                  --&gt;</div><div class="line">    android:fromYDelta="30"   </div><div class="line">    &lt;!--起始时 Y坐标上的位置                  --&gt;</div><div class="line">    android:toYDelta="300"   </div><div class="line">    &lt;!--结束时 Y坐标上的位置                  --&gt;</div><div class="line">    android:duration="2000"  </div><div class="line">    &lt;!--时间--&gt;</div><div class="line">    /&gt; </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>Rotate</p>
<h3 id="说明：其实也没啥好说的了"><a href="#说明：其实也没啥好说的了" class="headerlink" title="说明：其实也没啥好说的了"></a>说明：其实也没啥好说的了</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">    &lt;rotate            </div><div class="line">        android:interpolator="@android:anim/accelerate_decelerate_interpolator"         </div><div class="line">        &lt;!--动画的插入器                   --&gt;</div><div class="line">        android:fromDegrees="0"   </div><div class="line">        &lt;!--动画起始时物件的角度          --&gt;</div><div class="line">        android:toDegrees="+350"   </div><div class="line">        &lt;!--画结束时物件旋转的角度 可以大于360度          --&gt;</div><div class="line">        android:pivotX="50%"   </div><div class="line">        &lt;!--X坐标的开始位置          --&gt;</div><div class="line">        android:pivotY="50%"   </div><div class="line">        &lt;!--Y坐标的开始位置          --&gt;</div><div class="line">        android:duration="3000"      </div><div class="line">        /&gt;   </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="在JAVA-代码中调用XML"><a href="#在JAVA-代码中调用XML" class="headerlink" title="在JAVA 代码中调用XML"></a>在JAVA 代码中调用XML</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> Animation myAnimation= AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.my_action); </div><div class="line"><span class="comment">//使用AnimationUtils类的静态方法loadAnimation()来加载XML中的动画XML文件</span></div></pre></td></tr></table></figure>
<p>2 试用JAVA 代码 来创建动画</p>
<p>说明 具体参数含义 可对照上面的XML<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在代码中定义 动画实例对象</span></div><div class="line"><span class="keyword">private</span> Animation myAnimation_Alpha;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Scale;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Translate;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Rotate;</div><div class="line"></div><div class="line"><span class="comment">//根据各自的构造方法来初始化一个实例对象</span></div><div class="line">myAnimation_Alpha = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.1f</span>, <span class="number">1.0f</span>);</div><div class="line"></div><div class="line">myAnimation_Scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.0f</span>, <span class="number">1.4f</span>, <span class="number">0.0f</span>, <span class="number">1.4f</span>,</div><div class="line">Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div><div class="line"></div><div class="line">myAnimation_Translate = <span class="keyword">new</span> TranslateAnimation(<span class="number">30.0f</span>, -<span class="number">80.0f</span>, <span class="number">30.0f</span>, <span class="number">300.0f</span>);</div><div class="line"></div><div class="line">myAnimation_Rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, +<span class="number">350.0f</span>,</div><div class="line">Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div><div class="line">设置动画监听，注意 当控件移动后  其点击事件 还在原来的未知 需要调用view.layout(x,x,x,x);方法修改下 控件的未知</div><div class="line"></div><div class="line">animation.setAnimationListener(<span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">              </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">最后 就查给控件添加上 创建好的动画 并启动了</div><div class="line"></div><div class="line">view.startAnimation(animation);</div></pre></td></tr></table></figure></p>
<h1 id="谢谢"><a href="#谢谢" class="headerlink" title="谢谢"></a>谢谢</h1>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;打算整理下 android动画方面的知识，嗯  开始
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/Android/JAVA/"/>
    
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="动画" scheme="https://hui46226021.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
