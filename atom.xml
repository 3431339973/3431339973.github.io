<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独角兽之路</title>
  <subtitle>到了汉堡，我们每天必须演足8小时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hui46226021.github.io/"/>
  <updated>2017-10-01T12:50:27.948Z</updated>
  <id>https://hui46226021.github.io/</id>
  
  <author>
    <name>Harlan Zhush</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android表单映射框架 SHFormLayout 快速生成表单布局</title>
    <link href="https://hui46226021.github.io/2017/03/17/ShFormLayout/"/>
    <id>https://hui46226021.github.io/2017/03/17/ShFormLayout/</id>
    <published>2017-03-17T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:27.948Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架<br><a id="more"></a></p>
<h1 id="ShFormUtils"><a href="#ShFormUtils" class="headerlink" title="ShFormUtils"></a>ShFormUtils</h1><h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shform:3.2.2'</span></div></pre></td></tr></table></figure></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="表单对象映射"><a href="#表单对象映射" class="headerlink" title="表单对象映射"></a>表单对象映射</h2><ul>
<li>1.页面实现 FormCheckInterface 接口   改接口 是页面表单检查的回调 下面有介绍</li>
<li><p>2.开启表单注入 FormInit.injection(this);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      nameEdit = (EditText) findViewById(R.id.name);</div><div class="line">      phoneEdit = (EditText) findViewById(R.id.phone);</div><div class="line">      professionEdit = (EditText) findViewById(R.id.profession);</div><div class="line">      spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">      married = (CheckBox) findViewById(R.id.married);</div><div class="line">      party = (CheckBox) findViewById(R.id.party);</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * 初始化表单注入  要在 所有控件初始化成功后 调用</div><div class="line">       */</div><div class="line">      FormInit.injection(<span class="keyword">this</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>3.在 onDestroy 里 注销 表单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 注销表单</div><div class="line"> */</div><div class="line">FormInit.deleteInjection(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>4.通过 @FormInjection 绑定控件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * name 对应 实体类 字段名</div><div class="line"> * message 参数为空的时候 默认提示 的字符串</div><div class="line"> * isNull  该字段是否可以为空  默认 false</div><div class="line"> */</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"name"</span>, message = <span class="string">"名字"</span>,isNull = <span class="keyword">true</span>)</div><div class="line">  EditText nameEdit;</div><div class="line">  <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line">  EditText phoneEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line">  EditText professionEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"workingLife"</span>, message = <span class="string">"工作时间"</span>)</div><div class="line">  Spinner spinner;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"married"</span>)</div><div class="line">  CheckBox married;</div></pre></td></tr></table></figure>
</li>
<li><p>4.调用映射方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 表单自动生成对象</div><div class="line">  */</div><div class="line"> UserModel userModel = FormUtls.formToObjectAndCheck(<span class="keyword">this</span>,UserModel.class);</div><div class="line"><span class="comment">/**</span></div><div class="line">  * 实体对象 映射到表单 返回true 表示映射成功</div><div class="line">  */</div><div class="line"> FormUtls.objectToForm(<span class="keyword">this</span>,userModel);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="表单参数检查"><a href="#表单参数检查" class="headerlink" title="表单参数检查"></a>表单参数检查</h2><pre><code>* 1.使用 @FormCheck
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//type 是 验证类型枚举   默认 是自定义验证</span></div><div class="line"> <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line"> EditText phoneEdit;</div><div class="line"> <span class="meta">@FormCheck</span></div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line"> EditText professionEdit;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 通过 实现 FormCheckInterface 接口的 formCheck</div><div class="line">      * 自定定义 表单检查 默认要返回true</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@return</span></div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">formCheck</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">         <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">             <span class="keyword">case</span> R.id.profession:</div><div class="line">                 <span class="keyword">if</span>(!(professionEdit.getText()+<span class="string">""</span>).contains(<span class="string">"-"</span>))&#123;</div><div class="line">                     Toast.makeText(<span class="keyword">this</span>,<span class="string">"职业格式不正确"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 表单检查 不合法回调</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@param</span> message</div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formCheckNullCall</span><span class="params">(View v, String message)</span> </span>&#123;</div><div class="line">         Toast.makeText(<span class="keyword">this</span>,message,Toast.LENGTH_SHORT).show();</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h4 id="验证类型"><a href="#验证类型" class="headerlink" title="验证类型"></a>验证类型</h4><pre><code>CUSTOM,//自定义
PHONE,//手机号
EMAIL,//邮箱
CHINESE,//中文
IDCARD,//身份证
ISDATA,//“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年
AMOUNT_MONEY,//金额校验，精确到2位小数
AMOUNT,//存数字
URL,//Url
PASSWORD;//密码强度 是不是6至12位字母组合
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>    
<h2 id="快速生成表单布局-ShFormLayout"><a href="#快速生成表单布局-ShFormLayout" class="headerlink" title="快速生成表单布局 ShFormLayout"></a>快速生成表单布局 ShFormLayout</h2><p>ShFormLayout 可以在使用 系统控件的基础上 实现快速生成表单布局 样式</p>
<p><img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/3.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;com.sh.zsh.code.layout.ShFormLayout</div><div class="line">  &lt;!--该布局 需要在这确定 每行的高度 --&gt;</div><div class="line">              app:less_form_row_height="50dp"</div><div class="line">             android:layout_width="match_parent"</div><div class="line">             android:layout_height="wrap_content"&gt;</div><div class="line">             &lt;TextView</div><div class="line">                 &lt;!--这里表明 这个控件 只是用于显示标题--&gt;</div><div class="line">                 app:less_form_group_titel="true"</div><div class="line">                 android:text="基本信息"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="wrap_content" /&gt;</div><div class="line">             &lt;EditText</div><div class="line">                 &lt;!--该行的标题--&gt;</div><div class="line">                 app:less_form_title="姓名"</div><div class="line">                 &lt;!--该行对应的字段名--&gt;</div><div class="line">                 app:less_form_name="name"</div><div class="line">                 &lt;!--该行是否必填--&gt;</div><div class="line">                 app:less_form_must="true"</div><div class="line">                  android:layout_height="wrap_content"</div><div class="line">                  android:layout_width="match_parent"</div><div class="line">                /&gt;</div><div class="line"></div><div class="line">             &lt;EditText</div><div class="line">                 app:less_form_title="电话"</div><div class="line">                 &lt;!--该行的验证方式--&gt;</div><div class="line">                 app:less_form_check_type="phone"</div><div class="line">                 app:less_form_name="phone"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true"</div><div class="line">                 /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/company"</div><div class="line">                 app:less_form_title="公司"</div><div class="line">                 app:less_form_name="company"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/department"</div><div class="line">                 app:less_form_title="部门"</div><div class="line">                 app:less_form_name="department"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormTimeView</div><div class="line">                 app:less_form_title="出生日期"</div><div class="line">                 app:less_form_name="birthday"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;CheckBox</div><div class="line">                 app:less_form_title="男性："</div><div class="line">                 app:less_form_name="sex"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;LinearLayout</div><div class="line">                 app:less_form_group_top_layout="true"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="150dp"</div><div class="line">                 android:background="@color/white"</div><div class="line">                 android:orientation="horizontal"&gt;</div><div class="line">                 &lt;TextView</div><div class="line">                     android:layout_width="wrap_content"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="18dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:text="签名" /&gt;</div><div class="line"></div><div class="line">                 &lt;EditText</div><div class="line">                     android:id="@+id/sign"</div><div class="line">                     android:gravity="top"</div><div class="line">                     android:layout_width="match_parent"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="16dp"</div><div class="line">                     android:padding="5dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:background="@drawable/bg_text_factoryaudit"</div><div class="line">                     android:hint="多行输入" /&gt;</div><div class="line">             &lt;/LinearLayout&gt;</div><div class="line">         &lt;/com.sh.zsh.code.layout.ShFormLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>快看，你不需要去关心 每一行的样式，高度 只需要确定这一行是 TextView  或是EditText 等控件  就可以了<br>我们来看一下  框架都提供了 哪些表单属性 供我们使用</p>
<ul>
<li>ShFormLayout  <br><br>less_form_row_height  表单每行的 高度</li>
<li>内部控件<br><br>less_form_title   名称<br><br>less_form_title_image  设置名称左侧的icon<br><br>less_form_can_click    该行是否显示 右侧箭头<br><br>less_form_must         该字段是否必填<br><br>less_form_name        该字段对应实体类的字段名称<br><br>less_form_is_null     该字段是否可以为空<br><br>less_form_bottomLine  该行是否显示底部横线<br>less_form_check_type  检查类型<br>less_form_group_titel 该组表单的标题 （上面的例子里 基本信息 那一行）<br>less_form_group_top_layout  改控件不 参与表单映射 和布局生成（上面的例子里签名 那个布局）</li>
<li>FormTimeView  时间控件<br><br>less_time_is_time  时间控件的格式（all，year_month_day，hours_mins，month_day_hour_min，year_month）<br></li>
<li>FormSpinner  选择器  用法参考Demo<br><br>less_form_spi_sel 默认选中第一项</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShFormUtils" target="_blank" rel="external">https://github.com/hui46226021/ShFormUtils</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Form" scheme="https://hui46226021.github.io/tags/Form/"/>
    
      <category term="框架" scheme="https://hui46226021.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="表单映射" scheme="https://hui46226021.github.io/tags/%E8%A1%A8%E5%8D%95%E6%98%A0%E5%B0%84/"/>
    
      <category term="自定义View" scheme="https://hui46226021.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoDemo android 适配录制，压缩</title>
    <link href="https://hui46226021.github.io/2017/02/18/ShVideoDemo%20android%20%E9%80%82%E9%85%8D%E5%BD%95%E5%88%B6%EF%BC%8C%E5%8E%8B%E7%BC%A9/"/>
    <id>https://hui46226021.github.io/2017/02/18/ShVideoDemo android 适配录制，压缩/</id>
    <published>2017-02-18T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:37.769Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）<br><a id="more"></a></p>
<h1 id="ShVideoDemo"><a href="#ShVideoDemo" class="headerlink" title="ShVideoDemo"></a>ShVideoDemo</h1><p>Android 视频录制Demo 防微信小视频 视频压缩（FFmpeg）</p>
<p>#Download</p>
<p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.shvideo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideolibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.shvideo:shvideolibrary:1.0.3'</span></div></pre></td></tr></table></figure></p>
<font color="#ff0022ff" size="7" face="黑体">注意:targetSdkVersion 23 及以上 要注意 6.0运行时权限 或干脆用23以下</font>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShVideoDemo/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoDemo" target="_blank" rel="external">https://github.com/hui46226021/ShVideoDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频压缩" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="视频录制" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程</title>
    <link href="https://hui46226021.github.io/2017/01/21/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://hui46226021.github.io/2017/01/21/Android系统启动流程/</id>
    <published>2017-01-21T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:29.039Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:梳理一下android系统的启动流程，从init进程 到java层面<br><a id="more"></a></p>
<p>init是一个进程，做完android系统启动的第一个进程，同时也是linux内核启动的第一个进程，init进程在启动过程中起到了重要的责任。</p>
<h2 id="init进程的工作"><a href="#init进程的工作" class="headerlink" title="init进程的工作"></a>init进程的工作</h2><ul>
<li>1.解析配置文件<br>  在init进程中会解析两个配置文件，一个是init.rc, 另一个是 与硬件平台相关的 配置</li>
<li>2.解析Service</li>
<li>3.启动zygote</li>
</ul>
<h2 id="关于-zygote"><a href="#关于-zygote" class="headerlink" title="关于 zygote"></a>关于 zygote</h2><p>zygote本身是个Native程序。原名app_process  ,该名字 在Android.mk中指定，运行在 该进程又将自己的 名字改成zygote，<br>zygote 启动AppRuntime.<br>在AppRuntime 中主要完成了3步</p>
<ul>
<li>1.创建虚拟机 startVm</li>
<li>2.注册JNI函数 startReg</li>
<li>3.调用com.android.internal.os.Zygotelnit的main函数，正式让系统进入了java语言的世界</li>
</ul>
<h2 id="在Zygotelnit-的main函数中"><a href="#在Zygotelnit-的main函数中" class="headerlink" title="在Zygotelnit 的main函数中"></a>在Zygotelnit 的main函数中</h2><ul>
<li>1.建立IPC通信服务端 </li>
<li>2.调用registerZygoteSocket ,通过这个函数他可以相应子孙后代的请求，预加载类和资源（预加载相当多的类 1000多个 想想 android启动为啥慢）</li>
<li>3.启动system_server  分裂出一个子进程（承担一部分责任，建立与Binder的链接，调用init1 和inti2来启动一些系统服务）</li>
<li>4.zygote完成创世纪调用下runSelectLoopMode 便睡了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:梳理一下android系统的启动流程，从init进程 到java层面&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://hui46226021.github.io/tags/Android/"/>
    
      <category term="系统" scheme="https://hui46226021.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2.0 - 网络请求库 注解 详解</title>
    <link href="https://hui46226021.github.io/2017/01/01/Retrofit2.0/"/>
    <id>https://hui46226021.github.io/2017/01/01/Retrofit2.0/</id>
    <published>2017-01-01T04:32:21.000Z</published>
    <updated>2017-10-01T12:50:24.642Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit基于注解和动态代理，优化了Android中的网络请求操作。<br><a id="more"></a></p>
<h1 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h1><h2 id="这篇笔记基于Retrofit-1-9。"><a href="#这篇笔记基于Retrofit-1-9。" class="headerlink" title="这篇笔记基于Retrofit 1.9。"></a>这篇笔记基于Retrofit 1.9。</h2><p><img src="https://static.oschina.net/uploads/img/201701/19105443_jXYF.png" alt=""></p>
<p>从上图可见，对Retrofit的使用可以分成三部分：</p>
<ul>
<li>1.建立POJO或者Model Class<br>服务端返回给客户端的数据一般都是JSON格式，所以可以利用GSON或其他库把JSON直接转换成一个对象。POJO或这个Model Class就是这个对象的类。</li>
<li>2.定义REST API Interface<br>定义一个Interface，声明我们需要的网络请求方法。<br>例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">       <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line">       <span class="function">List&lt;Repo&gt; <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Repo，就是第一步中定义的POJO或者Model Class。Retrofit框架会自动把服务端返回的JSON数据，转换成Repo。Retrofit默认采用GSON库。</p>
<ul>
<li>3.RestAdapter<br>RestAdapter用来配置网络请求的参数，并且生成一个接口的实现。<br>配置请求参数：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">             .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">             .setClient(<span class="keyword">new</span> OkClient(<span class="keyword">new</span> OkHttpClient()))</div><div class="line">             .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生成接口的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHubService service = restAdapter.create(GitHubService.class);</div></pre></td></tr></table></figure></p>
<p>以上三步完成后，调用接口函数完成与服务器的交互：</p>
<p>List<repo> repos = service.listRepos(“octocat”);</repo></p>
<p>请求方法</p>
<p>Retrofit框架提供了很多注解，其中HTTP注解有五个，用来修饰请求方法（还可以顺便处理URL路径）：</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>HEAD<br>这五个注解正好涵盖了数据的增删改查方法，符合REST标准。每一个请求方法都必须要由这五个注解中的一个修饰。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以在注解中添加查询参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list?sort=desc"</span>)</div></pre></td></tr></table></figure></p>
<p>URL处理</p>
<ul>
<li><p>@Path - 替换参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@Query - 添加查询参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @<span class="title">Query</span><span class="params">(<span class="string">"sort"</span>)</span> String sort)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@QueryMap - 如果有多个查询参数，把它们放在Map中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @QueryMap Map&lt;String, String&gt; options)</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h2><p>请求体（RequestBody），一般用于POST方法传递请求参数。<br>@Body<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/users/new"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@Body User user, Call&lt;User&gt; call)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数会被指定的转换器转换成字符串或字节流提交到服务器，如果没有指定转换器，Retrofit将会默认使用RequestBody。</p>
<h2 id="FORM-ENCODED-表单-And-MULTIPART"><a href="#FORM-ENCODED-表单-And-MULTIPART" class="headerlink" title="FORM ENCODED(表单) And MULTIPART"></a>FORM ENCODED(表单) And MULTIPART</h2><ul>
<li>FORM ENCODED</li>
</ul>
<p>使用 @FormUrlEncoded 修饰请求方法，可以把表单数据提交到服务端。<br>用 @Field 修饰key-value对。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"/user/edit"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Field(<span class="string">"first_name"</span>)</span> String first, @<span class="title">Field</span><span class="params">(<span class="string">"last_name"</span>)</span> String last)</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>MULTIPART</li>
</ul>
<p>使用 @Multipart 修饰请求方法，@Part 修饰每一个Part<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@PUT</span>(<span class="string">"/user/photo"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Part(<span class="string">"photo"</span>)</span> TypedFile photo, @<span class="title">Part</span><span class="params">(<span class="string">"description"</span>)</span> TypedString description)</span>;</div></pre></td></tr></table></figure></p>
<p>Multipart 中的Part使用 RestAdapter 的转换器来转换，也可以实现 TypedOutput 自己处理序列化。</p>
<p>Multipart主要用来上传文件吗？如果是，具体操作又是如何？ 答案在这里</p>
<h2 id="配制HEADER"><a href="#配制HEADER" class="headerlink" title="配制HEADER"></a>配制HEADER</h2><p>用 @Headers 设置Http请求的header。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/widget/list"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">widgetList</span><span class="params">(Call&lt;List&lt;Widget&gt;&gt; call)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Headers</span>(&#123;</div><div class="line">    <span class="string">"Accept: application/vnd.github.v3.full+json"</span>,</div><div class="line">    <span class="string">"User-Agent: Retrofit-Sample-App"</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;username&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Path(<span class="string">"username"</span>)</span> String username, Call&lt;User&gt;)</span>;</div></pre></td></tr></table></figure></p>
<p>Http请求头不会互相覆盖，如果存在多个请求头的名字相同，那么它们全部都会被包含在Http请求中。</p>
<h2 id="动态更新HEADER"><a href="#动态更新HEADER" class="headerlink" title="动态更新HEADER"></a>动态更新HEADER</h2><ul>
<li>在请求方法的参数中，用 @Header 动态更新Http请求头<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Header(<span class="string">"Authorization"</span>)</span> String authorization, Call&lt;User&gt; call)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数不能为null，否则这个header将会被删掉。</p>
<ul>
<li>在RestAdapter中，利用RequestInterceptor动态更新Header<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RequestInterceptor requestInterceptor = <span class="keyword">new</span> RequestInterceptor() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intercept</span><span class="params">(RequestFacade request)</span> </span>&#123;</div><div class="line">      request.addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Retrofit-Sample-App"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">  .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">  .setRequestInterceptor(requestInterceptor)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>每个请求方法都可以定义成同步或者异步。</p>
<ul>
<li>同步</li>
</ul>
<p>同步方法有返回值，且参数中不包含回调<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line">~~</div><div class="line">* 异步</div><div class="line"></div><div class="line">异步方法没有返回值，且最后一个参数须是Callback对象</div><div class="line">~~~java</div><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div><div class="line">~~</div><div class="line">在Android中，callbacks将会在主线程中调用。在普通Java程序中，callbacks将会在执行HTTP请求方法的那个线程中调用。</div><div class="line"></div><div class="line">## 处理服务器返回结果</div><div class="line"></div><div class="line">RestAdapter中的转换器会把服务器的返回结果（一般为JSON）转换成我们在函数返回值或Callback接口中定义的Java对象。</div><div class="line">~~~java</div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line"></div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div></pre></td></tr></table></figure></p>
<p>List<repo>,就是将要被转换成的Java对象。</repo></p>
<h2 id="直接获取返回体"><a href="#直接获取返回体" class="headerlink" title="直接获取返回体"></a>直接获取返回体</h2><p>如果要直接获取服务器返回的HTTP返回体，在返回值或callback中直接使用 Response对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function">Response <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line"></div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user, Callback&lt;Response&gt; call)</span>;</div></pre></td></tr></table></figure></p>
<p>参考链接:</p>
<p>官方文档：<a href="square.github.io/retrofit/">不过是Retrofit2.0</a><br>中文文档：<a href="blog.chengyunfeng.com/?p=491&amp;utm_source=tuicool&amp;utm_medium=referral">这个是Retrofit1.9</a><br>源码解析：[<a href="http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/" target="_blank" rel="external">http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/</a></p>
<h2 id="原文地址：http-www-jianshu-com-p-63723f593695"><a href="#原文地址：http-www-jianshu-com-p-63723f593695" class="headerlink" title="原文地址：http://www.jianshu.com/p/63723f593695"></a>原文地址：<a href="http://www.jianshu.com/p/63723f593695" target="_blank" rel="external">http://www.jianshu.com/p/63723f593695</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit基于注解和动态代理，优化了Android中的网络请求操作。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Retrofit2.0" scheme="https://hui46226021.github.io/tags/Retrofit2-0/"/>
    
      <category term="网络访问" scheme="https://hui46226021.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android Library项目发布到JCenter最简单的配置方法</title>
    <link href="https://hui46226021.github.io/2016/12/22/JCenter/"/>
    <id>https://hui46226021.github.io/2016/12/22/JCenter/</id>
    <published>2016-12-22T04:32:21.000Z</published>
    <updated>2017-10-01T12:49:44.526Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便 需要把jar发布到Maven服务器<br>网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter</p>
<p>先看一下上传过程图解<br><a id="more"></a></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-注册Bintray账号-传送门-https-bintray-com"><a href="#1-注册Bintray账号-传送门-https-bintray-com" class="headerlink" title="1. 注册Bintray账号 ([传送门(https://bintray.com))"></a>1. 注册Bintray账号 ([传送门(<a href="https://bintray.com" target="_blank" rel="external">https://bintray.com</a>))</h2><p>Bintray是jcenter的托管商，因此你必须注册一个Bintray账号，注册完账号后记下你的用户名以及API Key。</p>
<p>登陆后在首页右上角点击用户名进入个人主页，然后点击用户名下面的Edit进入个人信息编辑页面，接下来点击页面左边列表的最后一项API Key</p>
<p>如图所示点击最右边箭头指示的复制按钮即可复制你的API Key</p>
<h1 id="注册得时候要注意-这里有两个坑"><a href="#注册得时候要注意-这里有两个坑" class="headerlink" title="注册得时候要注意   这里有两个坑"></a>注册得时候要注意   这里有两个坑</h1><p>有两个注册 入口  要选上面得那个  否者最后会创建不了项目  报HTTP/1.1 404 Not Found  得错误</p>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_oamt.jpg" alt=""></p>
<ul>
<li>1 注册时，不少邮箱地址还不支持，要注意。 </li>
<li>2 创建仓库时，如果使用Bintray-release,名字就填成maven,因为他的wiki:repoName: The repository name. Set to ‘maven’ by default.(有错误请指出)</li>
</ul>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_dHJe.jpg" alt=""><br>这里写图片描述</p>
<p>Finally，坑了我一天之后，终于BUILD SUCCESSFUL了</p>
<ul>
<li><ol>
<li>检查Android插件版本</li>
</ol>
</li>
</ul>
<p>首先你要检查你的Android插件的版本，因为1.1.0版本有一个BUG会导致生成javadoc失败，所以你只需升级到最新即可。目前最新版本是1.3.0，在项目根目录下的build.gradle文件中修改版本号即可，如下:</p>
<p>复制代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你在看到这篇文章的时候有更新的版本的话，直接改为最新的版本即可。</p>
<ul>
<li><ol>
<li>添加所需插件</li>
</ol>
</li>
</ul>
<p>在项目根目录下build.gradle文件中的dependencies节点中追加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div></pre></td></tr></table></figure></p>
<p>android-maven-gradle-plugin插件是用来打包Maven所需文件的</p>
<p>gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的</p>
<p>完成后如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">        classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置项目信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/project.properties" target="_blank" rel="external">project.properties</a>文件并放到你的library module目录下</p>
<p>project.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=</div><div class="line">project.groupId=</div><div class="line">project.artifactId=</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=</div><div class="line">project.gitUrl=</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>project.name：项目名称</li>
<li>project.groupId：项目组ID，通常情况下如果你的包名为com.example.test，那么项目组ID就是com.example</li>
<li>project.artifactId：项目ID，通常情况下如果你的包名为com.example.test，那么项目ID就是test</li>
<li>project.packaging：包类型，Android库是aar</li>
<li>project.siteUrl：项目官方网站的地址，没有的话就用Github上的地址，例如：<a href="https://github.com/xiaopansky/Sketch" target="_blank" rel="external">https://github.com/xiaopansky/Sketch</a></li>
<li>project.gitUrl：项目的Git地址，例如：<a href="https://github.com/xiaopansky/Sketch.git" target="_blank" rel="external">https://github.com/xiaopansky/Sketch.git</a></li>
<li>javadoc.name：生成的javadoc打开后主页显示的名称，通常跟项目名称一样即可<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=Sketch</div><div class="line">project.groupId=me.xiaopan</div><div class="line">project.artifactId=sketch</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=https://github.com/xiaopansky/Sketch</div><div class="line">project.gitUrl=https://github.com/xiaopansky/Sketch.git</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=Sketch</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置Bintray账号以及开发者信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/local.properties" target="_blank" rel="external">local.properties</a>文件并放到你的library module目录下</p>
<p>local.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#bintray</div><div class="line">bintray.user=</div><div class="line">bintray.apikey=</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=</div><div class="line">developer.name=</div><div class="line">developer.email=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>bintray.user：你的Bintray的用户名</li>
<li>bintray.apikey：你的的Bintray的API Key</li>
<li>developer.id：通常是你在开源社区的昵称</li>
<li>developer.name：你的姓名</li>
<li>developer.email：你的邮箱<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#bintray</div><div class="line">bintray.user=xiaopansky</div><div class="line">bintray.apikey=*****************************</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=xiaopan</div><div class="line">developer.name=********</div><div class="line">developer.email=sky@xiaopan.me</div></pre></td></tr></table></figure>
<p>*号显示的为个人信息不反方便透露，还请见谅</p>
<h2 id="注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"><a href="#注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息" class="headerlink" title="注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"></a>注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息</h2><ul>
<li><ol>
<li>配置bintrayUpload.gradle</li>
</ol>
</li>
</ul>
<p>方法1：直接使用远程bintrayUpload.gradle文件</p>
<p>修改你的library module的build.gradle文件，在最后加上apply from: “<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：" target="_blank" rel="external">https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "https:<span class="comment">//raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle"</span></div></pre></td></tr></table></figure>
<p>方法2：下载后使用本地bintrayUpload.gradle文件</p>
<p>首先下载bintrayUpload.gradle文件并放到你的library module目录下</p>
<p>然后修改你的library module的build.gradle文件，在最后加上apply from: “bintrayUpload.gradle”，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "bintrayUpload.gradle"</div></pre></td></tr></table></figure>
<p>推荐大家使用第一种方案，简单快捷，至此配置工作已全部结束</p>
<ul>
<li><ol>
<li>执行命令打包并上传到Bintray</li>
</ol>
</li>
</ul>
<p>打开终端进入项目目录下，</p>
<p>执行 gradlew install 先编译一下</p>
<p>再执行gradlew bintrayUpload命令即可</p>
<p>另外，如果你的本地已经配置了Gradle了，那么执行gradle bintrayUpload命令也可以。gradlew是Gradle的一层封装，如果你本地没有安装Gradle gradlew就会自动下载Gradle</p>
<ul>
<li><ol>
<li>请求提交你的项目到jcenter</li>
</ol>
</li>
</ul>
<p>前面所有步骤走完之后实际上只是上传了你的项目到Bintray而已，并没有被包含在jcenter中，要想提交到jcenter中还需要Bintray的审核。</p>
<p>登入Bintray网站，进入个人中心，在右侧的Owned Repositories区域点击Maven的图标，进入你的Maven项目列表。</p>
<p>如果已经上传成功了，在这里就能看到你的项目，进入项目详情，在右下角的Linked To区域点击Add to JCenter，然后在Comments输入框里随便填写下信息，最后点Send提交请求即可</p>
<p>一般情况下审核需要4到5个小时，耐心等待就行了，审核通过后会给你发邮件通知你，并且以后更新项目就不需要再审核了。</p>
<ul>
<li><ol>
<li>一句话导入你的项目</li>
</ol>
</li>
</ul>
<p>当审核通过后，别人就可以一句话导入你的项目了，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'me.xiaopan:sketch:2.0.0'</span></div></pre></td></tr></table></figure></p>
<ul>
<li><ol>
<li>额外补充：</li>
</ol>
</li>
</ul>
<p>保持你的library module的名字同artifactId一样</p>
<p>因为在Bintray上你的项目的maven-metadata.xml文件的路径是gruopId+”/“+module名称。</p>
<p>例如你的groupId是com.example，artifactId是test，但module名称是library。</p>
<p>这时候项目文件是在com.example.test目录下的，但maven-metadata.xml文件却是在com.example.library目录下的。</p>
<p>这样一来如果你有多个项目groupId一样，artifactId不一样，但module名称都是library的话，可能就会冲突。</p>
<p>目前为止我还没有找到更好的解决办法，就只能让module名称和artifactId保持一致，如果你们谁有更好的办法，欢迎留言交流。</p>
<ul>
<li><ol>
<li>参考文章</li>
</ol>
</li>
</ul>
<p><a href="http://www.cnblogs.com/qianxudetianxia/p/4322331.html" target="_blank" rel="external">Android拓展系列(12)–使用Gradle发布aar项目到JCenter仓库</a><br><a href="http://blog.csdn.net/maosidiaoxian/article/details/43148643" target="_blank" rel="external">使用Gradle发布Android开源项目到JCenter</a><br><a href="http://www.jianshu.com/p/c721f9297b2f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">Android 项目打包到 JCenter 的坑</a></p>
<ul>
<li><ol>
<li>常见问题</li>
</ol>
</li>
</ul>
<p>Error:Cause: org/gradle/api/publication/maven/internal/DefaultMavenFactory：当你使用的Gradle版本是2.4以上，Android插件版本是1.3.0以上的时候就会出现这个问题，这时候你只需将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可<br>You are using JDK version ‘java version “1.7.0_71”’. Some versions of JDK 1.7 (e.g. 1.7.0_10) may cause class loading errors in Gradle.Please update to a newer version (e.g. 1.7.0_67)：当你使用的Gradle版本是2.4以上，Andriod插件版本是1.2.3的时候就会出现这个问题，同样的你只需要将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可</p>
<p>以上文章转载：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>关于jcenter和Maven Central的理解和gradle是如何从仓库上获取一个library</p>
<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。</p>
<h2 id="Android-studio-是从哪里得到库的？"><a href="#Android-studio-是从哪里得到库的？" class="headerlink" title="Android studio 是从哪里得到库的？"></a>Android studio 是从哪里得到库的？</h2><p>先从这个简单的问题开始，我相信不是每个人都完全明白Android studio 是从哪里得到这些library的。莫非就是Android studio 从google搜索然后下载了一个合适的给我们？</p>
<p>呵 呵，没那么复杂。Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务 器：jcenter 和  Maven Central。</p>
<h2 id="jcenter"><a href="#jcenter" class="headerlink" title="jcenter"></a>jcenter</h2><p>jcenter是一个由 bintray.com维护的Maven仓库 。你可以在<a href="http://jcenter.bintray.com/" target="_blank" rel="external">这里</a>看到整个仓库的内容。</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用jcenter了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Maven-Central"><a href="#Maven-Central" class="headerlink" title="Maven Central"></a>Maven Central</h2><p>Maven Central 则是由sonatype.org维护的Maven仓库。你可以在<a href="https://oss.sonatype.org/content/repositories/releases/" target="_blank" rel="external">这里</a>看到整个仓库。</p>
<p>注：不管是jcenter还是Maven Central ，两者都是Maven仓库</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用Maven Central了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，虽然jcenter和Maven Central 都是标准的 android library仓库，但是它们维护在完全不同的服务器上，由不同的人提供内容，两者之间毫无关系。在jcenter上有的可能 Maven Central 上没有，反之亦然。</p>
<p>除了两个标准的服务器之外，如果我们使用的library的作者是把该library放在自己的服务器上，我们还可以自己定义特有的Maven仓库服务器。Twitter的Fabric.io 就是这种情况，它们在<a href="https://maven.fabric.io/" target="_blank" rel="external">https://maven.fabric.io/</a>public上维护了一个自己的Maven仓库。如果你想使用Fabric.io的library，你必须自己如下定义仓库的url。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123; url <span class="string">'https://maven.fabric.io/public'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在里面使用相同的方法获取一个library。</p>
<p>dependencies {<br>    compile ‘com.crashlytics.sdk.android:crashlytics:2.2.4@aar’<br>}<br>但是将library上传到标准的服务器与自建服务器，哪种方法更好呢？当然是前者。如果将我们的library公开，其他开发者除了一行定义依赖名的代码之外不需要定义任何东西。因此这篇文章中，我们将只关注对开发者更友好的jcenter 和 Maven Central 。</p>
<p>实际上可以在Android Studio上使用的除了Maven 仓库之外还有另外一种仓库：Ivy 仓库 。但是根据我的经验来看，我还没看到任何人用过它，包括我，因此本文就直接忽略了。</p>
<h2 id="理解jcenter和Maven-Central"><a href="#理解jcenter和Maven-Central" class="headerlink" title="理解jcenter和Maven Central"></a>理解jcenter和Maven Central</h2><p>为何有两个标准的仓库？</p>
<p>事实上两个仓库都具有相同的使命：提供Java或者Android library服务。上传到哪个（或者都上传）取决于开发者。</p>
<p>起初，Android Studio 选择Maven Central作为默认仓库。如果你使用老版本的Android Studio创建一个新项目，mavenCentral()会自动的定义在build.gradle中。</p>
<p>但 是Maven Central的最大问题是对开发者不够友好。上传library异常困难。上传上去的开发者都是某种程度的极客。同时还因为诸如安全方面的其他原 因，Android Studio团队决定把默认的仓库替换成jcenter。正如你看到的，一旦使用最新版本的Android Studio创建一个项目，jcenter()自动被定义，而不是mavenCentral()。</p>
<p>有许多将Maven Central替换成jcenter的理由，下面是几个主要的原因。</p>
<ul>
<li><p>jcenter通过CDN发送library，开发者可以享受到更快的下载体验。</p>
</li>
<li><p>jcenter是全世界最大的Java仓库，因此在Maven Central 上有的，在jcenter上也极有可能有。换句话说jcenter是Maven Central的超集。</p>
</li>
<li><p>上传library到仓库很简单，不需要像在 Maven Central上做很多复杂的事情。</p>
</li>
<li><p>友好的用户界面</p>
</li>
<li><p>如果你想把library上传到 Maven Central ，你可以在bintray网站上直接点击一个按钮就能实现。</p>
</li>
</ul>
<p>基于上面的原因以及我自己的经验，可以说替换到jcenter是明智之举。</p>
<p>所以我们这篇文章将把重心放在jcenter，反正如果你能成功把library放在jcenter，转到 Maven Central 是非常容易的事情。</p>
<h2 id="gradle是如何从仓库上获取一个library的？"><a href="#gradle是如何从仓库上获取一个library的？" class="headerlink" title="gradle是如何从仓库上获取一个library的？"></a>gradle是如何从仓库上获取一个library的？</h2><p>在讨论如何上传library到jcenter之前，我们先看看gradle是如何从仓库获取library的。比如我们在 build.gradle输入如下代码的时候，这些库是如果奇迹般下载到我们的项目中的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div></pre></td></tr></table></figure></p>
<p>一般来说，我们需要知道library的字符串形式，包含3部分</p>
<p>GROUP_ID:ARTIFACT_ID:VERSION<br>上面的例子中，GROUP_ID是com.inthecheesefactory.thecheeselibrary ，ARTIFACT_ID是fb-like，VERSION是0.9.3。</p>
<p>GROUP_ID 定义了library的group。有可能在同样的上下文中存在多个不同功能的library。如果library具有相同的group，那么它们将共享 一个GROUP_ID。通常我们以开发者包名紧跟着library的group名称来命名，比如com.squareup.picasso。然后 ARTIFACT_ID中是library的真实名称。至于VERSION，就是版本号而已，虽然可以是任意文字，但是我建议设置为x.y.z的形式，如 果喜欢还可以加上beta这样的后缀。</p>
<p>下面是Square library的一个例子。你可以看到每个都可以很容易的分辨出library和开发者的名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.squareup:otto:1.3.7'</span></div><div class="line">  compile <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></div><div class="line">  compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div><div class="line">  compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么在添加了上面的依赖之后会发生什么呢？简单。Gradle会询问Maven仓库服务器这个library是否存在，如果是，gradle会获得 请求library的路径，一般这个路径都是这样的形式：GROUP_ID/ARTIFACT_ID/VERSION_ID。比如可以在<a href="http://jcenter.bintray.com/com/squareup/otto/1.3.7" target="_blank" rel="external">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a> 和  <a href="https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/" target="_blank" rel="external">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a></p>
<p>下获得com.squareup:otto:1.3.7的library文件。</p>
<p>然后Android Studio 将下载这些文件到我们的电脑上，与我们的项目一起编译。整个过程就是这么简单，一点都不复杂。</p>
<p>我 相信你应该清楚的知道从仓库上下载的library只是存储在仓库服务器上的jar 或者aar文件而已。有点类似于自己去下载这些文件，拷贝然后和项目 一起编译。但是使用gradle依赖管理的最大好处是你除了添加几行文字之外啥也不做。library一下子就可以在项目中使用了。</p>
<p>了解aar文件</p>
<p>等等，我刚才说了仓库中存储的有两种类型的library：jar 和 aar。jar文件大家都知道，但是什么是aar文件呢？</p>
<p>aar文件时在jar文件之上开发的。之所以有它是因为有些Android Library需要植入一些安卓特有的文件，比如AndroidManifest.xml，资源文件，Assets或者JNI。这些都不是jar文件的标准。</p>
<p>因此aar文件就时发明出来包含所有这些东西的。总的来说它和jar一样只是普通的zip文件，不过具有不同的文件结构。jar文件以classes.jar的名字被嵌入到aar文件中。其余的文件罗列如下：</p>
<ul>
<li>/AndroidManifest.xml (mandatory)</li>
<li>/classes.jar (mandatory)</li>
<li>/res/ (mandatory)</li>
<li>/R.txt (mandatory)</li>
<li>/assets/ (optional)</li>
<li>/libs/*.jar (optional)</li>
<li>/jni/<abi>/*.so (optional)</abi></li>
<li>/proguard.txt (optional)</li>
<li>/lint.jar (optional)</li>
</ul>
<p>可以看到.aar文件是专门为安卓设计的。</p>
<p>以上转载：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Gradle 2.4之后已经可以使用JitPack发布项目，这个用起来甚至比上述方法还要简单的多，感兴趣的可以了解一下。</p>
<p>JitPack官网：<a href="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a>相当方便</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便 需要把jar发布到Maven服务器&lt;br&gt;网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：&lt;a href=&quot;https://github.com/xiaopansky/android-library-publish-to-jcenter&quot;&gt;https://github.com/xiaopansky/android-library-publish-to-jcenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter&lt;/p&gt;
&lt;p&gt;先看一下上传过程图解&lt;br&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://hui46226021.github.io/categories/Maven/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Maven" scheme="https://hui46226021.github.io/tags/Maven/"/>
    
      <category term="JCenter" scheme="https://hui46226021.github.io/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>关于JVM类加载器</title>
    <link href="https://hui46226021.github.io/2016/10/21/%E5%85%B3%E4%BA%8EJAVA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>https://hui46226021.github.io/2016/10/21/关于JAVA类加载器/</id>
    <published>2016-10-21T12:37:23.000Z</published>
    <updated>2017-10-01T12:46:13.957Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近需要弄android的 插件开发，那就先从JAVA的类加载器开始吧<br><a id="more"></a></p>
<h3 id="首先来了解一下字节码和class文件的区别："><a href="#首先来了解一下字节码和class文件的区别：" class="headerlink" title="首先来了解一下字节码和class文件的区别："></a>首先来了解一下字节码和class文件的区别：</h3><p>我们知道，新建一个java对象的时候，JVM要将这个对象对应的字节码加载到内存中，这个字节码的原始信息存放在classpath(就是我们新建Java工程的bin目录下)指定的目录下的.class文件,类加载需要将.class文件导入到硬盘中，经过一些处理之后变成字节码在加载到内存中。</p>
<p>顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。<br>基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例</p>
<h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>来自 <a href="http://blog.csdn.net/gjanyanlig/article/details/6818655/" target="_blank" rel="external">http://blog.csdn.net/gjanyanlig/article/details/6818655/</a><br>JVM将类加载过程分为三个步骤：装载（Load），链接（Link）和初始化(Initialize)链接又分为三个步骤，如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://hi.csdn.net/attachment/201109/25/0_131691377413Tr.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>1) 装载：查找并加载类的二进制数据；<br>2)链接：<br>验证：确保被加载类的正确性；<br>准备：为类的静态变量分配内存，并将其初始化为默认值；<br>解析：把类中的符号引用转换为直接引用；<br>3)初始化：为类的静态变量赋予正确的初始值；<br>          那为什么我要有验证这一步骤呢？首先如果由编译器生成的class文件，它肯定是符合JVM字节码格式的，但是万一有高手自己写一个class文件，让JVM加载并运行，用于恶意用途，就不妙了，因此这个class文件要先过验证这一关，不符合的话不会让它继续执行的，也是为了安全考虑吧。<br>        准备阶段和初始化阶段看似有点牟盾，其实是不牟盾的，如果类中有语句：private static int a = 10，它的执行过程是这样的，首先字节码文件被加载到内存后，先进行链接的验证这一步骤，验证通过后准备阶段，给a分配内存，因为变量a是static的，所以此时a等于int类型的默认初始值0，即a=0,然后到解析（后面在说），到初始化这一步骤时，才把a的真正的值10赋给a,此时a=10。</p>
<ol>
<li>类的初始化<br> 类什么时候才被初始化：<br>1）创建类的实例，也就是new一个对象<br>2）访问某个类或接口的静态变量，或者对该静态变量赋值<br>3）调用类的静态方法<br>4）反射（Class.forName(“com.lyj.load”)）<br>5）初始化一个类的子类（会首先初始化子类的父类）<br>6）JVM启动时标明的启动类，即文件名和类名相同的那个类<pre><code>只有这6中情况才会导致类的类的初始化。
</code></pre>  类的初始化步骤：<pre><code>1）如果这个类还没有被加载和链接，那先进行加载和链接
2）假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一次），那就初始化直接的父类（不适用于接口）
 3)加入类中存在初始化语句（如static变量和static块），那就依次执行这些初始化语句。
</code></pre></li>
</ol>
<p>3.类的加载<br>       类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象。看下面2图</p>
<p><img src="http://hi.csdn.net/attachment/201009/25/0_1285381395C6iW.gif" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://hi.csdn.net/attachment/201109/25/0_1316916841uQvx.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<pre><code> 类的加载的最终产品是位于堆区中的Class对象
Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口
</code></pre><p>加载类的方式有以下几种：<br> 1）从本地系统直接加载<br>2）通过网络下载.class文件<br>3）从zip，jar等归档文件中加载.class文件<br>4）从专有数据库中提取.class文件<br>5）将Java源文件动态编译为.class文件（服务器）</p>
<h2 id="Java虚拟机中类加载器："><a href="#Java虚拟机中类加载器：" class="headerlink" title="Java虚拟机中类加载器："></a>Java虚拟机中类加载器：</h2><p>java虚拟机中主要又3个系统类加载器，BootStrap,ExtClassLoader,AppClassLoader，同时也可以安装多个 其他的加载器</p>
<p>BootStrap,使用C/C++代码写的，是第一个类加载器，已经封装到JVM内核中了，而ExtClassLoader和AppClassLoader是Java类，其他的类加载器也都是JAVA写的。</p>
<p>看一下类加载器的属性结构图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20140101125755203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmd3ZWkwOTEwNDEwMDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Java虚拟机中的所有类加载器采用具有父子关系的树形结构进行组织，在实例化每个类加载器对象的时候，需要为其指定一个父级类加载器对象或者默认采用系统类加载器为其父级类加载<br>类加载器的委托机制：<br>当Java虚拟机要加载第一个类的时候，到底派出哪个类加载器去加载呢？<br>(1). 首先当前线程的类加载器去加载线程中的第一个类(当前线程的类加载器：Thread类中有一个get/setContextClassLoader(ClassLoader cl);方法，可以获取/指定本线程中的类加载器)<br>(2). 如果类A中引用了类B,Java虚拟机将使用加载类A的类加载器来加载类B<br>(3). 还可以直接调用ClassLoader.loadClass(String className)方法来指定某个类加载器去加载某个类<br>每个类加载器加载类时，又先委托给其上级类加载器当所有祖宗类加载器没有加载到类，回到发起者类加载器，还加载不了，则会抛出ClassNotFoundException,不是再去找发起者类加载器的儿子，因为没有getChild()方法。例如：如上图所示： MyClassLoader-&gt;AppClassLoader-&gt;Ext-&gt;ClassLoader-&gt;BootStrap.自定定义的MyClassLoader1首先会先委托给AppClassLoader,AppClassLoader会委托给ExtClassLoader,ExtClassLoader会委托给BootStrap，这时候BootStrap就去加载，如果加载成功，就结束了。如果加载失败，就交给ExtClassLoader去加载，如果ExtClassLoader加载成功了，就结束了，如果加载失败就交给AppClassLoader加载，如果加载成功，就结束了，如果加载失败，就交给自定义的MyClassLoader1类加载器加载，如果加载失败，就报ClassNotFoundException异常，结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近需要弄android的 插件开发，那就先从JAVA的类加载器开始吧&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://hui46226021.github.io/categories/JAVA/"/>
    
    
      <category term="AppClassLoader" scheme="https://hui46226021.github.io/tags/AppClassLoader/"/>
    
      <category term="JVN" scheme="https://hui46226021.github.io/tags/JVN/"/>
    
  </entry>
  
  <entry>
    <title>友盟封装第三方登录 第三方粉线</title>
    <link href="https://hui46226021.github.io/2016/10/18/ShUmengSdk%20%E5%8F%8B%E7%9B%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E5%88%86%E4%BA%AB%20%E7%99%BB%E5%BD%95%20%E5%B0%81%E8%A3%85/"/>
    <id>https://hui46226021.github.io/2016/10/18/ShUmengSdk 友盟第三方分享 登录 封装/</id>
    <published>2016-10-18T13:37:23.000Z</published>
    <updated>2017-10-01T12:50:31.040Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="ShUmengSdk"><a href="#ShUmengSdk" class="headerlink" title="ShUmengSdk"></a>ShUmengSdk</h1><p>封装友盟 第三方 分享 登录 微信支付</p>
<p>###当前友盟SDK版本v6.0.9</p>
<p>###所需各种 appkey 质询QQ 3431339973</p>
<p>##使用方法</p>
<ul>
<li>导入Module(umeng_sdk)</li>
<li>替换key_strings.xml下的所有 appkey</li>
<li>在项目的Application 里调用  UMShareHelper.init(this); 注册友盟</li>
<li>添加微信 回调页面WXEntryActivity  注意：wxapi 后的路径一定不能变</li>
<li>通过 ShareDialog.getInstance(this,null,”测试分享”,”<a href="https://www.baidu.co,&quot;,&quot;测试分享&quot;).showDialog();弹出分享菜单" target="_blank" rel="external">https://www.baidu.co,&quot;,&quot;测试分享&quot;).showDialog();弹出分享菜单</a></li>
<li>通过 mShareAPI.getPlatformInfo(MainActivity.this, SHARE_MEDIA.WEIXIN, umAuthListener); 第三方登录</li>
</ul>
<p>##注意：在调用分享的页面 要加入 页面回调<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    UMShareAPI.get(<span class="keyword">this</span>).onActivityResult(requestCode, resultCode, data);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ShUmengSdk&quot;&gt;&lt;a href=&quot;#ShUmengSdk&quot; class=&quot;headerlink&quot; title=&quot;ShUmengSdk&quot;&gt;&lt;/a&gt;ShUmengSdk&lt;/h1&gt;&lt;p&gt;封装友盟 第三方 分享 登录 微信支付&lt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="友盟" scheme="https://hui46226021.github.io/tags/%E5%8F%8B%E7%9B%9F/"/>
    
      <category term="第三方登录" scheme="https://hui46226021.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>腾讯 IM 封装成Library</title>
    <link href="https://hui46226021.github.io/2016/09/18/%E8%85%BE%E8%AE%AFIM%E5%B0%81%E8%A3%85%20ShIMLibrary/"/>
    <id>https://hui46226021.github.io/2016/09/18/腾讯IM封装 ShIMLibrary/</id>
    <published>2016-09-18T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:02.213Z</updated>
    
    <content type="html"><![CDATA[<p>把腾讯 IM 封装成Library<br><a id="more"></a></p>
<h1 id="IM-Demo"><a href="#IM-Demo" class="headerlink" title="IM_Demo"></a>IM_Demo</h1><h2 id="把腾讯-IM-封装成Library"><a href="#把腾讯-IM-封装成Library" class="headerlink" title="把腾讯 IM 封装成Library"></a>把腾讯 IM 封装成Library</h2><p>依照Demo主项目</p>
<p>先到腾讯IM 管理平台创建应用  <a href="https://www.qcloud.com/document/product/269/1504" target="_blank" rel="external">传送门</a></p>
<ul>
<li>1.导入JrImLibrary</li>
<li>2.复制 主项目下im 下面的三个类</li>
<li>3.在Application 中初始化IM模块</li>
<li>4.替换string.xml 下面的 sdk_appid 和 account_type</li>
<li>5.还有部分功能 没有实现 例如 上传图片，和搜索用户（考虑在主项目里实现）</li>
<li>6.服务器端 签名生成 JAVA 代码  [下载地址] (<a href="https://github.com/hui46226021/ShIMLibrary/raw/master/java_native.rar" target="_blank" rel="external">https://github.com/hui46226021/ShIMLibrary/raw/master/java_native.rar</a>)</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/1.gif" alt=""> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/2.gif" alt=""></p>
<p> <img src="https://raw.githubusercontent.com/hui46226021/ShIMLibrary/master/3.gif" alt=""></p>
<p> 源码地址:<a href="https://github.com/hui46226021/ShIMLibrary" target="_blank" rel="external">https://github.com/hui46226021/ShIMLibrary</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把腾讯 IM 封装成Library&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="即时通讯" scheme="https://hui46226021.github.io/tags/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
      <category term="腾讯IM" scheme="https://hui46226021.github.io/tags/%E8%85%BE%E8%AE%AFIM/"/>
    
  </entry>
  
  <entry>
    <title>DecorView</title>
    <link href="https://hui46226021.github.io/2016/09/17/DecorView/"/>
    <id>https://hui46226021.github.io/2016/09/17/DecorView/</id>
    <published>2016-09-17T08:17:33.000Z</published>
    <updated>2017-10-01T12:48:07.585Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: Activity 的结构  setContentView  的执行<br><a id="more"></a></p>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>Activity的setContentView 方法里 调用了 getWindow().setContentView(layoutResID);  </p>
<p>这个getWindow 获取到的就是PhoneWindow </p>
<p>在PhoneWindow里面 将布局文件 渲染到 一个mContentParent 的 viewgruop里面</p>
<p>viewgruop 通过generateLayout  (DecorView) 生成 ,generateDecour 方法初始  该方法生成一个 DecorView </p>
<p>DecorView 就是一个 FrameLayout  所以  所有的 Activity 的跟布局 都是一个 FrameLayout</p>
<p>generateLayout  方法里  判断 加载不同的系统布局 （有无标题  Actionbar等）生成一个View Add到DecorView里</p>
<p>这是 DecorView 里 就是一个 线性布局 里面是一个 Titel 下面是个 FrameLayout </p>
<p>getWindow().getDecorView  可以在 decorView findViewById(android.R.id.content) 获取 DecorView 里面的 FrameLayout</p>
<p><img src="https://static.oschina.net/uploads/img/201703/10132806_Lhc8.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: Activity 的结构  setContentView  的执行&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="DecorView" scheme="https://hui46226021.github.io/tags/DecorView/"/>
    
      <category term="源码" scheme="https://hui46226021.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="setContentView" scheme="https://hui46226021.github.io/tags/setContentView/"/>
    
  </entry>
  
  <entry>
    <title>Android-PickerView 时间控件，选择权</title>
    <link href="https://hui46226021.github.io/2016/08/17/Android-PickerView/"/>
    <id>https://hui46226021.github.io/2016/08/17/Android-PickerView/</id>
    <published>2016-08-17T14:37:23.000Z</published>
    <updated>2017-10-01T12:48:04.370Z</updated>
    
    <content type="html"><![CDATA[<p>在 saiwu-bigkoo 大神以上修改 便于自己使用<br><a id="more"></a></p>
<h1 id="PickerView-2-x系列"><a href="#PickerView-2-x系列" class="headerlink" title="PickerView (2.x系列)"></a>PickerView (2.x系列)</h1><p>精仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果<br>——TimePickerView  时间选择器，支持年月日时分，年月日，年月，时分等格式<br>——OptionsPickerView  选项选择器，支持一，二，三级选项选择，并且可以设置是否联动    </p>
<p>2.x是全新的3D效果，比1.x版本更加贴近iOS的效果，从外观细节上也得到了改善。api兼容1.x版本，只需要把依赖的版本号升级即可，几乎不用修改代码即可完成升级。</p>
<p>####使用maven 依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pickerview<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>####使用gradle 依赖:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  compile <span class="string">'com.sh.zsh.code:pickerview:2.1.2'</span></div><div class="line"><span class="comment">//这个是支持农历的分支 compile 'com.bigkoo:pickerview:lunar.1.0'</span></div></pre></td></tr></table></figure></p>
<h2 id="Demo-图片"><a href="#Demo-图片" class="headerlink" title="Demo 图片"></a>Demo 图片</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li><a href="https://github.com/saiwu-bigkoo/Android-PickerView/blob/master/app/src/main/java/com/bigkoo/pickerviewdemo/MainActivity.java" target="_blank" rel="external">demo代码请看戳这里</a></li>
</ul>
<blockquote>
<h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>v2.1.2</p>
<ul>
<li>增加设置选中item方法。<br></li>
</ul>
<p>v2.1.1</p>
<ul>
<li>修复dismiss时候点击背景会重复dismiss动画问题。<br></li>
</ul>
<p>v2.1.0</p>
<ul>
<li>去掉反射获取字符串，改为通过继承IPickerViewData。<br></li>
<li>解决多个PickerView同时存在时取消不了弹窗问题。<br></li>
</ul>
<p>v2.0.9</p>
<ul>
<li>解决属性和其他第三方库冲突问题。<br></li>
</ul>
<p>v2.0.8</p>
<ul>
<li>修复＃41 未选中项有错乱数据问题。<br></li>
<li>加入pickerview_customTextSize 和 pickerview_textsize 到 xml 中 来控制自定义文字大小<br></li>
</ul>
<p>v2.0.7</p>
<ul>
<li>修复设置初始化position ，第三级数据不对的BUG。 <br></li>
</ul>
<p>v2.0.6</p>
<ul>
<li>修复不循环模式下点击超出范围问题，修复后点击空白的地方，只能滚到最顶或最底，不会滚出数据范围。 <br></li>
</ul>
<p>v2.0.5</p>
<ul>
<li>修复不循环模式下底部超出范围问题 <br></li>
</ul>
<p>v2.0.4</p>
<ul>
<li>修复不循环模式下顶部超出范围问题 <br></li>
<li>wheel view文字颜色通过xml配置 <br></li>
</ul>
<p>v2.0.3</p>
<ul>
<li>修复时间选择的时候部分数字选不到直接跳到下一个数字的问题 <br></li>
</ul>
<p>v2.0.2</p>
<ul>
<li>修复不循环模式下点击空白item处出现数组越界问题 <br></li>
<li>修复循环模式下只有一条数据的时候只显示三条而不是填充满高度问题  <br></li>
</ul>
<p>v2.0.1</p>
<ul>
<li>去掉popupWindow，改用View，类名也对应修改为TimePickerView和 OptionsPickerView <br></li>
<li>加入遮罩效果  <br></li>
</ul>
<p>v2.0.0 不需修改任何代码就可以兼容1.x</p>
<ul>
<li>外观大整改  <br></li>
<li>支持反射获取getPickerViewText()来获取要展示数据，以前只能传String的对象，现在可以传任意对象只要有getPickerViewText()函数即可显示对应的字符串，如果没有getPickerViewText()函数则使用对象toString作为显示  <br></li>
<li>加入setTitle  <br></li>
</ul>
</blockquote>
<p>-－－－－－－－－－－－－－－－－－－－－华丽丽的分割线－－－－－－－－－－－－－－－－－－－－－－－－－－</p>
<h1 id="PickerView1-x-我已经把1-0-3版本分到v1-x的分支去了，停止维护1-x的分支"><a href="#PickerView1-x-我已经把1-0-3版本分到v1-x的分支去了，停止维护1-x的分支" class="headerlink" title="PickerView1.x (我已经把1.0.3版本分到v1.x的分支去了，停止维护1.x的分支)"></a>PickerView1.x (我已经把1.0.3版本分到v1.x的分支去了，停止维护1.x的分支)</h1><p>####使用gradle 依赖:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.bigkoo:pickerview:1.0.3'</span></div></pre></td></tr></table></figure></p>
<h2 id="Demo-图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）"><a href="#Demo-图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）" class="headerlink" title="Demo 图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）"></a>Demo 图片（招行信用卡的“掌上生活”里面条件选择器他们用的就是我这个库，大家可以当实际项目参考）</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/Bigkoo/Android-PickerView/master/preview/pickerdemo_zhangshangshenghuo.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li>WheelView</li>
<li><a href="https://github.com/weidongjian/androidWheelView/" target="_blank" rel="external">androidWheelView</a></li>
</ul>
<p>源码地址:<a href="https://github.com/hui46226021/Android-PickerView" target="_blank" rel="external">https://github.com/hui46226021/Android-PickerView</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 saiwu-bigkoo 大神以上修改 便于自己使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="自定义view" scheme="https://hui46226021.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    
  </entry>
  
  <entry>
    <title>Android 通过gardle限制引入so库 版本</title>
    <link href="https://hui46226021.github.io/2016/07/20/Android%20%E9%80%9A%E8%BF%87gardle%E9%99%90%E5%88%B6%E5%BC%95%E5%85%A5so%E5%BA%93%20%E7%89%88%E6%9C%AC/"/>
    <id>https://hui46226021.github.io/2016/07/20/Android 通过gardle限制引入so库 版本/</id>
    <published>2016-07-20T15:37:23.000Z</published>
    <updated>2017-10-01T12:47:56.915Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:android 的cpu不同 需要引入的so版本也不尽相同，有时候 会出现由于so库加载不到 崩溃的情况<br><a id="more"></a></p>
<p>今天 集成百度地图api的时候  同时项目里 还有 之前实现的一个 模糊图像的功能，<br>由于 百度地图 提供了 armeabi 的so库，而模糊功能的 依赖    compile ‘net.qiujuer.genius:blur:2.0.0-beta4’实现的，这个库里面 包含了  armeabi  armeabi-v7a arm64-v8a  每个里面 有libgenius_blur.so</p>
<p>这就导致  在部分 arm64的 手机上 百度地图的相关功能 会加载不到 so库,导致程序崩溃</p>
<p>最后找到解决方案 </p>
<p>在app 的 build.gradle 下的defaultConfig 添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ndk&#123;</div><div class="line">    moduleName <span class="string">"libgenius_blur"</span></div><div class="line">    ldLibs <span class="string">"log"</span></div><div class="line">    abiFilters <span class="string">"armeabi"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完美运行   谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:android 的cpu不同 需要引入的so版本也不尽相同，有时候 会出现由于so库加载不到 崩溃的情况&lt;br&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://hui46226021.github.io/categories/Maven/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="so库" scheme="https://hui46226021.github.io/tags/so%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Android JSON解析工具ShJsonUtils</title>
    <link href="https://hui46226021.github.io/2016/07/20/JSON%E8%A7%A3%E6%9E%90/"/>
    <id>https://hui46226021.github.io/2016/07/20/JSON解析/</id>
    <published>2016-07-20T13:37:23.000Z</published>
    <updated>2017-10-01T12:49:52.741Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:封装了一个 json解析的库<br><a id="more"></a></p>
<h1 id="ShJsonUtils"><a href="#ShJsonUtils" class="headerlink" title="ShJsonUtils"></a>ShJsonUtils</h1><p>android json解析框架<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shjson:1.2.3'</span></div></pre></td></tr></table></figure></p>
<p>#使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">JSONUtil jsonUtil = <span class="keyword">new</span> JSONUtil(jsonStr);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class);</div><div class="line"><span class="comment">//三维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class,En.class);</div><div class="line">List&lt;People&gt; peoples2 =jsonUtil.getList(People.class,<span class="string">"data.people"</span>);</div><div class="line">String animal = jsonUtil.getObject(String.class,<span class="string">"data.animal"</span>);</div><div class="line">Look look = jsonUtil.getObject(Look.class,<span class="string">"data.look"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>创建 JSONUtil 对象，传入json字符串</li>
<li>通过getObject方法 获取 实体对象 ，层级用.隔开</li>
<li>通过getList方法 获取 数组对象 ，层级用.隔开</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShJsonUtils/edit/master/README.md" target="_blank" rel="external">https://github.com/hui46226021/ShJsonUtils/edit/master/README.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:封装了一个 json解析的库&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="JSON解析" scheme="https://hui46226021.github.io/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android JSON解析工具ShJsonUtils</title>
    <link href="https://hui46226021.github.io/2016/07/18/Android%20%E4%BB%BF%E5%BE%AE%E4%BF%A1%20%E7%9B%B8%E5%86%8C%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9%E5%99%A8%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://hui46226021.github.io/2016/07/18/Android 仿微信 相册多图选择器 - 副本/</id>
    <published>2016-07-18T13:37:23.000Z</published>
    <updated>2017-10-01T12:47:40.255Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:封装了一个 json解析的库<br><a id="more"></a></p>
<h1 id="ShJsonUtils"><a href="#ShJsonUtils" class="headerlink" title="ShJsonUtils"></a>ShJsonUtils</h1><p>android json解析框架<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shjson:1.2.3'</span></div></pre></td></tr></table></figure></p>
<p>#使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">JSONUtil jsonUtil = <span class="keyword">new</span> JSONUtil(jsonStr);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class);</div><div class="line"><span class="comment">//三维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class,En.class);</div><div class="line">List&lt;People&gt; peoples2 =jsonUtil.getList(People.class,<span class="string">"data.people"</span>);</div><div class="line">String animal = jsonUtil.getObject(String.class,<span class="string">"data.animal"</span>);</div><div class="line">Look look = jsonUtil.getObject(Look.class,<span class="string">"data.look"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>创建 JSONUtil 对象，传入json字符串</li>
<li>通过getObject方法 获取 实体对象 ，层级用.隔开</li>
<li>通过getList方法 获取 数组对象 ，层级用.隔开</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShJsonUtils/edit/master/README.md" target="_blank" rel="external">https://github.com/hui46226021/ShJsonUtils/edit/master/README.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:封装了一个 json解析的库&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="JSON解析" scheme="https://hui46226021.github.io/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 仿微信 相册多图选择器</title>
    <link href="https://hui46226021.github.io/2016/07/01/Android%20%E4%BB%BF%E5%BE%AE%E4%BF%A1%20%E7%9B%B8%E5%86%8C%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://hui46226021.github.io/2016/07/01/Android 仿微信 相册多图选择器/</id>
    <published>2016-07-01T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:44.779Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用<br><a id="more"></a></p>
<h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shphotoselectorlibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shphotoselectorlibrary:2.0.9'</span></div></pre></td></tr></table></figure></p>
<p>该项目依赖 Glide:3.7.0 如果有冲突 可以 修改主项目里的依赖  或者 直接导入Library</p>
<h3 id="跳转到-图片选择器页面"><a href="#跳转到-图片选择器页面" class="headerlink" title="跳转到 图片选择器页面"></a>跳转到 图片选择器页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMGSACTIVITY_REQUEST = <span class="number">10001</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chise</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">		<span class="comment">//可选择图片的最大数量</span></div><div class="line">		intent.putExtra(PhotoActivity.IMAGE_COUNT,<span class="number">9</span>); </div><div class="line">		<span class="comment">//顶部Toolbar栏背景颜色</span></div><div class="line">		intent.putExtra(PhotoActivity.BAR_COLORS,R.color.colorPrimary);</div><div class="line">		intent.setClass(<span class="keyword">this</span>,PhotoActivity.class);</div><div class="line">		startActivityForResult(intent,IMGSACTIVITY_REQUEST);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="在Activity的回调里获取到-所有选择的图片地址"><a href="#在Activity的回调里获取到-所有选择的图片地址" class="headerlink" title="在Activity的回调里获取到 所有选择的图片地址"></a>在Activity的回调里获取到 所有选择的图片地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (requestCode == IMGSACTIVITY_REQUEST &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">			Bundle bundle = data.getExtras();</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (bundle.getStringArrayList(<span class="string">"files"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">					listfile = bundle.getStringArrayList(<span class="string">"files"</span>);</div><div class="line">					listView.setVisibility(View.VISIBLE);</div><div class="line">					ArrayAdapter&lt;String&gt; arryAdapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, listfile);</div><div class="line">					listView.setAdapter(arryAdapter);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/1.gif" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>源码地址：<a href="https://github.com/hui46226021/ShPhotoSelector" target="_blank" rel="external">https://github.com/hui46226021/ShPhotoSelector</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="相册" scheme="https://hui46226021.github.io/tags/%E7%9B%B8%E5%86%8C/"/>
    
      <category term="微信" scheme="https://hui46226021.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="多图选择" scheme="https://hui46226021.github.io/tags/%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoPlay android视频播放器</title>
    <link href="https://hui46226021.github.io/2016/05/18/ShVideoPlay%20android%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://hui46226021.github.io/2016/05/18/ShVideoPlay android视频播放器/</id>
    <published>2016-05-18T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:41.888Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频播放器<br><a id="more"></a></p>
<h1 id="ShVideoPlay"><a href="#ShVideoPlay" class="headerlink" title="ShVideoPlay"></a>ShVideoPlay</h1><p>android 视频播放封装<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideoplayer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shvideoplayer:1.0.2'</span></div></pre></td></tr></table></figure></p>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoPlay" target="_blank" rel="external">https://github.com/hui46226021/ShVideoPlay</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频播放器&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频播放" scheme="https://hui46226021.github.io/tags/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>andfix 增量升级更新 热补丁修复</title>
    <link href="https://hui46226021.github.io/2016/03/17/andfix/"/>
    <id>https://hui46226021.github.io/2016/03/17/andfix/</id>
    <published>2016-03-17T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:06.109Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵<br><a id="more"></a></p>
<h3 id="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"><a href="#搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）" class="headerlink" title="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"></a>搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）</h3><p>1.dexposed     github <a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">https://github.com/alibaba/dexposed</a></p>
<p>2.andfix   github <a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p>
<p>3.bsdiff  <a href="http://blog.csdn.net/lazyer_dog/article/details/47173013" target="_blank" rel="external">http://blog.csdn.net/lazyer_dog/article/details/47173013</a></p>
<p>dexposed和andfix是alibaba的开源项目，都是apk增量更新的实现框架，目前dexposed的兼容性较差，只有2.3，4.0~4.4兼容，其他Android版本不兼容或未测试，详细可以去dexposed的github项目主页查看，而andfix则兼容2.3~6.0，所以就拿这个项目来实现增量更新吧。至于bsdiff，只是阅览了一下，还没研究过。</p>
<p>首先 Git clone github <a href="https://github.com/alibaba/AndFix，将andfix项目下载下来，Android" target="_blank" rel="external">https://github.com/alibaba/AndFix，将andfix项目下载下来，Android</a> studio可以在build.gradle里导入andfix，</p>
<p>compile ‘com.alipay.euler:andfix:0.3.1@aar’<br>但是我是使用module的方式添加andfix，这样可以直接查看编辑源码，而且直接gradle导入的话还有个问题，后面再说。</p>
<p>andfix项目里有sample，导入也行，自己新建也行，我是自己新建项目，接着导入andfix作为module，demo里就两个类，mainactivity和myapplication</p>
<p>andfix里有些文件夹不用导入的，例如tools，doc等，记得新建jniLibs文件夹，libs里的so文件移到jniLibs里。<br>~~~java<br>public class MainApplication extends Application {<br>    private static final String TAG = “euler”;</p>
<pre><code>private static final String APATCH_PATH = &quot;/out.apatch&quot;;

private static final String DIR = &quot;apatch&quot;;//补丁文件夹
/**
 * patch manager
 */
private PatchManager mPatchManager;

@Override
public void onCreate() {
    super.onCreate();
    // initialize
    mPatchManager = new PatchManager(this);
    mPatchManager.init(&quot;1.0&quot;);
    Log.d(TAG, &quot;inited.&quot;);

    // load patch
    mPatchManager.loadPatch();
</code></pre><p>//        Log.d(TAG, “apatch loaded.”);</p>
<pre><code>    // add patch at runtime
    try {
        // .apatch file path
        String patchFileString = Environment.getExternalStorageDirectory()
                .getAbsolutePath() + APATCH_PATH;
        mPatchManager.addPatch(patchFileString);
        Log.d(TAG, &quot;apatch:&quot; + patchFileString + &quot; added.&quot;);

        //这里我加了个方法，复制加载补丁成功后，删除sdcard的补丁，避免每次进入程序都重新加载一次
        File f = new File(this.getFilesDir(), DIR + APATCH_PATH);
        if (f.exists()) {
            boolean result = new File(patchFileString).delete();
            if (!result)
                Log.e(TAG, patchFileString + &quot; delete fail&quot;);
        }
    } catch (IOException e) {
        Log.e(TAG, &quot;&quot;, e);
    }

}
</code></pre><p>public class MainActivity extends Activity {<br>    private static final String TAG = “euler”;</p>
<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    toast();
}

@Override
protected void onDestroy() {
    super.onDestroy();
    android.os.Process.killProcess(android.os.Process.myPid());
}

//旧方法，1.apk
private void toast() {        Toast.makeText(this, &quot;old&quot;, Toast.LENGTH_SHORT).show();    }}
</code></pre><p>刚刚说的直接在gradle里导入andfix会有个问题，是在原来的项目中，加载一次补丁后，out.apatch文件会copy到getFilesDir目录下的/apatch文件夹中，在下次补丁更新时，会检测补丁是否已经添加在apatch文件夹下，已存在就不会复制加载sdcard的out.apatch。</p>
<p>原来的addpath方法</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if(!src.exists()){<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + path + “] has be loaded.”);<br>        return;<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>修改后，判断apatch下的out.apatch存在即删除掉，重新复制加载sdcard下的out.apatch</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if (!src.exists()) {<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + src.getName() + “] has be loaded.”);<br>        boolean deleteResult = dest.delete();<br>        if (deleteResult)<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] has be delete.”);<br>        else {<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] delete error”);<br>            return;<br>        }<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>还有源码混淆</p>
<p>-optimizationpasses 5                                                           # 指定代码的压缩级别<br>-dontusemixedcaseclassnames                                                     # 是否使用大小写混合<br>-dontskipnonpubliclibraryclasses                                                # 是否混淆第三方jar<br>-dontpreverify                                                                  # 混淆时是否做预校验<br>-verbose                                                                        # 混淆时是否记录日志<br>-optimizations !code/simplification/arithmetic,!field/<em>,!class/merging/</em>        # 混淆时所采用的算法</p>
<h2 id="重要，別忘了這些，不混淆andfix包，不混淆native方法"><a href="#重要，別忘了這些，不混淆andfix包，不混淆native方法" class="headerlink" title="重要，別忘了這些，不混淆andfix包，不混淆native方法"></a>重要，別忘了這些，不混淆andfix包，不混淆native方法</h2><p>-dontwarn android.annotation<br>-dontwarn com.alipay.euler.<strong><br>-keep class com.alipay.euler.</strong> {<em>;}<br>-keep class </em> extends java.lang.annotation.Annotation<br>-keepclasseswithmembernames class * {<br>    native <methods>;<br>}</methods></p>
<p>接着打包1.apk，</p>
<p>然后修改mainactivity的toast()，打包2.apk</p>
<p>//修改Toast內容，2.apk<br>private void toast() {<br>    Toast.makeText(this, “new”, Toast.LENGTH_SHORT).show();<br>}</p>
<p>cmd输入命令，具体参数看usage</p>
<p>如无错误，编译后会生成一个apatch文件，改名成out.apatch</p>
<p>安装打开1.apk</p>
<p>关闭app，将out.apatch放sdcard根目录后，重新打开app，toast方法改变了</p>
<p>ps：</p>
<ol>
<li><p>这里只是简单的测试了一下，没有复杂的功能，而且andfix不支持布局资源等的修改。</p>
</li>
<li><p>github主页的issues反应说Android4.0.4，以及5.0以上版本会crash，不过我使用了两个虚拟机，genymotion的4.2和5.0虚拟机，没有错误，其他请自测</p>
</li>
<li><p>使用了apk加固时（360加固，百度加固等等），发现在加固前要先apkpatch制作补丁，不能使用加固后的apk制作，否则补丁无法使用，但是在加固前制作的补丁可以很容易的被反编译出源码</p>
</li>
</ol>
<p>demo下载 <a href="http://download.csdn.net/detail/ityangjun/9177377" target="_blank" rel="external">http://download.csdn.net/detail/ityangjun/9177377</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转载" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="增量升级" scheme="https://hui46226021.github.io/tags/%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7/"/>
    
      <category term="热补丁修复" scheme="https://hui46226021.github.io/tags/%E7%83%AD%E8%A1%A5%E4%B8%81%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="andfix" scheme="https://hui46226021.github.io/tags/andfix/"/>
    
  </entry>
  
  <entry>
    <title>Android动画 详解（一 补间动画）</title>
    <link href="https://hui46226021.github.io/2015/12/23/Android%E5%8A%A8%E7%94%BB%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%20%E8%A1%A5%E9%97%B4%E5%8A%A8%E7%94%BB%EF%BC%89/"/>
    <id>https://hui46226021.github.io/2015/12/23/Android动画 详解（一 补间动画）/</id>
    <published>2015-12-23T11:42:33.000Z</published>
    <updated>2017-10-01T12:47:20.413Z</updated>
    
    <content type="html"><![CDATA[<pre><code>打算整理下 android动画方面的知识，嗯  开始
</code></pre><a id="more"></a>
<h2 id="一-android补间动画-分为四大类"><a href="#一-android补间动画-分为四大类" class="headerlink" title="一.android补间动画 分为四大类"></a>一.android补间动画 分为四大类</h2><p>alpha（透明度渐变）、scale（尺寸渐变）、translate（位置移动）、rotate（旋转）</p>
<p>通过JAVA类来表示 AlphaAnimation    ScaleAnimation   TranslateAnimation RotateAnimation</p>
<h2 id="二-可以通过-XML文件-或者JAVA代码的方式来实现动画"><a href="#二-可以通过-XML文件-或者JAVA代码的方式来实现动画" class="headerlink" title="二.可以通过 XML文件 或者JAVA代码的方式来实现动画"></a>二.可以通过 XML文件 或者JAVA代码的方式来实现动画</h2><h3 id="1-动过XML来实现动画"><a href="#1-动过XML来实现动画" class="headerlink" title="1.动过XML来实现动画"></a>1.动过XML来实现动画</h3><p>在res目录中新建anim文件夹<br>在anim目录中新建一个anim.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"> <span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">alpha</span>/&gt;</span> </div><div class="line">      <span class="tag">&lt;<span class="name">scale</span>/&gt;</span>       </div><div class="line">  <span class="tag">&lt;<span class="name">translate</span>/&gt;</span>       </div><div class="line">  <span class="tag">&lt;<span class="name">rotate</span>/&gt;</span>  </div><div class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>XML动画详细解析</p>
<h3 id="alpha"><a href="#alpha" class="headerlink" title="alpha"></a>alpha</h3><p>说明: 0.0表示完全透明 1.0表示完全不透明   时间以毫秒为单位</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;   </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android" &gt;       </div><div class="line">        &lt;alpha  android:fromAlpha="0.1"   &lt;!--动画起始时透明度        --&gt;        </div><div class="line">                android:toAlpha="1.0"   &lt;!--动画结束时透明度 --&gt;               </div><div class="line">                android:duration="3000"  /&gt; &lt;!--动画持续时间--&gt; </div><div class="line"> &lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h3><p>说明: 插入器 下一篇详细说</p>
<p>pivotX  pivotY 确定了 放大缩小的中心  上面4个属性 定义了开始 和结束的比例 <1缩小>1放大</1缩小></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">&lt;scale  </div><div class="line">    android:interpolator=  "@android:anim/accelerate_decelerate_interpolator"                                         </div><div class="line">    &lt;!--interpolator 指定一个动画的插入器              --&gt;</div><div class="line">    android:fromXScale="0.0"   </div><div class="line">    &lt;!--起始时 X坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:toXScale="1.4"        </div><div class="line">    &lt;!--结束时 X坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:fromYScale="0.0" </div><div class="line">    &lt;!--起始时Y坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:toYScale="1.4"   </div><div class="line">    &lt;!--结束时Y坐标上的伸缩尺寸              --&gt;</div><div class="line">    android:pivotX="50%"   </div><div class="line">    &lt;!--属性为动画相对于物件的X坐标的开始位置              --&gt;</div><div class="line">    android:pivotY="50%"   </div><div class="line">    &lt;!--属性为动画相对于物件的Y坐标的开始位置              --&gt;</div><div class="line">    android:fillAfter="false"   </div><div class="line">    &lt;!--当设置为true ，该动画转化在动画结束后被应用              --&gt;</div><div class="line">    android:duration="700"   </div><div class="line">    &lt;!--时间       --&gt;</div><div class="line">    /&gt;   </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>Translate</p>
<h3 id="说明：没啥说的了"><a href="#说明：没啥说的了" class="headerlink" title="说明：没啥说的了"></a>说明：没啥说的了</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;   </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">&lt;translate  </div><div class="line">    android:fromXDelta="30"   </div><div class="line">    &lt;!--始时 X坐标上的位置                   --&gt;</div><div class="line">    android:toXDelta="-80"   </div><div class="line">    &lt;!--结束时 X坐标上的位置                  --&gt;</div><div class="line">    android:fromYDelta="30"   </div><div class="line">    &lt;!--起始时 Y坐标上的位置                  --&gt;</div><div class="line">    android:toYDelta="300"   </div><div class="line">    &lt;!--结束时 Y坐标上的位置                  --&gt;</div><div class="line">    android:duration="2000"  </div><div class="line">    &lt;!--时间--&gt;</div><div class="line">    /&gt; </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>Rotate</p>
<h3 id="说明：其实也没啥好说的了"><a href="#说明：其实也没啥好说的了" class="headerlink" title="说明：其实也没啥好说的了"></a>说明：其实也没啥好说的了</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;       </div><div class="line">    &lt;rotate            </div><div class="line">        android:interpolator="@android:anim/accelerate_decelerate_interpolator"         </div><div class="line">        &lt;!--动画的插入器                   --&gt;</div><div class="line">        android:fromDegrees="0"   </div><div class="line">        &lt;!--动画起始时物件的角度          --&gt;</div><div class="line">        android:toDegrees="+350"   </div><div class="line">        &lt;!--画结束时物件旋转的角度 可以大于360度          --&gt;</div><div class="line">        android:pivotX="50%"   </div><div class="line">        &lt;!--X坐标的开始位置          --&gt;</div><div class="line">        android:pivotY="50%"   </div><div class="line">        &lt;!--Y坐标的开始位置          --&gt;</div><div class="line">        android:duration="3000"      </div><div class="line">        /&gt;   </div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<h3 id="在JAVA-代码中调用XML"><a href="#在JAVA-代码中调用XML" class="headerlink" title="在JAVA 代码中调用XML"></a>在JAVA 代码中调用XML</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> Animation myAnimation= AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.my_action); </div><div class="line"><span class="comment">//使用AnimationUtils类的静态方法loadAnimation()来加载XML中的动画XML文件</span></div></pre></td></tr></table></figure>
<p>2 试用JAVA 代码 来创建动画</p>
<p>说明 具体参数含义 可对照上面的XML<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在代码中定义 动画实例对象</span></div><div class="line"><span class="keyword">private</span> Animation myAnimation_Alpha;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Scale;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Translate;</div><div class="line"><span class="keyword">private</span> Animation myAnimation_Rotate;</div><div class="line"></div><div class="line"><span class="comment">//根据各自的构造方法来初始化一个实例对象</span></div><div class="line">myAnimation_Alpha = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.1f</span>, <span class="number">1.0f</span>);</div><div class="line"></div><div class="line">myAnimation_Scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.0f</span>, <span class="number">1.4f</span>, <span class="number">0.0f</span>, <span class="number">1.4f</span>,</div><div class="line">Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div><div class="line"></div><div class="line">myAnimation_Translate = <span class="keyword">new</span> TranslateAnimation(<span class="number">30.0f</span>, -<span class="number">80.0f</span>, <span class="number">30.0f</span>, <span class="number">300.0f</span>);</div><div class="line"></div><div class="line">myAnimation_Rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0.0f</span>, +<span class="number">350.0f</span>,</div><div class="line">Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div><div class="line">设置动画监听，注意 当控件移动后  其点击事件 还在原来的未知 需要调用view.layout(x,x,x,x);方法修改下 控件的未知</div><div class="line"></div><div class="line">animation.setAnimationListener(<span class="keyword">new</span> Animation.AnimationListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animation animation)</span> </span>&#123;</div><div class="line">              </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">最后 就查给控件添加上 创建好的动画 并启动了</div><div class="line"></div><div class="line">view.startAnimation(animation);</div></pre></td></tr></table></figure></p>
<h1 id="谢谢"><a href="#谢谢" class="headerlink" title="谢谢"></a>谢谢</h1>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;打算整理下 android动画方面的知识，嗯  开始
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="原创" scheme="https://hui46226021.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="动画" scheme="https://hui46226021.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>整理 iOS 9 适配中出现的坑</title>
    <link href="https://hui46226021.github.io/2015/12/18/%E6%95%B4%E7%90%86%20iOS%209%20%E9%80%82%E9%85%8D%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://hui46226021.github.io/2015/12/18/整理 iOS 9 适配中出现的坑/</id>
    <published>2015-12-18T08:17:33.000Z</published>
    <updated>2017-10-01T12:46:58.339Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 整理 iOS 9 适配中出现的坑</p>
<a id="more"></a>
<p><a href="http://www.cocoachina.com/ios/20151012/13715.html#0-tsina-1-57205-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="external">http://www.cocoachina.com/ios/20151012/13715.html#0-tsina-1-57205-397232819ff9a47a7b7e80a40613cfe1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 整理 iOS 9 适配中出现的坑&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://hui46226021.github.io/categories/IOS/"/>
    
    
      <category term="session共享" scheme="https://hui46226021.github.io/tags/session%E5%85%B1%E4%BA%AB/"/>
    
      <category term="分布式" scheme="https://hui46226021.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="IOS 9" scheme="https://hui46226021.github.io/tags/IOS-9/"/>
    
  </entry>
  
  <entry>
    <title>单个ViewControl适配不同ios版本xib文件实现</title>
    <link href="https://hui46226021.github.io/2015/12/07/%E5%8D%95%E4%B8%AAViewControl%E9%80%82%E9%85%8D%E4%B8%8D%E5%90%8Cios%E7%89%88%E6%9C%ACxib%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>https://hui46226021.github.io/2015/12/07/单个ViewControl适配不同ios版本xib文件实现/</id>
    <published>2015-12-07T08:17:33.000Z</published>
    <updated>2017-10-01T12:46:19.311Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: IOS 适配不同的界面xib</p>
<a id="more"></a>
<p>方法如下：</p>
<p>在跳转本界面时，在代码里面实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> systemVersion = [[[UIDevice currentDevice] systemVersion] floatValue];</div><div class="line"><span class="keyword">if</span> (systemVersion &gt;= <span class="number">7.0</span>)</div><div class="line">&#123;</div><div class="line">    AboutUSView *aboutUSView= [[[AboutUSView alloc] initWithNibName:@<span class="string">"AboutUSView1"</span> bundle:nil] autorelease];</div><div class="line">    [self.navigationController pushViewController:aboutUSView animated:TRUE];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    AboutUSView *aboutUSView= [[[AboutUSView alloc] initWithNibName:@<span class="string">"AboutUSView"</span> bundle:nil] autorelease];</div><div class="line">    [self.navigationController pushViewController:aboutUSView animated:TRUE];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: IOS 适配不同的界面xib&lt;/p&gt;
    
    </summary>
    
      <category term="IOS" scheme="https://hui46226021.github.io/categories/IOS/"/>
    
    
      <category term="IOS" scheme="https://hui46226021.github.io/tags/IOS/"/>
    
      <category term="xib" scheme="https://hui46226021.github.io/tags/xib/"/>
    
      <category term="屏幕适配" scheme="https://hui46226021.github.io/tags/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>一个Demo学会用Android兼容包新控件</title>
    <link href="https://hui46226021.github.io/2015/11/23/%E4%B8%80%E4%B8%AADemo%E5%AD%A6%E4%BC%9A%E7%94%A8Android%E5%85%BC%E5%AE%B9%E5%8C%85%E6%96%B0%E6%8E%A7%E4%BB%B6/"/>
    <id>https://hui46226021.github.io/2015/11/23/一个Demo学会用Android兼容包新控件/</id>
    <published>2015-11-23T11:42:23.000Z</published>
    <updated>2017-10-01T12:46:06.994Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:伟大的Google为Android推出了一系列的兼容包，最新的就是Design Support Library了，这里我们结合v7和v4中的几个控件，来主要学习Design Support Library中的几个新控件！一个Demo学会用它们！<br><a id="more"></a></p>
<h1 id="效果动图GIF："><a href="#效果动图GIF：" class="headerlink" title="效果动图GIF："></a>效果动图GIF：</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://static.oschina.net/uploads/img/201604/15120339_bupE.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h1><h3 id="通过本实例可以学习到以下内容："><a href="#通过本实例可以学习到以下内容：" class="headerlink" title="通过本实例可以学习到以下内容："></a>通过本实例可以学习到以下内容：</h3><ul>
<li>Drawerlayout和NavigationView实现优雅的Google范儿侧边栏；</li>
<li>新控件CoordinatorLayout、AppBarLayout、Toolbar、FloatingActionButton的用法，以及Toolbar的渐变隐藏动画效果；</li>
<li>官方Tabs组件TabLayout和ViewPager结合实现主界面内容区域；</li>
<li>SwipeRefreshLayout和RecyclerView结合实现下拉刷新，以及RecyclerView的数据适配器RecyclerView.Adapter的用法，还有RecyclerView中item的点击事件的实现方法；</li>
<li>卡片式CardView的用法；</li>
<li>类似Toast的新控件Snackbar的用法。<h2 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h2></li>
</ul>
<p>学习Android解释再多代码都没有用，因为解释过了还是不会用。因此，我们这里将布局文件XML源码贴出来供学习，放心，所有知识点都已经注释在源码中。</p>
<p>styles.xml源码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"MyThemeBlue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 蓝色为主色调 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyThemeBlue"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--选中状态icon的颜色和字体颜色--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/main_blue_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/main_blue_dark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/main_blue_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--正常状态下字体颜色和icon颜色--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>@color/main_white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>colorPrimary、colorPrimaryDark、colorAccent、textColorPrimary的含义，请看博文 <a href="http://sunjiajia.com/2015/06/19/android-material-theme-and-toolbar/" target="_blank" rel="external">《Android L+ Theme 与 Toolbar 实例》</a> 。</p>
<p>主布局activity_my.xml源码（重点）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/id_drawerlayout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 第一个位置 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 你的主界面内容，必须放置在Drawerlayout中的第一个位置</span></div><div class="line">    根据自己的需要来放置控件，</div><div class="line">        例如：LinearLayout布局或者RelativeLayout布局；</div><div class="line">    也可以是单个控件，</div><div class="line">        如 TextView等  --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_main"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 第二个位置 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用来放Drawerlayout中的内容，</span></div><div class="line">    这里使用NavigationView来实现类似Google pLay中的侧滑栏效果，</div><div class="line">    必须在build.gradle中添加compile 'com.android.support:design:22.2.0'；</div><div class="line">    另外，如果不需要NavigationView效果，</div><div class="line">    也可以放置一个普通布局文件就是一个普通的侧滑栏了。</div><div class="line">     --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">     注意：</div><div class="line">        如果使用NavigationView（其他控件也是一样）的特有属性，需要加上命名空间：</div><div class="line">                xmlns:app="http://schemas.android.com/apk/res-auto"；</div><div class="line">        另外，一定要添加android:layout_gravity="left"属性。</div><div class="line">     --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        属性解析：</div><div class="line">            app:headerLayout：    NavigationView中头部的head部分的布局，是自己实现的；</div><div class="line">            app:menu：            指定Nav中的Menu布局，就是自己写Menu中的按钮，要放在res/menu/文件夹下；</div><div class="line">            app:itemTextColor：  用来设置Nav中，menu item的颜色选择器。</div><div class="line">        还有一些属性：           和itemTextColor用法一样，指定一个颜色选择器，实现不同的颜色效果。</div><div class="line">            app:itemIconTint:</div><div class="line">            app:itemBackground:</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_navigationview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:itemTextColor</span>=<span class="string">"@color/selector_nav_menu_textcolor"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="content-main-xml源码（重点）"><a href="#content-main-xml源码（重点）" class="headerlink" title="content_main.xml源码（重点）"></a>content_main.xml源码（重点）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;<span class="comment">&lt;!--</span></div><div class="line">    CoordinatorLayout是这次新添加的一个增强型的FrameLayout，通过它可以实现很多东西：</div><div class="line">        例如：</div><div class="line">            1.界面向上滚动逐渐隐藏Toolbar；</div><div class="line">            2.在其中可以放置浮动的View，就像Floating Action Button。</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/id_coordinatorlayout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        AppBarLayout跟它的名字一样，把容器类的组件全部作为AppBar。</div><div class="line">            将AppBarLayout放在CoordinatorLayout中，就可以实现滚动效果。</div><div class="line">            本例中，TabLayout在界面滚动时，随着Toolbar的逐渐隐藏，将占据Toolbar的位置，</div><div class="line">                达到节省屏幕空间，界面动画效果的目的。</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_appbarlayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line"></div><div class="line">        属性解析：</div><div class="line">            app:theme：指定Toolbar的样式，包括ActionbarToggle和popupMenu的指示图标颜色</div><div class="line">            app:popupTheme：指定popupMenu溢出后的样式</div><div class="line">            app:title:    指定Toolbar中主Title的内容</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">            app:layout_scrollFlags的意思是：</div><div class="line"></div><div class="line">                设置的layout_scrollFlags有如下几种选项：</div><div class="line">                    scroll: 所有想滚动出屏幕的view都需要设置这个flag- 没有设置这个flag的view将被固定在屏幕顶部。</div><div class="line">                    enterAlways: 这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。</div><div class="line">                    enterAlwaysCollapsed: 当你的视图已经设置minHeight属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</div><div class="line">                    exitUntilCollapsed: 当视图会在滚动时，它一直滚动到设置的minHeight时完全隐藏。</div><div class="line"></div><div class="line">            需要注意的是，后面两种模式基本只有在CollapsingToolbarLayout才有用，</div><div class="line">            而前面两种模式基本是需要一起使用的，也就是说，这些flag的使用场景，基本已经固定了。</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span></div><div class="line">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">            <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.ActionBar"</span></div><div class="line">            <span class="attr">app:title</span>=<span class="string">"@string/toolbar_title"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">            Tabs选项卡，和ViewPager搭配使用可以增大界面的内容展示量，实现各种个性化分类内容展示而不互相干扰！</div><div class="line">            Google在Design support library中提供官方的Tab组件，它就是TabLayout。</div><div class="line">            相比Github上面开源的第三方库，这个更加简单易用。</div><div class="line"></div><div class="line">            有以下常用属性：</div><div class="line">                app:tabGravity="fill"  表示TabLayout中的Tabs要占满屏幕的width；</div><div class="line">                app:tabSelectedTextColor：Tab被选中字体的颜色；</div><div class="line">                app:tabTextColor：Tab未被选中字体的颜色；</div><div class="line">                app:tabIndicatorColor：Tab指示器下标的颜色；</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tablayout"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:tabGravity</span>=<span class="string">"fill"</span></div><div class="line">            <span class="attr">app:tabIndicatorColor</span>=<span class="string">"@color/main_white"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        我们常用的ViewPager，不多说了。你会发现多了一个 app:layout_behavior 属性，没错，</div><div class="line">            如果你使用CoordinatorLayout来实现Toolbar滚动渐变消失动画效果，那就必须在它下面的那个控件中加入这个属性，</div><div class="line">            并且下面的这个控件必须是可滚动的。</div><div class="line">        当设置了layout_behavior的控件滑动时，就会触发设置了layout_scrollFlags的控件发生状态的改变。</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_viewpager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        这是一个浮动按钮。由于FloatingActionButton是重写ImageView的，</div><div class="line">        所有FloatingActionButton拥有ImageView的一切属性。</div><div class="line"></div><div class="line">        属性介绍：</div><div class="line">            app:backgroundTint : FAB的背景色。</div><div class="line">            app:elevation      ：FAB的阴影效果。</div><div class="line">            app:rippleColor    ：设置涟漪的颜色，默认是由背景色生成的暗色调，可以自己指定。</div><div class="line">            app:pressedTranslationZ  ：FAB动画效果，在它被按下的时候阴影就会增大。</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_floatingactionbutton"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_action_plusone"</span></div><div class="line">        <span class="attr">app:backgroundTint</span>=<span class="string">"@color/main_blue_light"</span></div><div class="line">        <span class="attr">app:elevation</span>=<span class="string">"6dp"</span></div><div class="line">        <span class="attr">app:pressedTranslationZ</span>=<span class="string">"12dp"</span></div><div class="line">        <span class="attr">app:rippleColor</span>=<span class="string">"@color/main_blue_dark"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="frag-main-xml源码（Fragment的布局）"><a href="#frag-main-xml源码（Fragment的布局）" class="headerlink" title="frag_main.xml源码（Fragment的布局）"></a>frag_main.xml源码（Fragment的布局）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"></div><div class="line">SwipeRefreshLayout是伟大的Google在v4包中给出的下拉刷新组件。</div><div class="line"></div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.SwipeRefreshLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/id_swiperefreshlayout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">            使用RecyclerView需要在build.gradle中添加</div><div class="line">           compile 'com.android.support:recyclerview-v7:22.2.0'</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_recyclerview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.SwipeRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>item_main.xml源码（RecyclerView中item）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    CardView就是一个卡片样式的FrameLayout。</div><div class="line"></div><div class="line">    参数介绍：</div><div class="line">        app:cardBackgroundColor  :   背景颜色</div><div class="line">        app:cardCornerRadius    ：   设置圆角。</div><div class="line">        app:cardElevation       ：    阴影。</div><div class="line">        app:cardMaxElevation    ：       最大阴影。</div><div class="line">        app:cardPreventCornerOverlap  ： 在v20和之前的版本中添加内边距，</div><div class="line">                                    这个属性是为了防止卡片内容和边角的重叠。</div><div class="line"></div><div class="line">       app:cardUseCompatPadding  ：  设置内边距，v21+的版本和之前的版本仍旧具有一样的计算方式</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/id_cardview"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">app:cardBackgroundColor</span>=<span class="string">"@color/main_blue_light"</span></div><div class="line">    <span class="attr">app:cardCornerRadius</span>=<span class="string">"4dp"</span></div><div class="line">    <span class="attr">app:cardElevation</span>=<span class="string">"5dp"</span></div><div class="line">    <span class="attr">app:cardMaxElevation</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">app:cardPreventCornerOverlap</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">app:cardUseCompatPadding</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_textview"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@color/main_white"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>menu_nav.xml的源码（NavagationView中菜单）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_menu_home"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_home_white_48dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"主页"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_menu_categories"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_sort_by_alpha_white_48dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"分类"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_menu_feedback"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_message_white_48dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"反馈"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_menu_setting"</span></div><div class="line">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_settings_white_48dp"</span></div><div class="line">            <span class="attr">android:title</span>=<span class="string">"设置"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>header_nav.xml源码（NavagationView的head）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"220dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@drawable/ic_user_background"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">            一个显示圆形头像的自定义ImageView</div><div class="line">        --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">com.sunjiajia.androidnewwidgetsdemo.view.RoundedImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_header_face"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"110dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"110dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/author"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_header_authorname"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/header_author_name"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/id_header_url"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/header_author_url"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><p>Java代码写法比较简单，这里只给出RecyclerView.Adapter的写法（包括item点击事件）。</p>
<h3 id="RecyclerView-Adapter写法源码"><a href="#RecyclerView-Adapter写法源码" class="headerlink" title="RecyclerView.Adapter写法源码"></a>RecyclerView.Adapter写法源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sunjiajia.androidnewwidgetsdemo.adapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sunjiajia.androidnewwidgetsdemo.R;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Monkey on 2015/6/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyRecyclerViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 点击事件接口</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> OnItemClickListener mOnItemClickListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mOnItemClickListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> Context mContext;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; mDatas;</div><div class="line">    <span class="keyword">public</span> LayoutInflater mLayoutInflater;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRecyclerViewAdapter</span><span class="params">(Context mContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = mContext;</div><div class="line">        mLayoutInflater = LayoutInflater.from(mContext);</div><div class="line">        <span class="comment">// 这里是模拟数据。</span></div><div class="line">        mDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="string">'A'</span>; i &lt;= <span class="string">'z'</span>; i++) &#123;</div><div class="line">            mDatas.add((<span class="keyword">char</span>) i + <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ViewHolder</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyRecyclerViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View mView = mLayoutInflater.inflate(R.layout.item_main, parent, <span class="keyword">false</span>);</div><div class="line">        MyRecyclerViewHolder mViewHolder = <span class="keyword">new</span> MyRecyclerViewHolder(mView);</div><div class="line">        <span class="keyword">return</span> mViewHolder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定ViewHoler，给item中的控件设置数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> MyRecyclerViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//点击事件在这里实现，主要是利用RecyclerView中填充的布局控件可以被点击这个原理</span></div><div class="line">        <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    mOnItemClickListener.onItemClick(holder.itemView, position);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">// 长点击事件</span></div><div class="line">            holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    mOnItemClickListener.onItemLongClick(holder.itemView, position);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        holder.mTextView.setText(mDatas.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="MyRecyclerViewHolder-java源码"><a href="#MyRecyclerViewHolder-java源码" class="headerlink" title="MyRecyclerViewHolder.java源码"></a>MyRecyclerViewHolder.java源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sunjiajia.androidnewwidgetsdemo.adapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.sunjiajia.androidnewwidgetsdemo.R;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Monkey on 2015/6/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRecyclerViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(itemView);</div><div class="line">        mTextView = (TextView) itemView.findViewById(R.id.id_textview);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>在源码中学习Android，是有种身临其境的感觉的。</p>
<p>整个Demo的源码我放在了GitHub上，谢谢star一下~<br>在看源码过程中如果发现什么问题，请在留言，看到一定回复。</p>
<p>源码地址：<br><a href="https://github.com/git0pen/AndroidNewWidgetsDemo" target="_blank" rel="external">AndroidNewWidgetsDemo</a></p>
<p>原文地址：<a href="http://sunjiajia.com/2015/07/02/android-new-widgets-demo/" target="_blank" rel="external">http://sunjiajia.com/2015/07/02/android-new-widgets-demo/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:伟大的Google为Android推出了一系列的兼容包，最新的就是Design Support Library了，这里我们结合v7和v4中的几个控件，来主要学习Design Support Library中的几个新控件！一个Demo学会用它们！&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://hui46226021.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://hui46226021.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转载" scheme="https://hui46226021.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="support v7 新控件" scheme="https://hui46226021.github.io/tags/support-v7-%E6%96%B0%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
</feed>
