<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独角兽之路</title>
  <subtitle>到了汉堡，我们每天必须演足8小时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://3431339973.github.io/"/>
  <updated>2018-05-01T18:04:19.071Z</updated>
  <id>https://3431339973.github.io/</id>
  
  <author>
    <name>Harlan Zhush</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯管家耍流氓后gradle起不来进程</title>
    <link href="https://3431339973.github.io/2017/04/18/%E8%85%BE%E8%AE%AF%E5%85%B3%E9%94%AE%E8%80%8D%E6%B5%81%E6%B0%93%E5%90%8Egradle%E8%B5%B7%E4%B8%8D%E6%9D%A5%E8%BF%9B%E7%A8%8B/"/>
    <id>https://3431339973.github.io/2017/04/18/腾讯关键耍流氓后gradle起不来进程/</id>
    <published>2017-04-18T13:37:23.000Z</published>
    <updated>2018-05-01T18:04:19.071Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:今天早上手贱，不知道啥时候电脑上出现个腾讯电脑管家的图标，心想着 既然来了就是缘分，随手就清理下垃圾，点了下优化。然后就卸了。之后打开android studio打算开始工作。可是 项目运行不起来了。</p>
<p>gradle报错<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Gradle sync failed: Unable to start the daemon process.</div><div class="line">		This problem might be caused by incorrect configuration of the daemon.</div><div class="line">		For example, an unrecognized jvm option is used.</div><div class="line">		Please refer to the user guide chapter on the daemon at https://docs.gradle.org/3.3/userguide/gradle_daemon.html</div><div class="line">		Please read the following process output to find out more:</div><div class="line">		-----------------------</div><div class="line">		Consult IDE log for more details (Help | Show Log) (7s 617ms)</div></pre></td></tr></table></figure>
<p>确实是之前没遇到过，凭经看 看是gradle进程运行不起来，又提示JVM相关错误，心想应该是 那里内存不够了<br>之后 百度下 ，别说！答案还不少，看来很多人都遇到过这种错误。看了几篇博客，更验证了我的想法，没错 内存的问题。修开访法基本都是<br>在gradle.properties里添加 org.gradle.jvmargs=-Xmx512m 等等，但是但是但是 我修改后 完全没有用，有点慌了  下午领导还要演示呢 ，怎么办 怎么办。<br>病急乱投医，卸了as重装，没用<br>删了gradle 重下，没用<br>重启电脑，没有<br>一阵激情过后<br>——————————————————————————————————</p>
<p>我是不是得看看错误日志，不然在这吓忙活啥，果断找到 .gradle下的 日志文件</p>
<p>看到报错第地方</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">10:38:44.426 [DEBUG] [org.gradle.launcher.daemon.server.DaemonRegistryUpdater] Advertised daemon context: DefaultDaemonContext[uid=85cf539f-07f3-4690-85c7-5d370f783767,javaHome=C:\Program Files\Android\Android Studio2\jre,daemonRegistryDir=F:\.gradle\daemon,pid=4280,idleTimeout=10800000,daemonOpts=-Xmx1536m,-Dfile.encoding=GBK,-Duser.country=CN,-Duser.language=zh,-Duser.variant]</div><div class="line">10:38:44.427 [DEBUG] [org.gradle.launcher.daemon.registry.PersistentDaemonRegistry] Storing daemon address: [4930f1ca-e060-49ef-907d-0fad236aad1c port:49617, addresses:[/127.0.0.1]], context: DefaultDaemonContext[uid=85cf539f-07f3-4690-85c7-5d370f783767,javaHome=C:\Program Files\Android\Android Studio2\jre,daemonRegistryDir=F:\.gradle\daemon,pid=4280,idleTimeout=10800000,daemonOpts=-Xmx1536m,-Dfile.encoding=GBK,-Duser.country=CN,-Duser.language=zh,-Duser.variant]</div><div class="line">10:38:44.438 [ERROR] [system.err] </div><div class="line">10:38:44.438 [ERROR] [system.err] FAILURE: Build failed with an exception.</div><div class="line">10:38:44.439 [ERROR] [system.err] </div><div class="line">10:38:44.439 [ERROR] [system.err] * What went wrong:</div><div class="line">10:38:44.439 [ERROR] [system.err] java.net.SocketException: Bad address: Cannot bind</div><div class="line">10:38:44.439 [ERROR] [system.err] </div><div class="line">10:38:44.439 [ERROR] [system.err] * Try:</div><div class="line">10:38:44.439 [ERROR] [system.err] Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class="line">10:38:44.440 [ERROR] [system.err] </div><div class="line">10:38:44.440 [ERROR] [system.err] * Get more help at https://help.gradle.org</div><div class="line">Daemon vm is shutting down... The daemon has exited normally or was terminated in response to a user interrupt.</div><div class="line">10:38:44.442 [DEBUG] [org.gradle.launcher.daemon.registry.PersistentDaemonRegistry] Removing daemon address: [4930f1ca-e060-49ef-907d-0fad236aad1c port:49617, addresses:[/127.0.0.1]]</div><div class="line">10:38:44.443 [DEBUG] [org.gradle.launcher.daemon.server.Daemon] VM shutdown hook was unable to remove the daemon address from the registry. It will be cleaned up later.</div><div class="line">org.gradle.api.UncheckedIOException: java.net.SocketException: Bad address: Cannot bind</div><div class="line">	at org.gradle.internal.UncheckedException.throwAsUncheckedException(UncheckedException.java:57)</div><div class="line">	at org.gradle.internal.UncheckedException.throwAsUncheckedException(UncheckedException.java:40)</div><div class="line">	at org.gradle.cache.internal.FileLockCommunicator.&lt;init&gt;(FileLockCommunicator.java:49)</div><div class="line">	at org.gradle.cache.internal.locklistener.DefaultFileLockContentionHandler.getCommunicator(DefaultFileLockContentionHandler.java:153)</div><div class="line">	at org.gradle.cache.internal.locklistener.DefaultFileLockContentionHandler.reservePort(DefaultFileLockContentionHandler.java:145)</div><div class="line">	at org.gradle.cache.internal.DefaultFileLockManager.lock(DefaultFileLockManager.java:91)</div><div class="line">	at org.gradle.cache.internal.DefaultFileLockManager.lock(DefaultFileLockManager.java:79)</div><div class="line">	at org.gradle.cache.internal.OnDemandFileAccess.updateFile(OnDemandFileAccess.java:45)</div><div class="line">	at org.gradle.cache.internal.SimpleStateCache.update(SimpleStateCache.java:80)</div><div class="line">	at org.gradle.cache.internal.FileIntegrityViolationSuppressingPersistentStateCacheDecorator$1.create(FileIntegrityViolationSuppressingPersistentStateCacheDecorator.java:46)</div><div class="line">	at org.gradle.cache.internal.FileIntegrityViolationSuppressingPersistentStateCacheDecorator.doUpdate(FileIntegrityViolationSuppressingPersistentStateCacheDecorator.java:63)</div><div class="line">	at org.gradle.cache.internal.FileIntegrityViolationSuppressingPersistentStateCacheDecorator.update(FileIntegrityViolationSuppressingPersistentStateCacheDecorator.java:43)</div><div class="line">	at org.gradle.launcher.daemon.registry.PersistentDaemonRegistry.remove(PersistentDaemonRegistry.java:127)</div><div class="line">	at org.gradle.launcher.daemon.server.Daemon$1.run(Daemon.java:127)</div><div class="line">	at org.gradle.process.internal.shutdown.ShutdownHookActionRegister$GradleShutdownHook.run(ShutdownHookActionRegister.java:41)</div><div class="line">	at java.lang.Thread.run(Thread.java:745)</div><div class="line">Caused by: java.net.SocketException: Bad address: Cannot bind</div><div class="line">	at java.net.DualStackPlainDatagramSocketImpl.socketBind(Native Method)</div><div class="line">	at java.net.DualStackPlainDatagramSocketImpl.bind0(DualStackPlainDatagramSocketImpl.java:84)</div><div class="line">	at java.net.AbstractPlainDatagramSocketImpl.bind(AbstractPlainDatagramSocketImpl.java:93)</div><div class="line">	at java.net.DatagramSocket.bind(DatagramSocket.java:392)</div><div class="line">	at java.net.DatagramSocket.&lt;init&gt;(DatagramSocket.java:242)</div><div class="line">	at java.net.DatagramSocket.&lt;init&gt;(DatagramSocket.java:299)</div><div class="line">	at org.gradle.cache.internal.FileLockCommunicator.&lt;init&gt;(FileLockCommunicator.java:47)</div><div class="line">	... 13 more</div></pre></td></tr></table></figure>
<p>这里面提示 java.net.SocketException: Bad address: Cannot bind</p>
<p>是socket连接上的错误 看到错误地址的端口是 49617，难道是有什么进程 根他冲突了吗，果断 cmd 去查端口，结果是没找到。<br>继续看日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VM shutdown hook was unable to remove the daemon address from the registry. It will be cleaned up later.</div></pre></td></tr></table></figure>
<p>然后 腾讯关机搞我的注册表了吗，排查下，最后也是没看出下什么名堂。<br>看着表眼看快下午了 等不了了，既然是socket的错误，是不是腾讯管家 搞了我的网络配置。他能搞哪 猜不出来，不管了 恢复下  </p>
<p>cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh winsock reset</div></pre></td></tr></table></figure>
<p>提示重启电脑生效，重启电脑，启动as，编译通过。</p>
<p>最后就想嘱咐下，好奇害死猫 千万别手贱 去尝试那些 流氓软件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:今天早上手贱，不知道啥时候电脑上出现个腾讯电脑管家的图标，心想着 既然来了就是缘分，随手就清理下垃圾，点了下优化。然后就卸了。之后打开android studio打算开始工作。可是 项目运行不起来了。&lt;/p&gt;
&lt;p&gt;gradle报错&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="系统" scheme="https://3431339973.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ShAndroidHttpService 在android设备上跑一个Http服务器</title>
    <link href="https://3431339973.github.io/2017/03/21/20170312/"/>
    <id>https://3431339973.github.io/2017/03/21/20170312/</id>
    <published>2017-03-21T09:35:17.000Z</published>
    <updated>2017-10-22T12:08:58.511Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近公司在开发一款类似智能家居的硬件项目，需要内网和服务器做交互，同时也需要服务器去操作客户端硬件，考虑到服务器终端。各方面性能比较差，也不想用长连接，所以干脆在android设备上也跑了一个service 给服务端提供http接口来调用，所以封装了这个库，为了让后端人员能直接上手，所以配置方法，和注解，都模仿了SpringMVC</p>
<a id="more"></a>
<h1 id="ShAndroidHttpService"><a href="#ShAndroidHttpService" class="headerlink" title="ShAndroidHttpService"></a>ShAndroidHttpService</h1><p>Android http服务器</p>
<p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>code.zsh.sh.com.shandroidhttpservice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httplib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'code.zsh.sh.com.shandroidhttpservice:httplib:1.0.0'</span></div></pre></td></tr></table></figure></p>
<p>启动http服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WebServer  webServer = <span class="keyword">new</span> WebServer(PORT);</div><div class="line">        <span class="comment">//配置controller 集合</span></div><div class="line">        webServer.setControllerName(getClassName(CONTROLLER));</div><div class="line">        <span class="comment">//配置拦截器 集合</span></div><div class="line">        webServer.setInterceptPName(getClassName(INTERCEPTS));</div><div class="line">        webServer.setDaemon(<span class="keyword">true</span>);</div><div class="line">        webServer.start();</div></pre></td></tr></table></figure>
<h2 id="ShInterceptor-拦截器"><a href="#ShInterceptor-拦截器" class="headerlink" title="ShInterceptor  拦截器"></a>ShInterceptor  拦截器</h2><p>继承ShInterceptor  实现preHandle 和postHandle 方法<br>前着在收到请求前调用  后者在完成请求后调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpIntercepts</span> <span class="keyword">implements</span> <span class="title">ShInterceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpRequest request, HttpResponse response, HttpContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String target = URLDecoder.decode(request.getRequestLine().getUri(),</div><div class="line">                    <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">            Log.e(<span class="string">"url="</span>, target);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpRequest request, HttpResponse response, HttpContext context)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Controller-Action"><a href="#Controller-Action" class="headerlink" title="Controller  Action"></a>Controller  Action</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>改controller的作用域，</p>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>调用的action<br>下面的写法最终生成的地址  xxx.xxx.xxx.xxx:xxxx/api/getphoneinof<br>返回值以json类型返回<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>(space = <span class="string">"/api"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/getphoneinof"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResultModel <span class="title">getPhoneInof</span><span class="params">()</span>  </span>&#123;</div><div class="line">         ResultModel resultModel = <span class="keyword">new</span> ResultModel(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> resultModel;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>在方法的前面加上@Requestparam 即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/toast"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> ResultModel <span class="title">toast</span><span class="params">(@Requestparam(<span class="string">"message"</span>)</span> String message)  </span>&#123;</div><div class="line">     ResultModel resultModel = <span class="keyword">new</span> ResultModel(<span class="keyword">true</span>);</div><div class="line">     MainActivity.mainActivity.toast(message);</div><div class="line">     <span class="keyword">return</span> resultModel;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>项目地址 <a href="https://github.com/hui46226021/ShAndroidHttpService" target="_blank" rel="external">https://github.com/hui46226021/ShAndroidHttpService</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近公司在开发一款类似智能家居的硬件项目，需要内网和服务器做交互，同时也需要服务器去操作客户端硬件，考虑到服务器终端。各方面性能比较差，也不想用长连接，所以干脆在android设备上也跑了一个service 给服务端提供http接口来调用，所以封装了这个库，为了让后端人员能直接上手，所以配置方法，和注解，都模仿了SpringMVC&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="http" scheme="https://3431339973.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Android表单映射框架 SHFormLayout 快速生成表单布局</title>
    <link href="https://3431339973.github.io/2017/03/17/ShFormLayout/"/>
    <id>https://3431339973.github.io/2017/03/17/ShFormLayout/</id>
    <published>2017-03-17T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:27.948Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架<br><a id="more"></a></p>
<h1 id="ShFormUtils"><a href="#ShFormUtils" class="headerlink" title="ShFormUtils"></a>ShFormUtils</h1><h1 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h1><p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shform:3.2.2'</span></div></pre></td></tr></table></figure></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="表单对象映射"><a href="#表单对象映射" class="headerlink" title="表单对象映射"></a>表单对象映射</h2><ul>
<li>1.页面实现 FormCheckInterface 接口   改接口 是页面表单检查的回调 下面有介绍</li>
<li><p>2.开启表单注入 FormInit.injection(this);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_main);</div><div class="line">      nameEdit = (EditText) findViewById(R.id.name);</div><div class="line">      phoneEdit = (EditText) findViewById(R.id.phone);</div><div class="line">      professionEdit = (EditText) findViewById(R.id.profession);</div><div class="line">      spinner = (Spinner) findViewById(R.id.spinner);</div><div class="line">      married = (CheckBox) findViewById(R.id.married);</div><div class="line">      party = (CheckBox) findViewById(R.id.party);</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * 初始化表单注入  要在 所有控件初始化成功后 调用</div><div class="line">       */</div><div class="line">      FormInit.injection(<span class="keyword">this</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>3.在 onDestroy 里 注销 表单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 注销表单</div><div class="line"> */</div><div class="line">FormInit.deleteInjection(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>4.通过 @FormInjection 绑定控件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * name 对应 实体类 字段名</div><div class="line"> * message 参数为空的时候 默认提示 的字符串</div><div class="line"> * isNull  该字段是否可以为空  默认 false</div><div class="line"> */</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"name"</span>, message = <span class="string">"名字"</span>,isNull = <span class="keyword">true</span>)</div><div class="line">  EditText nameEdit;</div><div class="line">  <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line">  EditText phoneEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line">  EditText professionEdit;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"workingLife"</span>, message = <span class="string">"工作时间"</span>)</div><div class="line">  Spinner spinner;</div><div class="line">  <span class="meta">@FormInjection</span>(name = <span class="string">"married"</span>)</div><div class="line">  CheckBox married;</div></pre></td></tr></table></figure>
</li>
<li><p>4.调用映射方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 表单自动生成对象</div><div class="line">  */</div><div class="line"> UserModel userModel = FormUtls.formToObjectAndCheck(<span class="keyword">this</span>,UserModel.class);</div><div class="line"><span class="comment">/**</span></div><div class="line">  * 实体对象 映射到表单 返回true 表示映射成功</div><div class="line">  */</div><div class="line"> FormUtls.objectToForm(<span class="keyword">this</span>,userModel);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="表单参数检查"><a href="#表单参数检查" class="headerlink" title="表单参数检查"></a>表单参数检查</h2><pre><code>* 1.使用 @FormCheck
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//type 是 验证类型枚举   默认 是自定义验证</span></div><div class="line"> <span class="meta">@FormCheck</span>(type = CheckType.Phone)</div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"phone"</span>, message = <span class="string">"电话"</span>)</div><div class="line"> EditText phoneEdit;</div><div class="line"> <span class="meta">@FormCheck</span></div><div class="line"> <span class="meta">@FormInjection</span>(name = <span class="string">"profession"</span>, message = <span class="string">"公司-职业"</span>)</div><div class="line"> EditText professionEdit;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 通过 实现 FormCheckInterface 接口的 formCheck</div><div class="line">      * 自定定义 表单检查 默认要返回true</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@return</span></div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">formCheck</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">         <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">             <span class="keyword">case</span> R.id.profession:</div><div class="line">                 <span class="keyword">if</span>(!(professionEdit.getText()+<span class="string">""</span>).contains(<span class="string">"-"</span>))&#123;</div><div class="line">                     Toast.makeText(<span class="keyword">this</span>,<span class="string">"职业格式不正确"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line">      * 表单检查 不合法回调</div><div class="line">      * <span class="doctag">@param</span> v</div><div class="line">      * <span class="doctag">@param</span> message</div><div class="line">      */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">formCheckNullCall</span><span class="params">(View v, String message)</span> </span>&#123;</div><div class="line">         Toast.makeText(<span class="keyword">this</span>,message,Toast.LENGTH_SHORT).show();</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h4 id="验证类型"><a href="#验证类型" class="headerlink" title="验证类型"></a>验证类型</h4><pre><code>CUSTOM,//自定义
PHONE,//手机号
EMAIL,//邮箱
CHINESE,//中文
IDCARD,//身份证
ISDATA,//“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年
AMOUNT_MONEY,//金额校验，精确到2位小数
AMOUNT,//存数字
URL,//Url
PASSWORD;//密码强度 是不是6至12位字母组合
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>    
<h2 id="快速生成表单布局-ShFormLayout"><a href="#快速生成表单布局-ShFormLayout" class="headerlink" title="快速生成表单布局 ShFormLayout"></a>快速生成表单布局 ShFormLayout</h2><p>ShFormLayout 可以在使用 系统控件的基础上 实现快速生成表单布局 样式</p>
<p><img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/3.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;com.sh.zsh.code.layout.ShFormLayout</div><div class="line">  &lt;!--该布局 需要在这确定 每行的高度 --&gt;</div><div class="line">              app:less_form_row_height="50dp"</div><div class="line">             android:layout_width="match_parent"</div><div class="line">             android:layout_height="wrap_content"&gt;</div><div class="line">             &lt;TextView</div><div class="line">                 &lt;!--这里表明 这个控件 只是用于显示标题--&gt;</div><div class="line">                 app:less_form_group_titel="true"</div><div class="line">                 android:text="基本信息"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="wrap_content" /&gt;</div><div class="line">             &lt;EditText</div><div class="line">                 &lt;!--该行的标题--&gt;</div><div class="line">                 app:less_form_title="姓名"</div><div class="line">                 &lt;!--该行对应的字段名--&gt;</div><div class="line">                 app:less_form_name="name"</div><div class="line">                 &lt;!--该行是否必填--&gt;</div><div class="line">                 app:less_form_must="true"</div><div class="line">                  android:layout_height="wrap_content"</div><div class="line">                  android:layout_width="match_parent"</div><div class="line">                /&gt;</div><div class="line"></div><div class="line">             &lt;EditText</div><div class="line">                 app:less_form_title="电话"</div><div class="line">                 &lt;!--该行的验证方式--&gt;</div><div class="line">                 app:less_form_check_type="phone"</div><div class="line">                 app:less_form_name="phone"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true"</div><div class="line">                 /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/company"</div><div class="line">                 app:less_form_title="公司"</div><div class="line">                 app:less_form_name="company"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormSpinner</div><div class="line">                 android:id="@+id/department"</div><div class="line">                 app:less_form_title="部门"</div><div class="line">                 app:less_form_name="department"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;com.sh.zsh.code.layout.view.FormTimeView</div><div class="line">                 app:less_form_title="出生日期"</div><div class="line">                 app:less_form_name="birthday"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;CheckBox</div><div class="line">                 app:less_form_title="男性："</div><div class="line">                 app:less_form_name="sex"</div><div class="line">                 android:layout_height="wrap_content"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 app:less_form_must="true" /&gt;</div><div class="line"></div><div class="line">             &lt;LinearLayout</div><div class="line">                 app:less_form_group_top_layout="true"</div><div class="line">                 android:layout_width="match_parent"</div><div class="line">                 android:layout_height="150dp"</div><div class="line">                 android:background="@color/white"</div><div class="line">                 android:orientation="horizontal"&gt;</div><div class="line">                 &lt;TextView</div><div class="line">                     android:layout_width="wrap_content"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="18dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:text="签名" /&gt;</div><div class="line"></div><div class="line">                 &lt;EditText</div><div class="line">                     android:id="@+id/sign"</div><div class="line">                     android:gravity="top"</div><div class="line">                     android:layout_width="match_parent"</div><div class="line">                     android:layout_height="match_parent"</div><div class="line">                     android:layout_margin="16dp"</div><div class="line">                     android:padding="5dp"</div><div class="line">                     android:textSize="@dimen/form_text_size"</div><div class="line">                     android:background="@drawable/bg_text_factoryaudit"</div><div class="line">                     android:hint="多行输入" /&gt;</div><div class="line">             &lt;/LinearLayout&gt;</div><div class="line">         &lt;/com.sh.zsh.code.layout.ShFormLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShFormUtils/master/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>快看，你不需要去关心 每一行的样式，高度 只需要确定这一行是 TextView  或是EditText 等控件  就可以了<br>我们来看一下  框架都提供了 哪些表单属性 供我们使用</p>
<ul>
<li>ShFormLayout  <br><br>less_form_row_height  表单每行的 高度</li>
<li>内部控件<br><br>less_form_title   名称<br><br>less_form_title_image  设置名称左侧的icon<br><br>less_form_can_click    该行是否显示 右侧箭头<br><br>less_form_must         该字段是否必填<br><br>less_form_name        该字段对应实体类的字段名称<br><br>less_form_is_null     该字段是否可以为空<br><br>less_form_bottomLine  该行是否显示底部横线<br>less_form_check_type  检查类型<br>less_form_group_titel 该组表单的标题 （上面的例子里 基本信息 那一行）<br>less_form_group_top_layout  改控件不 参与表单映射 和布局生成（上面的例子里签名 那个布局）</li>
<li>FormTimeView  时间控件<br><br>less_time_is_time  时间控件的格式（all，year_month_day，hours_mins，month_day_hour_min，year_month）<br></li>
<li>FormSpinner  选择器  用法参考Demo<br><br>less_form_spi_sel 默认选中第一项</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShFormUtils" target="_blank" rel="external">https://github.com/hui46226021/ShFormUtils</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:由于公司业务 有大量表单页面的需求 故独立封装一套表单映射 布局框架&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://3431339973.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Form" scheme="https://3431339973.github.io/tags/Form/"/>
    
      <category term="框架" scheme="https://3431339973.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="表单映射" scheme="https://3431339973.github.io/tags/%E8%A1%A8%E5%8D%95%E6%98%A0%E5%B0%84/"/>
    
      <category term="自定义View" scheme="https://3431339973.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoDemo android 适配录制，压缩</title>
    <link href="https://3431339973.github.io/2017/02/18/ShVideoDemo%20android%20%E9%80%82%E9%85%8D%E5%BD%95%E5%88%B6%EF%BC%8C%E5%8E%8B%E7%BC%A9/"/>
    <id>https://3431339973.github.io/2017/02/18/ShVideoDemo android 适配录制，压缩/</id>
    <published>2017-02-18T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:37.769Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）<br><a id="more"></a></p>
<h1 id="ShVideoDemo"><a href="#ShVideoDemo" class="headerlink" title="ShVideoDemo"></a>ShVideoDemo</h1><p>Android 视频录制Demo 防微信小视频 视频压缩（FFmpeg）</p>
<p>#Download</p>
<p>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.shvideo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideolibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.shvideo:shvideolibrary:1.0.3'</span></div></pre></td></tr></table></figure></p>
<font color="#ff0022ff" size="7" face="黑体">注意:targetSdkVersion 23 及以上 要注意 6.0运行时权限 或干脆用23以下</font>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShVideoDemo/master/1.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoDemo" target="_blank" rel="external">https://github.com/hui46226021/ShVideoDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频录制Demo 仿微信小视频 视频压缩（FFmpeg）&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://3431339973.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频压缩" scheme="https://3431339973.github.io/tags/%E8%A7%86%E9%A2%91%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="视频录制" scheme="https://3431339973.github.io/tags/%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2.0 - 网络请求库 注解 详解</title>
    <link href="https://3431339973.github.io/2017/01/01/Retrofit2.0/"/>
    <id>https://3431339973.github.io/2017/01/01/Retrofit2.0/</id>
    <published>2017-01-01T04:32:21.000Z</published>
    <updated>2017-10-01T12:50:24.642Z</updated>
    
    <content type="html"><![CDATA[<p>Retrofit基于注解和动态代理，优化了Android中的网络请求操作。<br><a id="more"></a></p>
<h1 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h1><h2 id="这篇笔记基于Retrofit-1-9。"><a href="#这篇笔记基于Retrofit-1-9。" class="headerlink" title="这篇笔记基于Retrofit 1.9。"></a>这篇笔记基于Retrofit 1.9。</h2><p><img src="https://static.oschina.net/uploads/img/201701/19105443_jXYF.png" alt=""></p>
<p>从上图可见，对Retrofit的使用可以分成三部分：</p>
<ul>
<li>1.建立POJO或者Model Class<br>服务端返回给客户端的数据一般都是JSON格式，所以可以利用GSON或其他库把JSON直接转换成一个对象。POJO或这个Model Class就是这个对象的类。</li>
<li>2.定义REST API Interface<br>定义一个Interface，声明我们需要的网络请求方法。<br>例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">       <span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line">       <span class="function">List&lt;Repo&gt; <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Repo，就是第一步中定义的POJO或者Model Class。Retrofit框架会自动把服务端返回的JSON数据，转换成Repo。Retrofit默认采用GSON库。</p>
<ul>
<li>3.RestAdapter<br>RestAdapter用来配置网络请求的参数，并且生成一个接口的实现。<br>配置请求参数：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">             .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">             .setClient(<span class="keyword">new</span> OkClient(<span class="keyword">new</span> OkHttpClient()))</div><div class="line">             .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生成接口的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHubService service = restAdapter.create(GitHubService.class);</div></pre></td></tr></table></figure></p>
<p>以上三步完成后，调用接口函数完成与服务器的交互：</p>
<p>List<repo> repos = service.listRepos(“octocat”);</repo></p>
<p>请求方法</p>
<p>Retrofit框架提供了很多注解，其中HTTP注解有五个，用来修饰请求方法（还可以顺便处理URL路径）：</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
<li>HEAD<br>这五个注解正好涵盖了数据的增删改查方法，符合REST标准。每一个请求方法都必须要由这五个注解中的一个修饰。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以在注解中添加查询参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/list?sort=desc"</span>)</div></pre></td></tr></table></figure></p>
<p>URL处理</p>
<ul>
<li><p>@Path - 替换参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@Query - 添加查询参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @<span class="title">Query</span><span class="params">(<span class="string">"sort"</span>)</span> String sort)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>@QueryMap - 如果有多个查询参数，把它们放在Map中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/group/&#123;id&#125;/users"</span>)</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">groupList</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> groupId, @QueryMap Map&lt;String, String&gt; options)</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h2><p>请求体（RequestBody），一般用于POST方法传递请求参数。<br>@Body<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/users/new"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@Body User user, Call&lt;User&gt; call)</span></span>;</div></pre></td></tr></table></figure></p>
<p>参数会被指定的转换器转换成字符串或字节流提交到服务器，如果没有指定转换器，Retrofit将会默认使用RequestBody。</p>
<h2 id="FORM-ENCODED-表单-And-MULTIPART"><a href="#FORM-ENCODED-表单-And-MULTIPART" class="headerlink" title="FORM ENCODED(表单) And MULTIPART"></a>FORM ENCODED(表单) And MULTIPART</h2><ul>
<li>FORM ENCODED</li>
</ul>
<p>使用 @FormUrlEncoded 修饰请求方法，可以把表单数据提交到服务端。<br>用 @Field 修饰key-value对。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"/user/edit"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Field(<span class="string">"first_name"</span>)</span> String first, @<span class="title">Field</span><span class="params">(<span class="string">"last_name"</span>)</span> String last)</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>MULTIPART</li>
</ul>
<p>使用 @Multipart 修饰请求方法，@Part 修饰每一个Part<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@PUT</span>(<span class="string">"/user/photo"</span>)</div><div class="line"><span class="function">User <span class="title">updateUser</span><span class="params">(@Part(<span class="string">"photo"</span>)</span> TypedFile photo, @<span class="title">Part</span><span class="params">(<span class="string">"description"</span>)</span> TypedString description)</span>;</div></pre></td></tr></table></figure></p>
<p>Multipart 中的Part使用 RestAdapter 的转换器来转换，也可以实现 TypedOutput 自己处理序列化。</p>
<p>Multipart主要用来上传文件吗？如果是，具体操作又是如何？ 答案在这里</p>
<h2 id="配制HEADER"><a href="#配制HEADER" class="headerlink" title="配制HEADER"></a>配制HEADER</h2><p>用 @Headers 设置Http请求的header。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/widget/list"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">widgetList</span><span class="params">(Call&lt;List&lt;Widget&gt;&gt; call)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Headers</span>(&#123;</div><div class="line">    <span class="string">"Accept: application/vnd.github.v3.full+json"</span>,</div><div class="line">    <span class="string">"User-Agent: Retrofit-Sample-App"</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;username&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Path(<span class="string">"username"</span>)</span> String username, Call&lt;User&gt;)</span>;</div></pre></td></tr></table></figure></p>
<p>Http请求头不会互相覆盖，如果存在多个请求头的名字相同，那么它们全部都会被包含在Http请求中。</p>
<h2 id="动态更新HEADER"><a href="#动态更新HEADER" class="headerlink" title="动态更新HEADER"></a>动态更新HEADER</h2><ul>
<li>在请求方法的参数中，用 @Header 动态更新Http请求头<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">(@Header(<span class="string">"Authorization"</span>)</span> String authorization, Call&lt;User&gt; call)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数不能为null，否则这个header将会被删掉。</p>
<ul>
<li>在RestAdapter中，利用RequestInterceptor动态更新Header<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RequestInterceptor requestInterceptor = <span class="keyword">new</span> RequestInterceptor() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">intercept</span><span class="params">(RequestFacade request)</span> </span>&#123;</div><div class="line">      request.addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Retrofit-Sample-App"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</div><div class="line">  .setEndpoint(<span class="string">"https://api.github.com"</span>)</div><div class="line">  .setRequestInterceptor(requestInterceptor)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>每个请求方法都可以定义成同步或者异步。</p>
<ul>
<li>同步</li>
</ul>
<p>同步方法有返回值，且参数中不包含回调<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line">~~</div><div class="line">* 异步</div><div class="line"></div><div class="line">异步方法没有返回值，且最后一个参数须是Callback对象</div><div class="line">~~~java</div><div class="line">    @GET("/users/&#123;user&#125;/repos")</div><div class="line">    void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div><div class="line">~~</div><div class="line">在Android中，callbacks将会在主线程中调用。在普通Java程序中，callbacks将会在执行HTTP请求方法的那个线程中调用。</div><div class="line"></div><div class="line">## 处理服务器返回结果</div><div class="line"></div><div class="line">RestAdapter中的转换器会把服务器的返回结果（一般为JSON）转换成我们在函数返回值或Callback接口中定义的Java对象。</div><div class="line">~~~java</div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          List&lt;Repo&gt; listRepos(@Path("user") String user);</div><div class="line"></div><div class="line">          @GET("/users/&#123;user&#125;/repos")</div><div class="line">          void listRepos(@Path("user") String user, Callback&lt;List&lt;Repo&gt;&gt; call);</div></pre></td></tr></table></figure></p>
<p>List<repo>,就是将要被转换成的Java对象。</repo></p>
<h2 id="直接获取返回体"><a href="#直接获取返回体" class="headerlink" title="直接获取返回体"></a>直接获取返回体</h2><p>如果要直接获取服务器返回的HTTP返回体，在返回值或callback中直接使用 Response对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function">Response <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user)</span>;</div><div class="line"></div><div class="line"><span class="meta">@GET</span>(<span class="string">"/users/&#123;user&#125;/repos"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">listRepos</span><span class="params">(@Path(<span class="string">"user"</span>)</span> String user, Callback&lt;Response&gt; call)</span>;</div></pre></td></tr></table></figure></p>
<p>参考链接:</p>
<p>官方文档：<a href="square.github.io/retrofit/">不过是Retrofit2.0</a><br>中文文档：<a href="blog.chengyunfeng.com/?p=491&amp;utm_source=tuicool&amp;utm_medium=referral">这个是Retrofit1.9</a><br>源码解析：[<a href="http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/" target="_blank" rel="external">http://frodoking.github.io/2015/05/16/android-retrofit/](http://frodoking.github.io/2015/05/16/</a></p>
<h2 id="原文地址：http-www-jianshu-com-p-63723f593695"><a href="#原文地址：http-www-jianshu-com-p-63723f593695" class="headerlink" title="原文地址：http://www.jianshu.com/p/63723f593695"></a>原文地址：<a href="http://www.jianshu.com/p/63723f593695" target="_blank" rel="external">http://www.jianshu.com/p/63723f593695</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Retrofit基于注解和动态代理，优化了Android中的网络请求操作。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://3431339973.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Retrofit2.0" scheme="https://3431339973.github.io/tags/Retrofit2-0/"/>
    
      <category term="网络访问" scheme="https://3431339973.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp源码分析学习（2）5个拦截器</title>
    <link href="https://3431339973.github.io/2016/11/22/okhttp2/"/>
    <id>https://3431339973.github.io/2016/11/22/okhttp2/</id>
    <published>2016-11-22T14:15:31.000Z</published>
    <updated>2017-10-21T11:47:05.877Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:昨天分析okhttp的请求流程，今天来分析下这几个拦截器</p>
<a id="more"></a>
<p>各种拦截器</p>
<h2 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h2><p>直接上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = chain.request();</div><div class="line">    <span class="comment">//初始化连接对象            </span></div><div class="line">    streamAllocation = <span class="keyword">new</span> StreamAllocation(</div><div class="line">        client.connectionPool(), createAddress(request.url()));</div><div class="line"></div><div class="line">    <span class="keyword">int</span> followUpCount = <span class="number">0</span>;</div><div class="line">    Response priorResponse = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </div><div class="line">      <span class="keyword">if</span> (canceled) &#123;</div><div class="line">        streamAllocation.release();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Response response = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">boolean</span> releaseConnection = <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">//继续下一个拦截器</span></div><div class="line">        response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        releaseConnection = <span class="keyword">false</span>;</div><div class="line">      &#125; <span class="keyword">catch</span> (RouteException e) &#123;</div><div class="line">        <span class="comment">// The attempt to connect via a route failed. The request will not have been sent.</span></div><div class="line">        <span class="keyword">if</span> (!recover(e.getLastConnectException(), <span class="keyword">true</span>, request)) <span class="keyword">throw</span> e.getLastConnectException();</div><div class="line">        releaseConnection = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        <span class="comment">// An attempt to communicate with a server failed. The request may have been sent.</span></div><div class="line">        <span class="keyword">if</span> (!recover(e, <span class="keyword">false</span>, request)) <span class="keyword">throw</span> e;</div><div class="line">        releaseConnection = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">// We're throwing an unchecked exception. Release any resources.</span></div><div class="line">        <span class="keyword">if</span> (releaseConnection) &#123;</div><div class="line">          streamAllocation.streamFailed(<span class="keyword">null</span>);</div><div class="line">          streamAllocation.release();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Attach the prior response if it exists. Such responses never have a body.</span></div><div class="line">      <span class="keyword">if</span> (priorResponse != <span class="keyword">null</span>) &#123;</div><div class="line">        response = response.newBuilder()</div><div class="line">            .priorResponse(priorResponse.newBuilder()</div><div class="line">                .body(<span class="keyword">null</span>)</div><div class="line">                .build())</div><div class="line">            .build();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Request followUp = followUpRequest(response);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (followUp == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!forWebSocket) &#123;</div><div class="line">          streamAllocation.release();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      closeQuietly(response.body());</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (++followUpCount &gt; MAX_FOLLOW_UPS) &#123;</div><div class="line">        streamAllocation.release();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Too many follow-up requests: "</span> + followUpCount);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (followUp.body() <span class="keyword">instanceof</span> UnrepeatableRequestBody) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpRetryException(<span class="string">"Cannot retry streamed HTTP body"</span>, response.code());</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!sameConnection(response, followUp.url())) &#123;</div><div class="line">        streamAllocation.release();</div><div class="line">        streamAllocation = <span class="keyword">new</span> StreamAllocation(</div><div class="line">            client.connectionPool(), createAddress(followUp.url()));</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamAllocation.stream() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Closing the body of "</span> + response</div><div class="line">            + <span class="string">" didn't close its backing stream. Bad interceptor?"</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      request = followUp;</div><div class="line">      priorResponse = response;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>实例化StreamAllocation，初始化一个Socket连接对象，获取到输入／输出流（）基于Okio<br>开启循环，执行下一个调用链（拦截器），等待返回结果（Response）<br>如果发生错误，判断是否继续请求，否：退出<br>检查响应是否符合要求，是：返回<br>关闭响应结果<br>判断是否达到最大限制数，是：退出<br>检查是否有相同连接，是：释放，重建连接<br>重复以上流程</p>
<h2 id="BridgeInterceptor"><a href="#BridgeInterceptor" class="headerlink" title="BridgeInterceptor"></a>BridgeInterceptor</h2><p>本拦截器的主要功能是：处理请求头（header），将自定义的头和协议必须的头合在一起，如果有自定义使用自定义的，没有就生成默认头<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request userRequest = chain.request();</div><div class="line">    Request.Builder requestBuilder = userRequest.newBuilder();</div><div class="line"></div><div class="line">    RequestBody body = userRequest.body();</div><div class="line">    <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</div><div class="line">      MediaType contentType = body.contentType();</div><div class="line">      <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</div><div class="line">        requestBuilder.header(<span class="string">"Content-Type"</span>, contentType.toString());</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">long</span> contentLength = body.contentLength();</div><div class="line">      <span class="keyword">if</span> (contentLength != -<span class="number">1</span>) &#123;</div><div class="line">        requestBuilder.header(<span class="string">"Content-Length"</span>, Long.toString(contentLength));</div><div class="line">        requestBuilder.removeHeader(<span class="string">"Transfer-Encoding"</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        requestBuilder.header(<span class="string">"Transfer-Encoding"</span>, <span class="string">"chunked"</span>);</div><div class="line">        requestBuilder.removeHeader(<span class="string">"Content-Length"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Host"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">      requestBuilder.header(<span class="string">"Host"</span>, hostHeader(userRequest.url(), <span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Connection"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">      requestBuilder.header(<span class="string">"Connection"</span>, <span class="string">"Keep-Alive"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing</span></div><div class="line">    <span class="comment">// the transfer stream.</span></div><div class="line">    <span class="keyword">boolean</span> transparentGzip = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"Accept-Encoding"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">      transparentGzip = <span class="keyword">true</span>;</div><div class="line">      requestBuilder.header(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">// 创建Okhpptclitent时候配置的cookieJar，</span></div><div class="line">    List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());</div><div class="line">    <span class="keyword">if</span> (!cookies.isEmpty()) &#123;</div><div class="line">      requestBuilder.header(<span class="string">"Cookie"</span>, cookieHeader(cookies));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (userRequest.header(<span class="string">"User-Agent"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">      requestBuilder.header(<span class="string">"User-Agent"</span>, Version.userAgent());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//  以上为请求前的头处理  下面是调用接下来的拦截器</span></div><div class="line"></div><div class="line">    Response networkResponse = chain.proceed(requestBuilder.build());</div><div class="line"><span class="comment">// 以下是请求完成，拿到返回后的头处理</span></div><div class="line">    HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());</div><div class="line"></div><div class="line">    Response.Builder responseBuilder = networkResponse.newBuilder()</div><div class="line">        .request(userRequest);</div><div class="line">    <span class="comment">//前面解析完header后，判断服务器是否支持gzip压缩格式，如果支持将交给Okio处理</span></div><div class="line">    <span class="keyword">if</span> (transparentGzip</div><div class="line">        &amp;&amp; <span class="string">"gzip"</span>.equalsIgnoreCase(networkResponse.header(<span class="string">"Content-Encoding"</span>))</div><div class="line">        &amp;&amp; HttpHeaders.hasBody(networkResponse)) &#123;</div><div class="line">      GzipSource responseBody = <span class="keyword">new</span> GzipSource(networkResponse.body().source());</div><div class="line">      Headers strippedHeaders = networkResponse.headers().newBuilder()</div><div class="line">          .removeAll(<span class="string">"Content-Encoding"</span>)</div><div class="line">          .removeAll(<span class="string">"Content-Length"</span>)</div><div class="line">          .build();</div><div class="line">      responseBuilder.headers(strippedHeaders);</div><div class="line">      responseBuilder.body(<span class="keyword">new</span> RealResponseBody(strippedHeaders, Okio.buffer(responseBody)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> responseBuilder.build();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Response cacheCandidate = cache != <span class="keyword">null</span></div><div class="line">        ? cache.get(chain.request())</div><div class="line">        : <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"></div><div class="line">    CacheStrategy strategy = <span class="keyword">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</div><div class="line">    Request networkRequest = strategy.networkRequest;</div><div class="line">    Response cacheResponse = strategy.cacheResponse;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</div><div class="line">      cache.trackResponse(strategy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cacheCandidate != <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</div><div class="line">      closeQuietly(cacheCandidate.body()); <span class="comment">// The cache candidate wasn't applicable. Close it.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If we're forbidden from using the network and the cache is insufficient, fail.</span></div><div class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response.Builder()</div><div class="line">          .request(chain.request())</div><div class="line">          .protocol(Protocol.HTTP_1_1)</div><div class="line">          .code(<span class="number">504</span>)</div><div class="line">          .message(<span class="string">"Unsatisfiable Request (only-if-cached)"</span>)</div><div class="line">          .body(EMPTY_BODY)</div><div class="line">          .sentRequestAtMillis(-<span class="number">1L</span>)</div><div class="line">          .receivedResponseAtMillis(System.currentTimeMillis())</div><div class="line">          .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If we don't need the network, we're done.</span></div><div class="line">    <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> cacheResponse.newBuilder()</div><div class="line">          .cacheResponse(stripBody(cacheResponse))</div><div class="line">          .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Response networkResponse = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      networkResponse = chain.proceed(networkRequest);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span></div><div class="line">      <span class="keyword">if</span> (networkResponse == <span class="keyword">null</span> &amp;&amp; cacheCandidate != <span class="keyword">null</span>) &#123;</div><div class="line">        closeQuietly(cacheCandidate.body());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// If we have a cache response too, then we're doing a conditional get.</span></div><div class="line">    <span class="keyword">if</span> (cacheResponse != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (validate(cacheResponse, networkResponse)) &#123;</div><div class="line">        Response response = cacheResponse.newBuilder()</div><div class="line">            .headers(combine(cacheResponse.headers(), networkResponse.headers()))</div><div class="line">            .cacheResponse(stripBody(cacheResponse))</div><div class="line">            .networkResponse(stripBody(networkResponse))</div><div class="line">            .build();</div><div class="line">        networkResponse.body().close();</div><div class="line"></div><div class="line">        <span class="comment">// Update the cache after combining headers but before stripping the</span></div><div class="line">        <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></div><div class="line">        cache.trackConditionalCacheHit();</div><div class="line">        cache.update(cacheResponse, response);</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        closeQuietly(cacheResponse.body());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Response response = networkResponse.newBuilder()</div><div class="line">        .cacheResponse(stripBody(cacheResponse))</div><div class="line">        .networkResponse(stripBody(networkResponse))</div><div class="line">        .build();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (HttpHeaders.hasBody(response)) &#123;</div><div class="line">      CacheRequest cacheRequest = maybeCache(response, networkResponse.request(), cache);</div><div class="line">      response = cacheWritingResponse(cacheRequest, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>就是先走自己的缓存策略，如果又缓存就直接返回了  Response，如果没有就进入下个拦截器</p>
<h2 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h2><p>倒数第二个拦截器—连接拦截器，这才是真正的开始向服务端发起进攻</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> okhttp3.internal.connection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> okhttp3.Interceptor;</div><div class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</div><div class="line"><span class="keyword">import</span> okhttp3.Request;</div><div class="line"><span class="keyword">import</span> okhttp3.Response;</div><div class="line"><span class="keyword">import</span> okhttp3.internal.http.HttpStream;</div><div class="line"><span class="keyword">import</span> okhttp3.internal.http.RealInterceptorChain;</div><div class="line"></div><div class="line"><span class="comment">/** Opens a connection to the target server and proceeds to the next interceptor. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">final</span> OkHttpClient client;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConnectInterceptor</span><span class="params">(OkHttpClient client)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.client = client;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    RealInterceptorChain realChain = (RealInterceptorChain) chain;</div><div class="line">    Request request = realChain.request();</div><div class="line">    StreamAllocation streamAllocation = realChain.streamAllocation();</div><div class="line"></div><div class="line">    <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></div><div class="line">    <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</div><div class="line">    <span class="comment">//实例化httpcodec，如果是http2.0实例化Http1Stream否则Http2Stream</span></div><div class="line">    HttpStream httpStream = streamAllocation.newStream(client, doExtensiveHealthChecks);</div><div class="line">    RealConnection connection = streamAllocation.connection();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpStream, connection);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对没错 就这么几行代码，处的逻辑很简单，因为已经转嫁到其他的类对象上去了。前面我们提到过RealInterceptorChain构造函数有四个重要的属性（Request、StreamAllocation， HttpStream、Connection）第一个不用说一开始就必须有，第二个是在重试拦截器中实例化的，第三、第四就是在本节中腰实例化出来的。StreamAllocation 我们知道是在第一个拦截器创建。</p>
<h3 id="newStream"><a href="#newStream" class="headerlink" title="newStream"></a>newStream</h3><p>深入看一下 newStream 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> HttpStream <span class="title">newStream</span><span class="params">(OkHttpClient client, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> connectTimeout = client.connectTimeoutMillis();</div><div class="line">  <span class="keyword">int</span> readTimeout = client.readTimeoutMillis();</div><div class="line">  <span class="keyword">int</span> writeTimeout = client.writeTimeoutMillis();</div><div class="line">  <span class="keyword">boolean</span> connectionRetryEnabled = client.retryOnConnectionFailure();</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">//判断之前是否又连接</span></div><div class="line">    RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</div><div class="line">        writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);</div><div class="line"></div><div class="line">    HttpStream resultStream;</div><div class="line">    <span class="keyword">if</span> (resultConnection.framedConnection != <span class="keyword">null</span>) &#123;</div><div class="line">      resultStream = <span class="keyword">new</span> Http2xStream(client, <span class="keyword">this</span>, resultConnection.framedConnection);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      resultConnection.socket().setSoTimeout(readTimeout);</div><div class="line">      resultConnection.source.timeout().timeout(readTimeout, MILLISECONDS);</div><div class="line">      resultConnection.sink.timeout().timeout(writeTimeout, MILLISECONDS);</div><div class="line">      resultStream = <span class="keyword">new</span> Http1xStream(</div><div class="line">          client, <span class="keyword">this</span>, resultConnection.source, resultConnection.sink);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</div><div class="line">      stream = resultStream;</div><div class="line">      <span class="keyword">return</span> resultStream;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就是获取连接 根据framedConnection 创建 HttpStream</p>
<h3 id="framedConnection"><a href="#framedConnection" class="headerlink" title="framedConnection"></a>framedConnection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> RealConnection <span class="title">findHealthyConnection</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout,</span></span></div><div class="line">    <span class="keyword">int</span> writeTimeout, <span class="keyword">boolean</span> connectionRetryEnabled, <span class="keyword">boolean</span> doExtensiveHealthChecks)</div><div class="line">    <span class="keyword">throws</span> IOException &#123;</div><div class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    RealConnection candidate = findConnection(connectTimeout, readTimeout, writeTimeout,</div><div class="line">        connectionRetryEnabled);</div><div class="line"></div><div class="line">    <span class="comment">// If this is a brand new connection, we can skip the extensive health checks.</span></div><div class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</div><div class="line">      <span class="keyword">if</span> (candidate.successCount == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> candidate;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Do a (potentially slow) check to confirm that the pooled connection is still good. If it</span></div><div class="line">    <span class="comment">// isn't, take it out of the pool and start again.</span></div><div class="line">    <span class="keyword">if</span> (!candidate.isHealthy(doExtensiveHealthChecks)) &#123;</div><div class="line">      noNewStreams();</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> candidate;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看findConnection 方法</p>
<h3 id="findConnection"><a href="#findConnection" class="headerlink" title="findConnection"></a>findConnection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> RealConnection <span class="title">findConnection</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout,</span></span></div><div class="line">      <span class="keyword">boolean</span> connectionRetryEnabled) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    Route selectedRoute;</div><div class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</div><div class="line">      <span class="keyword">if</span> (released) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"released"</span>);</div><div class="line">      <span class="keyword">if</span> (stream != <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"stream != null"</span>);</div><div class="line">      <span class="keyword">if</span> (canceled) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">    <span class="comment">// 使用已存在的连接</span></div><div class="line">      RealConnection allocatedConnection = <span class="keyword">this</span>.connection;</div><div class="line">      <span class="keyword">if</span> (allocatedConnection != <span class="keyword">null</span> &amp;&amp; !allocatedConnection.noNewStreams) &#123;</div><div class="line">        <span class="keyword">return</span> allocatedConnection;</div><div class="line">      &#125;</div><div class="line">        <span class="comment">//从连接池里获取</span></div><div class="line">      <span class="comment">// Attempt to get a connection from the pool.</span></div><div class="line">      RealConnection pooledConnection = Internal.instance.get(connectionPool, address, <span class="keyword">this</span>);</div><div class="line">      <span class="keyword">if</span> (pooledConnection != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.connection = pooledConnection;</div><div class="line">        <span class="keyword">return</span> pooledConnection;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      selectedRoute = route;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (selectedRoute == <span class="keyword">null</span>) &#123;</div><div class="line">      selectedRoute = routeSelector.next();</div><div class="line">      <span class="keyword">synchronized</span> (connectionPool) &#123;</div><div class="line">        route = selectedRoute;</div><div class="line">        refusedStreamCount = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//以上都不符合，创建一个连接</span></div><div class="line">    RealConnection newConnection = <span class="keyword">new</span> RealConnection(selectedRoute);</div><div class="line">    acquire(newConnection);</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (connectionPool) &#123;</div><div class="line">    <span class="comment">//放入线程池</span></div><div class="line">      Internal.instance.put(connectionPool, newConnection);</div><div class="line">      <span class="keyword">this</span>.connection = newConnection;</div><div class="line">      <span class="keyword">if</span> (canceled) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    newConnection.connect(connectTimeout, readTimeout, writeTimeout, address.connectionSpecs(),</div><div class="line">        connectionRetryEnabled);</div><div class="line">    routeDatabase().connected(newConnection.route());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newConnection;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>建立一个新连接<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout,</span></span></div><div class="line">     List&lt;ConnectionSpec&gt; connectionSpecs, <span class="keyword">boolean</span> connectionRetryEnabled) &#123;</div><div class="line">   <span class="keyword">if</span> (protocol != <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"already connected"</span>);</div><div class="line"></div><div class="line">   RouteException routeException = <span class="keyword">null</span>;</div><div class="line">   ConnectionSpecSelector connectionSpecSelector = <span class="keyword">new</span> ConnectionSpecSelector(connectionSpecs);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (route.address().sslSocketFactory() == <span class="keyword">null</span>) &#123;</div><div class="line">     <span class="keyword">if</span> (!connectionSpecs.contains(ConnectionSpec.CLEARTEXT)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(<span class="keyword">new</span> UnknownServiceException(</div><div class="line">           <span class="string">"CLEARTEXT communication not enabled for client"</span>));</div><div class="line">     &#125;</div><div class="line">     String host = route.address().url().host();</div><div class="line">     <span class="keyword">if</span> (!Platform.get().isCleartextTrafficPermitted(host)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RouteException(<span class="keyword">new</span> UnknownServiceException(</div><div class="line">           <span class="string">"CLEARTEXT communication to "</span> + host + <span class="string">" not permitted by network security policy"</span>));</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">      <span class="comment">//开始连接</span></div><div class="line">   <span class="keyword">while</span> (protocol == <span class="keyword">null</span>) &#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">       <span class="keyword">if</span> (route.requiresTunnel()) &#123;</div><div class="line">       <span class="comment">// 如果要求通道模式，建立通道连接，通常不是这种</span></div><div class="line">         buildTunneledConnection(connectTimeout, readTimeout, writeTimeout,</div><div class="line">             connectionSpecSelector);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="comment">// 一般都走这条逻辑了，实际上很简单就是socket的连接</span></div><div class="line">         buildConnection(connectTimeout, readTimeout, writeTimeout, connectionSpecSelector);</div><div class="line">       &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">       closeQuietly(socket);</div><div class="line">       closeQuietly(rawSocket);</div><div class="line">       socket = <span class="keyword">null</span>;</div><div class="line">       rawSocket = <span class="keyword">null</span>;</div><div class="line">       source = <span class="keyword">null</span>;</div><div class="line">       sink = <span class="keyword">null</span>;</div><div class="line">       handshake = <span class="keyword">null</span>;</div><div class="line">       protocol = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (routeException == <span class="keyword">null</span>) &#123;</div><div class="line">         routeException = <span class="keyword">new</span> RouteException(e);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">         routeException.addConnectException(e);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!connectionRetryEnabled || !connectionSpecSelector.connectionFailed(e)) &#123;</div><div class="line">         <span class="keyword">throw</span> routeException;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildConnection</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout,</span></span></div><div class="line">    ConnectionSpecSelector connectionSpecSelector) <span class="keyword">throws</span> IOException &#123;</div><div class="line">   <span class="comment">//建立连接</span></div><div class="line">  connectSocket(connectTimeout, readTimeout);</div><div class="line">  <span class="comment">//简历协议</span></div><div class="line">  establishProtocol(readTimeout, writeTimeout, connectionSpecSelector);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这两个方法 咱们一个一个看 </p>
<h3 id="connectSocket"><a href="#connectSocket" class="headerlink" title="connectSocket"></a>connectSocket</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectSocket</span><span class="params">(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   Proxy proxy = route.proxy();</div><div class="line">   Address address = route.address();</div><div class="line"></div><div class="line">   rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP</div><div class="line">       ? address.socketFactory().createSocket()</div><div class="line">       : <span class="keyword">new</span> Socket(proxy);</div><div class="line">   </div><div class="line">   rawSocket.setSoTimeout(readTimeout);</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       <span class="comment">//连接Socket</span></div><div class="line">     Platform.get().connectSocket(rawSocket, route.socketAddress(), connectTimeout);</div><div class="line">   &#125; <span class="keyword">catch</span> (ConnectException e) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ConnectException(<span class="string">"Failed to connect to "</span> + route.socketAddress());</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//得到 输入流  和输出流 </span></div><div class="line">   source = Okio.buffer(Okio.source(rawSocket));</div><div class="line">   sink = Okio.buffer(Okio.sink(rawSocket));</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>connectSocket 方法简历了连接，得到了一个输入流和输出流，当然 可以看到  关于流这里 交给了okio来处理，关于okio 以后在说</p>
<h3 id="establishProtocol"><a href="#establishProtocol" class="headerlink" title="establishProtocol"></a>establishProtocol</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">establishProtocol</span><span class="params">(<span class="keyword">int</span> readTimeout, <span class="keyword">int</span> writeTimeout,</span></span></div><div class="line">    ConnectionSpecSelector connectionSpecSelector) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="comment">//判断是不是 https  如果是 就在上面在套一层</span></div><div class="line">  <span class="keyword">if</span> (route.address().sslSocketFactory() != <span class="keyword">null</span>) &#123;</div><div class="line">    connectTls(readTimeout, writeTimeout, connectionSpecSelector);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    protocol = Protocol.HTTP_1_1;</div><div class="line">    socket = rawSocket;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) &#123;</div><div class="line">    socket.setSoTimeout(<span class="number">0</span>); <span class="comment">// Framed connection timeouts are set per-stream.</span></div><div class="line"></div><div class="line">    FramedConnection framedConnection = <span class="keyword">new</span> FramedConnection.Builder(<span class="keyword">true</span>)</div><div class="line">        .socket(socket, route.address().url().host(), source, sink)</div><div class="line">        .protocol(protocol)</div><div class="line">        .listener(<span class="keyword">this</span>)</div><div class="line">        .build();</div><div class="line">    framedConnection.start();</div><div class="line"></div><div class="line">    <span class="comment">// Only assign the framed connection once the preface has been sent successfully.</span></div><div class="line">    <span class="keyword">this</span>.allocationLimit = framedConnection.maxConcurrentStreams();</div><div class="line">    <span class="keyword">this</span>.framedConnection = framedConnection;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.allocationLimit = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h2><p>到了  就是最后一个拦截器，这里包括了 发送请求，和返回最终的 response<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    HttpStream httpStream = ((RealInterceptorChain) chain).httpStream();</div><div class="line">    StreamAllocation streamAllocation = ((RealInterceptorChain) chain).streamAllocation();</div><div class="line">    Request request = chain.request();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> sentRequestMillis = System.currentTimeMillis();</div><div class="line">    <span class="comment">//写入http 头，两个httpStream具体实现不一样  不过都交给 okio来处理</span></div><div class="line">    httpStream.writeRequestHeaders(request);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != <span class="keyword">null</span>) &#123;</div><div class="line">      Sink requestBodyOut = httpStream.createRequestBody(request, request.body().contentLength());</div><div class="line">      BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);</div><div class="line">      request.body().writeTo(bufferedRequestBody);</div><div class="line">      bufferedRequestBody.close();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//完成请求</span></div><div class="line">    httpStream.finishRequest();</div><div class="line">    <span class="comment">//读取响应头</span></div><div class="line">    Response response = httpStream.readResponseHeaders()</div><div class="line">        .request(request)</div><div class="line">        .handshake(streamAllocation.connection().handshake())</div><div class="line">        .sentRequestAtMillis(sentRequestMillis)</div><div class="line">        .receivedResponseAtMillis(System.currentTimeMillis())</div><div class="line">        .build();</div><div class="line">    <span class="comment">//读取响应body</span></div><div class="line">    <span class="keyword">if</span> (!forWebSocket || response.code() != <span class="number">101</span>) &#123;</div><div class="line">      response = response.newBuilder()</div><div class="line">          .body(httpStream.openResponseBody(response))</div><div class="line">          .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="string">"close"</span>.equalsIgnoreCase(response.request().header(<span class="string">"Connection"</span>))</div><div class="line">        || <span class="string">"close"</span>.equalsIgnoreCase(response.header(<span class="string">"Connection"</span>))) &#123;</div><div class="line">      streamAllocation.noNewStreams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> code = response.code();</div><div class="line">    <span class="keyword">if</span> ((code == <span class="number">204</span> || code == <span class="number">205</span>) &amp;&amp; response.body().contentLength() &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(</div><div class="line">          <span class="string">"HTTP "</span> + code + <span class="string">" had non-zero Content-Length: "</span> + response.body().contentLength());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这里就是先获取上个拦截器的连接，然后 获取到 上个拦截器的httpStream 里面不又生成的那些流吗，然后写入头，写入请求体，在读取头 读取体</p>
<p>###好了，对于OKhttp就先分析这些了，写的像流水账一样</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:昨天分析okhttp的请求流程，今天来分析下这几个拦截器&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="BridgeInterceptor" scheme="https://3431339973.github.io/tags/BridgeInterceptor/"/>
    
      <category term="RetryAndFollowUpInterceptor" scheme="https://3431339973.github.io/tags/RetryAndFollowUpInterceptor/"/>
    
      <category term="CacheInterceptor" scheme="https://3431339973.github.io/tags/CacheInterceptor/"/>
    
      <category term="ConnectInterceptor" scheme="https://3431339973.github.io/tags/ConnectInterceptor/"/>
    
      <category term="CallServerInterceptor" scheme="https://3431339973.github.io/tags/CallServerInterceptor/"/>
    
  </entry>
  
  <entry>
    <title>Okhttp源码分析学习（1）请求流程</title>
    <link href="https://3431339973.github.io/2016/11/21/okhttp1/"/>
    <id>https://3431339973.github.io/2016/11/21/okhttp1/</id>
    <published>2016-11-21T13:55:27.000Z</published>
    <updated>2017-10-21T13:02:57.923Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:okhttp是安卓端最火热的轻量级框架,由移动支付Square公司贡献,用于替换api23以后被移除的HttpClient</p>
<a id="more"></a>
<h2 id="OkHttpClient"><a href="#OkHttpClient" class="headerlink" title="OkHttpClient"></a>OkHttpClient</h2><p>OkHttpClient 看名字就这到这代表的就是http的客户端一般都会在个静态块里初始化,那就先来分析下 初始化 OkHttpClient  这里，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">//设置超时</span></div><div class="line">        builder = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</div><div class="line">                .writeTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</div><div class="line">                .readTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</div><div class="line">        .addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request originalRequest = chain.request();</div><div class="line">                <span class="comment">//请求拦截器   在每次 发起请求的时候  在拦截器里 可以 增加  消息头</span></div><div class="line">                Request authorised = originalRequest.newBuilder()</div><div class="line">                        .header(name, headerValue)</div><div class="line">                        .build();</div><div class="line">                <span class="keyword">return</span> chain.proceed(authorised);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    mOkHttpClient=builder.build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先构造一个 builder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">  dispatcher = <span class="keyword">new</span> Dispatcher();</div><div class="line">  protocols = DEFAULT_PROTOCOLS;</div><div class="line">  connectionSpecs = DEFAULT_CONNECTION_SPECS;</div><div class="line">  proxySelector = ProxySelector.getDefault();</div><div class="line">  cookieJar = CookieJar.NO_COOKIES;</div><div class="line">  socketFactory = SocketFactory.getDefault();</div><div class="line">  hostnameVerifier = OkHostnameVerifier.INSTANCE;</div><div class="line">  certificatePinner = CertificatePinner.DEFAULT;</div><div class="line">  proxyAuthenticator = Authenticator.NONE;</div><div class="line">  authenticator = Authenticator.NONE;</div><div class="line">  connectionPool = <span class="keyword">new</span> ConnectionPool();</div><div class="line">  dns = Dns.SYSTEM;</div><div class="line">  followSslRedirects = <span class="keyword">true</span>;</div><div class="line">  followRedirects = <span class="keyword">true</span>;</div><div class="line">  retryOnConnectionFailure = <span class="keyword">true</span>;</div><div class="line">  connectTimeout = <span class="number">10_000</span>;</div><div class="line">  readTimeout = <span class="number">10_000</span>;</div><div class="line">  writeTimeout = <span class="number">10_000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化一些值，重点新建了一个Dispatcher（分发器） 和一个 ConnectionPool（连接池） ，后面那些方法 其实就是设置初始化的这些<br>值，最后等到一个 builder对象 调用build（）；获得当前对象   这好像没啥可说的   哈哈哈哈哈<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient(<span class="keyword">this</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>创建完OkHttpClient 客户端，接下来初始化请求对象 Request<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">requestBuilder=<span class="keyword">new</span> Request.Builder().url(baseUrl+url);</div><div class="line">   formBodyBuilder = <span class="keyword">new</span> FormBody.Builder();</div><div class="line">formBodyBuilder.add(name,value);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.method = <span class="string">"GET"</span>;</div><div class="line">      <span class="keyword">this</span>.headers = <span class="keyword">new</span> Headers.Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">add</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</div><div class="line">      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addEncoded</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">      names.add(HttpUrl.canonicalize(name, FORM_ENCODE_SET, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</div><div class="line">      values.add(HttpUrl.canonicalize(value, FORM_ENCODE_SET, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>));</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> FormBody <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FormBody(names, values);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p> 构建了  request  和formbody   这里其实可以设置参数</p>
<h2 id="同步发送请求-mOkHttpClient-newCall-request-execute"><a href="#同步发送请求-mOkHttpClient-newCall-request-execute" class="headerlink" title="同步发送请求 mOkHttpClient.newCall(request).execute();"></a>同步发送请求 mOkHttpClient.newCall(request).execute();</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Request request = requestBuilder.post(formBodyBuilder.build()).build();</div><div class="line"> </div><div class="line">Response response = mOkHttpClient.newCall(request).execute();</div></pre></td></tr></table></figure>
<p>Request 的build就不看了啊<br>直接看发送请求的方法<br>通过newCall 可以看到 这里new 了一个RealCall 然后调用了 在他的构造方法里创建了一个 RetryAndFollowUpInterceptor （重试连接<br>拦截器） 他的execute(）方法，那看一下execute(） 方法</p>
<h3 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">  <span class="comment">//这里又个判断 没有Call智能执行一次  如果第二次进来会报错</span></div><div class="line">    <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</div><div class="line">    executed = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    client.dispatcher().executed(<span class="keyword">this</span>);</div><div class="line">    Response result = getResponseWithInterceptorChain();</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 关键的又3句client.dispatcher().executed(this);getResponseWithInterceptorChain();  client.dispatcher().finished<br>(this);咱们一句一句看啊<br>dispatcher 咱们之前说了 是在OkHttpClient 初始化的时候创建的，看名字 他肯定是个分发器，分发什么，咱们分析的是个网络请求框<br>架，肯定分发请求没，点进去executed 方法看看。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal it is in-flight. */</span></div><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</div><div class="line">  runningSyncCalls.add(call);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是往一个同步的队列里放了一个回调对象 看看这队列是啥，这个类里面没那么多属性就一起看看吧.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maxRequests = <span class="number">64</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maxRequestsPerHost = <span class="number">5</span>;</div><div class="line">  <span class="keyword">private</span> Runnable idleCallback;</div><div class="line"></div><div class="line">  <span class="comment">/** Executes calls. Created lazily. */</span></div><div class="line">  <span class="keyword">private</span> ExecutorService executorService;</div><div class="line"></div><div class="line">  <span class="comment">/** Ready async calls in the order they'll be run. */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; readyAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="comment">/** Running asynchronous calls. Includes canceled calls that haven't finished yet. */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; runningAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="comment">/** Running synchronous calls. Includes canceled calls that haven't finished yet. */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealCall&gt; runningSyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div></pre></td></tr></table></figure>
<p>一看ExecutorService  就知道  这里肯定用到了线程池，在看看3个队列 两个异步一个同步的 ，现在猜测线程池可能是 异步请求用的<br>咱们先不看，现在怎们明确了  如果同步请求 我们是吧请求回调放到了一队列里处理。</p>
<p>再看getResponseWithInterceptorChain 方法，重点来了</p>
<h3 id="getResponseWithInterceptorChain"><a href="#getResponseWithInterceptorChain" class="headerlink" title="getResponseWithInterceptorChain"></a>getResponseWithInterceptorChain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="comment">// Build a full stack of interceptors.</span></div><div class="line">  List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">  interceptors.addAll(client.interceptors());</div><div class="line">  interceptors.add(retryAndFollowUpInterceptor);</div><div class="line">  interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</div><div class="line">  interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</div><div class="line">  interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</div><div class="line">  <span class="keyword">if</span> (!retryAndFollowUpInterceptor.isForWebSocket()) &#123;</div><div class="line">    interceptors.addAll(client.networkInterceptors());</div><div class="line">  &#125;</div><div class="line">  interceptors.add(<span class="keyword">new</span> CallServerInterceptor(</div><div class="line">      retryAndFollowUpInterceptor.isForWebSocket()));</div><div class="line"></div><div class="line">  Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(</div><div class="line">      interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, originalRequest);</div><div class="line">  <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先获取咱们之前自己配置的拦截器，如果没配置 咱们先忽略，然后又继续添加拦截器retryAndFollowUpInterceptor是在 RealCall 创建<br>的时候 创建的 然后 又创建了BridgeInterceptor 看参数 应该根cookie有关，然后是CacheInterceptor 一看就是缓存相关的，然后是<br>ConnectInterceptor 连接相关 networkInterceptors 先忽略，最后又放了个 CallServerInterceptor  拦截器，这么多拦截器组装成了<br>一个 list,接下来新建了一个 RealInterceptorChain（拦截器链）对象 ，并调用了 他的proceed 方法，<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   <span class="keyword">return</span> proceed(request, streamAllocation, httpStream, connection);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">public</span> Response <span class="title">proceed</span><span class="params">(Request request, StreamAllocation streamAllocation, HttpStream httpStream,</span></span></div><div class="line">     Connection connection) <span class="keyword">throws</span> IOException &#123;</div><div class="line">   <span class="keyword">if</span> (index &gt;= interceptors.size()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</div><div class="line"> </div><div class="line">   calls++;</div><div class="line"> </div><div class="line">   <span class="comment">// If we already have a stream, confirm that the incoming request will use it.</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.httpStream != <span class="keyword">null</span> &amp;&amp; !sameConnection(request.url())) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</div><div class="line">         + <span class="string">" must retain the same host and port"</span>);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="comment">// If we already have a stream, confirm that this is the only call to chain.proceed().</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.httpStream != <span class="keyword">null</span> &amp;&amp; calls &gt; <span class="number">1</span>) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptors.get(index - <span class="number">1</span>)</div><div class="line">         + <span class="string">" must call proceed() exactly once"</span>);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="comment">// Call the next interceptor in the chain.</span></div><div class="line">   RealInterceptorChain next = <span class="keyword">new</span> RealInterceptorChain(</div><div class="line">       interceptors, streamAllocation, httpStream, connection, index + <span class="number">1</span>, request);</div><div class="line">   Interceptor interceptor = interceptors.get(index);</div><div class="line">   Response response = interceptor.intercept(next);</div><div class="line"> </div><div class="line">   <span class="comment">// Confirm that the next interceptor made its required call to chain.proceed().</span></div><div class="line">   <span class="keyword">if</span> (httpStream != <span class="keyword">null</span> &amp;&amp; index + <span class="number">1</span> &lt; interceptors.size() &amp;&amp; next.calls != <span class="number">1</span>) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptor</div><div class="line">         + <span class="string">" must call proceed() exactly once"</span>);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="comment">// Confirm that the intercepted response isn't null.</span></div><div class="line">   <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"interceptor "</span> + interceptor + <span class="string">" returned null"</span>);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">   <span class="keyword">return</span> response;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p> 看到 这个方法里面 又创建了一个 RealInterceptorChain ，然后调用了 拦截器的intercept 拦截器，返回了一个Response对象，<br> 咱们随便点开一个框架里的拦截器，看一下 他的interceptor 方法，例如BridgeInterceptor 我们看到 这个方法里面调用了刚才 传入的<br> RealInterceptorChain 的proceed 方法，嗯？这不又回到了RealInterceptorChain 的proceed 方法。配合这个RealInterceptorChain 在<br> 创建的时候 传入了一个index+1 我感觉，这里不简单，在看看其他的，都调用了proceed方法 ，在看看 我们自定义的拦截器，也是在<br> return了RealInterceptorChain  的proceed，原来是这样啊，这叫啥，递归吗。通过这种递归的方式，依次的先调用了我们自己的拦截器<br> ，然后又调用了框架里写好的这几个拦截器。关于这些拦截器.单独开一个博客在说，继续往下看  getResponseWithInterceptorChain后调用了client.dispatcher().finished(this);而且是在finally 里面</p>
<h3 id="client-dispatcher-finished-this-；"><a href="#client-dispatcher-finished-this-；" class="headerlink" title="client.dispatcher().finished(this)；"></a>client.dispatcher().finished(this)；</h3><p> 这一看名字就知道 是请求完成的意思<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(Deque&lt;T&gt; calls, T call, <span class="keyword">boolean</span> promoteCalls)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> runningCallsCount;</div><div class="line">  Runnable idleCallback;</div><div class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (!calls.remove(call)) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Call wasn't in-flight!"</span>);</div><div class="line">    <span class="keyword">if</span> (promoteCalls) promoteCalls();</div><div class="line">    runningCallsCount = runningCallsCount();</div><div class="line">    idleCallback = <span class="keyword">this</span>.idleCallback;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (runningCallsCount == <span class="number">0</span> &amp;&amp; idleCallback != <span class="keyword">null</span>) &#123;</div><div class="line">    idleCallback.run();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 其实就是删除 队列里的Call;</p>
<h2 id="发送异步请求"><a href="#发送异步请求" class="headerlink" title="发送异步请求"></a>发送异步请求</h2><p> 发送异步请求根 同步前面差不多 差距是 调用了dispatcher().enqueue方法<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</div><div class="line">      executed = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="client-dispatcher-enqueue-new-AsyncCall-responseCallback"><a href="#client-dispatcher-enqueue-new-AsyncCall-responseCallback" class="headerlink" title="client.dispatcher().enqueue(new AsyncCall(responseCallback));"></a>client.dispatcher().enqueue(new AsyncCall(responseCallback));</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;</div><div class="line">     runningAsyncCalls.add(call);</div><div class="line">     executorService().execute(call);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     readyAsyncCalls.add(call);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 这里判断了一下 如果 默认当前最大的Requests的请求不超过64，并且访问当前host的请求不超过5个 （maxRequests 和maxRequestsPerHost 可以修改），就把call放到当前运行的队列，并且执行线程池，否者放到准备队列里去。</p>
<h3 id="AsyncCall"><a href="#AsyncCall" class="headerlink" title="AsyncCall"></a>AsyncCall</h3><p> AsyncCall 实现了 NamedRunnable 其实就是Runnable  只不过给当前线程起了名字</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Runnable implementation which always sets its thread name.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedRunnable</span><span class="params">(String format, Object... args)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = Util.format(format, args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    String oldName = Thread.currentThread().getName();</div><div class="line">    Thread.currentThread().setName(name);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      execute();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      Thread.currentThread().setName(oldName);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 在run函数里 调用了 execute</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Response response = getResponseWithInterceptorChain();</div><div class="line">    <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</div><div class="line">      signalledCallback = <span class="keyword">true</span>;</div><div class="line">      responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      signalledCallback = <span class="keyword">true</span>;</div><div class="line">      <span class="comment">//返回response</span></div><div class="line">      responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    <span class="keyword">if</span> (signalledCallback) &#123;</div><div class="line">      <span class="comment">// Do not signal the callback twice!</span></div><div class="line">      Platform.get().log(INFO, <span class="string">"Callback failure for "</span> + toLoggableString(), e);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="comment">//移除队列里的 回调</span></div><div class="line">    client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>呵呵 一点开 我就看到了 getResponseWithInterceptorChain，后面我也不打算看了  无非就是 调用回调方法 返回response，然后移除队列里的 Call.</p>
<h3 id="整体流程我们就分析晚，如果没事，明天分下下-那几个拦截器，BridgeInterceptor，CacheInterceptor，ConnectInterceptor，CallServerInterceptor。"><a href="#整体流程我们就分析晚，如果没事，明天分下下-那几个拦截器，BridgeInterceptor，CacheInterceptor，ConnectInterceptor，CallServerInterceptor。" class="headerlink" title="整体流程我们就分析晚，如果没事，明天分下下 那几个拦截器，BridgeInterceptor，CacheInterceptor，ConnectInterceptor，CallServerInterceptor。"></a>整体流程我们就分析晚，如果没事，明天分下下 那几个拦截器，BridgeInterceptor，CacheInterceptor，ConnectInterceptor，CallServerInterceptor。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:okhttp是安卓端最火热的轻量级框架,由移动支付Square公司贡献,用于替换api23以后被移除的HttpClient&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="Okhttp" scheme="https://3431339973.github.io/tags/Okhttp/"/>
    
      <category term="源码解析" scheme="https://3431339973.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android JSON解析工具ShJsonUtils</title>
    <link href="https://3431339973.github.io/2016/07/20/JSON%E8%A7%A3%E6%9E%90/"/>
    <id>https://3431339973.github.io/2016/07/20/JSON解析/</id>
    <published>2016-07-20T13:37:23.000Z</published>
    <updated>2017-10-02T16:51:17.170Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:封装了一个 json解析的库<br><a id="more"></a></p>
<h1 id="ShJsonUtils"><a href="#ShJsonUtils" class="headerlink" title="ShJsonUtils"></a>ShJsonUtils</h1><p>android json解析框架<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shjson:1.2.3'</span></div></pre></td></tr></table></figure></p>
<p>#使用方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">JSONUtil jsonUtil = <span class="keyword">new</span> JSONUtil(jsonStr);</div><div class="line"><span class="comment">//二维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class);</div><div class="line"><span class="comment">//三维数组</span></div><div class="line">List&lt;People&gt; peoples =jsonUtil.getList(People.class,<span class="string">"people"</span>,Look.class,En.class);</div><div class="line">List&lt;People&gt; peoples2 =jsonUtil.getList(People.class,<span class="string">"data.people"</span>);</div><div class="line">String animal = jsonUtil.getObject(String.class,<span class="string">"data.animal"</span>);</div><div class="line">Look look = jsonUtil.getObject(Look.class,<span class="string">"data.look"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>创建 JSONUtil 对象，传入json字符串</li>
<li>通过getObject方法 获取 实体对象 ，层级用.隔开</li>
<li>通过getList方法 获取 数组对象 ，层级用.隔开</li>
</ul>
<p>源码地址：<a href="https://github.com/hui46226021/ShJsonUtils" target="_blank" rel="external">https://github.com/hui46226021/ShJsonUtils</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:封装了一个 json解析的库&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://3431339973.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="JSON解析" scheme="https://3431339973.github.io/tags/JSON%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android 仿微信 相册多图选择器</title>
    <link href="https://3431339973.github.io/2016/07/01/Android%20%E4%BB%BF%E5%BE%AE%E4%BF%A1%20%E7%9B%B8%E5%86%8C%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://3431339973.github.io/2016/07/01/Android 仿微信 相册多图选择器/</id>
    <published>2016-07-01T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:44.779Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用<br><a id="more"></a></p>
<h3 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shphotoselectorlibrary<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shphotoselectorlibrary:2.0.9'</span></div></pre></td></tr></table></figure></p>
<p>该项目依赖 Glide:3.7.0 如果有冲突 可以 修改主项目里的依赖  或者 直接导入Library</p>
<h3 id="跳转到-图片选择器页面"><a href="#跳转到-图片选择器页面" class="headerlink" title="跳转到 图片选择器页面"></a>跳转到 图片选择器页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMGSACTIVITY_REQUEST = <span class="number">10001</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chise</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">		Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">		<span class="comment">//可选择图片的最大数量</span></div><div class="line">		intent.putExtra(PhotoActivity.IMAGE_COUNT,<span class="number">9</span>); </div><div class="line">		<span class="comment">//顶部Toolbar栏背景颜色</span></div><div class="line">		intent.putExtra(PhotoActivity.BAR_COLORS,R.color.colorPrimary);</div><div class="line">		intent.setClass(<span class="keyword">this</span>,PhotoActivity.class);</div><div class="line">		startActivityForResult(intent,IMGSACTIVITY_REQUEST);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="在Activity的回调里获取到-所有选择的图片地址"><a href="#在Activity的回调里获取到-所有选择的图片地址" class="headerlink" title="在Activity的回调里获取到 所有选择的图片地址"></a>在Activity的回调里获取到 所有选择的图片地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (requestCode == IMGSACTIVITY_REQUEST &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">			Bundle bundle = data.getExtras();</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (bundle.getStringArrayList(<span class="string">"files"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">					listfile = bundle.getStringArrayList(<span class="string">"files"</span>);</div><div class="line">					listView.setVisibility(View.VISIBLE);</div><div class="line">					ArrayAdapter&lt;String&gt; arryAdapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1, listfile);</div><div class="line">					listView.setAdapter(arryAdapter);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/1.gif" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://raw.githubusercontent.com/hui46226021/ShPhotoSelector/master/2.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>源码地址：<a href="https://github.com/hui46226021/ShPhotoSelector" target="_blank" rel="external">https://github.com/hui46226021/ShPhotoSelector</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:公司需要多图选择并上传，自己实现了一个并 封装成 Library，方便以后使用&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="相册" scheme="https://3431339973.github.io/tags/%E7%9B%B8%E5%86%8C/"/>
    
      <category term="微信" scheme="https://3431339973.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://3431339973.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="多图选择" scheme="https://3431339973.github.io/tags/%E5%A4%9A%E5%9B%BE%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>ShVideoPlay android视频播放器</title>
    <link href="https://3431339973.github.io/2016/05/18/ShVideoPlay%20android%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://3431339973.github.io/2016/05/18/ShVideoPlay android视频播放器/</id>
    <published>2016-05-18T14:37:23.000Z</published>
    <updated>2017-10-01T12:50:41.888Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：Android 视频播放器<br><a id="more"></a></p>
<h1 id="ShVideoPlay"><a href="#ShVideoPlay" class="headerlink" title="ShVideoPlay"></a>ShVideoPlay</h1><p>android 视频播放封装<br>Download the latest JAR or grab via Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sh.zsh.code<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shvideoplayer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>or Gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.sh.zsh.code:shvideoplayer:1.0.2'</span></div></pre></td></tr></table></figure></p>
<p>源码地址:<a href="https://github.com/hui46226021/ShVideoPlay" target="_blank" rel="external">https://github.com/hui46226021/ShVideoPlay</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：Android 视频播放器&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="原创" scheme="https://3431339973.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="视频播放" scheme="https://3431339973.github.io/tags/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>Android Library项目发布到JCenter最简单的配置方法</title>
    <link href="https://3431339973.github.io/2016/05/15/JCenter/"/>
    <id>https://3431339973.github.io/2016/05/15/JCenter/</id>
    <published>2016-05-15T04:32:21.000Z</published>
    <updated>2017-10-02T16:30:16.186Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便 需要把jar发布到Maven服务器<br>网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter</p>
<p>先看一下上传过程图解<br><a id="more"></a></p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-注册Bintray账号-传送门-https-bintray-com"><a href="#1-注册Bintray账号-传送门-https-bintray-com" class="headerlink" title="1. 注册Bintray账号 ([传送门(https://bintray.com))"></a>1. 注册Bintray账号 ([传送门(<a href="https://bintray.com" target="_blank" rel="external">https://bintray.com</a>))</h2><p>Bintray是jcenter的托管商，因此你必须注册一个Bintray账号，注册完账号后记下你的用户名以及API Key。</p>
<p>登陆后在首页右上角点击用户名进入个人主页，然后点击用户名下面的Edit进入个人信息编辑页面，接下来点击页面左边列表的最后一项API Key</p>
<p>如图所示点击最右边箭头指示的复制按钮即可复制你的API Key</p>
<h1 id="注册得时候要注意-这里有两个坑"><a href="#注册得时候要注意-这里有两个坑" class="headerlink" title="注册得时候要注意   这里有两个坑"></a>注册得时候要注意   这里有两个坑</h1><p>有两个注册 入口  要选上面得那个  否者最后会创建不了项目  报HTTP/1.1 404 Not Found  得错误</p>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_oamt.jpg" alt=""></p>
<ul>
<li>1 注册时，不少邮箱地址还不支持，要注意。 </li>
<li>2 创建仓库时，如果使用Bintray-release,名字就填成maven,因为他的wiki:repoName: The repository name. Set to ‘maven’ by default.(有错误请指出)</li>
</ul>
<p><img src="https://static.oschina.net/uploads/img/201701/10174238_dHJe.jpg" alt=""><br>这里写图片描述</p>
<p>Finally，坑了我一天之后，终于BUILD SUCCESSFUL了</p>
<ul>
<li><ol>
<li>检查Android插件版本</li>
</ol>
</li>
</ul>
<p>首先你要检查你的Android插件的版本，因为1.1.0版本有一个BUG会导致生成javadoc失败，所以你只需升级到最新即可。目前最新版本是1.3.0，在项目根目录下的build.gradle文件中修改版本号即可，如下:</p>
<p>复制代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你在看到这篇文章的时候有更新的版本的话，直接改为最新的版本即可。</p>
<ul>
<li><ol>
<li>添加所需插件</li>
</ol>
</li>
</ul>
<p>在项目根目录下build.gradle文件中的dependencies节点中追加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div></pre></td></tr></table></figure></p>
<p>android-maven-gradle-plugin插件是用来打包Maven所需文件的</p>
<p>gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的</p>
<p>完成后如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line">        classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.3'</span></div><div class="line">        classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置项目信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/project.properties" target="_blank" rel="external">project.properties</a>文件并放到你的library module目录下</p>
<p>project.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=</div><div class="line">project.groupId=</div><div class="line">project.artifactId=</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=</div><div class="line">project.gitUrl=</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>project.name：项目名称</li>
<li>project.groupId：项目组ID，通常情况下如果你的包名为com.example.test，那么项目组ID就是com.example</li>
<li>project.artifactId：项目ID，通常情况下如果你的包名为com.example.test，那么项目ID就是test</li>
<li>project.packaging：包类型，Android库是aar</li>
<li>project.siteUrl：项目官方网站的地址，没有的话就用Github上的地址，例如：<a href="https://github.com/xiaopansky/Sketch" target="_blank" rel="external">https://github.com/xiaopansky/Sketch</a></li>
<li>project.gitUrl：项目的Git地址，例如：<a href="https://github.com/xiaopansky/Sketch.git" target="_blank" rel="external">https://github.com/xiaopansky/Sketch.git</a></li>
<li>javadoc.name：生成的javadoc打开后主页显示的名称，通常跟项目名称一样即可<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#project</div><div class="line">project.name=Sketch</div><div class="line">project.groupId=me.xiaopan</div><div class="line">project.artifactId=sketch</div><div class="line">project.packaging=aar</div><div class="line">project.siteUrl=https://github.com/xiaopansky/Sketch</div><div class="line">project.gitUrl=https://github.com/xiaopansky/Sketch.git</div><div class="line"></div><div class="line">#javadoc</div><div class="line">javadoc.name=Sketch</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>配置Bintray账号以及开发者信息</li>
</ol>
</li>
</ul>
<p>下载<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/local.properties" target="_blank" rel="external">local.properties</a>文件并放到你的library module目录下</p>
<p>local.properties文件的原始内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#bintray</div><div class="line">bintray.user=</div><div class="line">bintray.apikey=</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=</div><div class="line">developer.name=</div><div class="line">developer.email=</div></pre></td></tr></table></figure>
<p>详解：</p>
<ul>
<li>bintray.user：你的Bintray的用户名</li>
<li>bintray.apikey：你的的Bintray的API Key</li>
<li>developer.id：通常是你在开源社区的昵称</li>
<li>developer.name：你的姓名</li>
<li>developer.email：你的邮箱<br>完成配置后如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#bintray</div><div class="line">bintray.user=xiaopansky</div><div class="line">bintray.apikey=*****************************</div><div class="line"></div><div class="line">#developer</div><div class="line">developer.id=xiaopan</div><div class="line">developer.name=********</div><div class="line">developer.email=sky@xiaopan.me</div></pre></td></tr></table></figure>
<p>*号显示的为个人信息不反方便透露，还请见谅</p>
<h2 id="注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"><a href="#注意要将local-proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息" class="headerlink" title="注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息"></a>注意要将local.proerties文件加入忽略列表，以免被提交到Github或其他网站泄露个人信息</h2><ul>
<li><ol>
<li>配置bintrayUpload.gradle</li>
</ol>
</li>
</ul>
<p>方法1：直接使用远程bintrayUpload.gradle文件</p>
<p>修改你的library module的build.gradle文件，在最后加上apply from: “<a href="https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：" target="_blank" rel="external">https://raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle&quot;，如下所示：</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "https:<span class="comment">//raw.githubusercontent.com/xiaopansky/android-library-publish-to-jcenter/master/bintrayUpload.gradle"</span></div></pre></td></tr></table></figure>
<p>方法2：下载后使用本地bintrayUpload.gradle文件</p>
<p>首先下载bintrayUpload.gradle文件并放到你的library module目录下</p>
<p>然后修改你的library module的build.gradle文件，在最后加上apply from: “bintrayUpload.gradle”，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">7</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">100</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">minifyEnabled <span class="keyword">false</span></span></div><div class="line">            proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply from: "bintrayUpload.gradle"</div></pre></td></tr></table></figure>
<p>推荐大家使用第一种方案，简单快捷，至此配置工作已全部结束</p>
<ul>
<li><ol>
<li>执行命令打包并上传到Bintray</li>
</ol>
</li>
</ul>
<p>打开终端进入项目目录下，</p>
<p>执行 gradlew install 先编译一下</p>
<p>再执行gradlew bintrayUpload命令即可</p>
<p>另外，如果你的本地已经配置了Gradle了，那么执行gradle bintrayUpload命令也可以。gradlew是Gradle的一层封装，如果你本地没有安装Gradle gradlew就会自动下载Gradle</p>
<ul>
<li><ol>
<li>请求提交你的项目到jcenter</li>
</ol>
</li>
</ul>
<p>前面所有步骤走完之后实际上只是上传了你的项目到Bintray而已，并没有被包含在jcenter中，要想提交到jcenter中还需要Bintray的审核。</p>
<p>登入Bintray网站，进入个人中心，在右侧的Owned Repositories区域点击Maven的图标，进入你的Maven项目列表。</p>
<p>如果已经上传成功了，在这里就能看到你的项目，进入项目详情，在右下角的Linked To区域点击Add to JCenter，然后在Comments输入框里随便填写下信息，最后点Send提交请求即可</p>
<p>一般情况下审核需要4到5个小时，耐心等待就行了，审核通过后会给你发邮件通知你，并且以后更新项目就不需要再审核了。</p>
<ul>
<li><ol>
<li>一句话导入你的项目</li>
</ol>
</li>
</ul>
<p>当审核通过后，别人就可以一句话导入你的项目了，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'me.xiaopan:sketch:2.0.0'</span></div></pre></td></tr></table></figure></p>
<ul>
<li><ol>
<li>额外补充：</li>
</ol>
</li>
</ul>
<p>保持你的library module的名字同artifactId一样</p>
<p>因为在Bintray上你的项目的maven-metadata.xml文件的路径是gruopId+”/“+module名称。</p>
<p>例如你的groupId是com.example，artifactId是test，但module名称是library。</p>
<p>这时候项目文件是在com.example.test目录下的，但maven-metadata.xml文件却是在com.example.library目录下的。</p>
<p>这样一来如果你有多个项目groupId一样，artifactId不一样，但module名称都是library的话，可能就会冲突。</p>
<p>目前为止我还没有找到更好的解决办法，就只能让module名称和artifactId保持一致，如果你们谁有更好的办法，欢迎留言交流。</p>
<ul>
<li><ol>
<li>参考文章</li>
</ol>
</li>
</ul>
<p><a href="http://www.cnblogs.com/qianxudetianxia/p/4322331.html" target="_blank" rel="external">Android拓展系列(12)–使用Gradle发布aar项目到JCenter仓库</a><br><a href="http://blog.csdn.net/maosidiaoxian/article/details/43148643" target="_blank" rel="external">使用Gradle发布Android开源项目到JCenter</a><br><a href="http://www.jianshu.com/p/c721f9297b2f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">Android 项目打包到 JCenter 的坑</a></p>
<ul>
<li><ol>
<li>常见问题</li>
</ol>
</li>
</ul>
<p>Error:Cause: org/gradle/api/publication/maven/internal/DefaultMavenFactory：当你使用的Gradle版本是2.4以上，Android插件版本是1.3.0以上的时候就会出现这个问题，这时候你只需将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可<br>You are using JDK version ‘java version “1.7.0_71”’. Some versions of JDK 1.7 (e.g. 1.7.0_10) may cause class loading errors in Gradle.Please update to a newer version (e.g. 1.7.0_67)：当你使用的Gradle版本是2.4以上，Andriod插件版本是1.2.3的时候就会出现这个问题，同样的你只需要将android-maven-gradle-plugin插件版本改为classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’即可</p>
<p>以上文章转载：<a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">https://github.com/xiaopansky/android-library-publish-to-jcenter</a></p>
<p>关于jcenter和Maven Central的理解和gradle是如何从仓库上获取一个library</p>
<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。</p>
<h2 id="Android-studio-是从哪里得到库的？"><a href="#Android-studio-是从哪里得到库的？" class="headerlink" title="Android studio 是从哪里得到库的？"></a>Android studio 是从哪里得到库的？</h2><p>先从这个简单的问题开始，我相信不是每个人都完全明白Android studio 是从哪里得到这些library的。莫非就是Android studio 从google搜索然后下载了一个合适的给我们？</p>
<p>呵 呵，没那么复杂。Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务 器：jcenter 和  Maven Central。</p>
<h2 id="jcenter"><a href="#jcenter" class="headerlink" title="jcenter"></a>jcenter</h2><p>jcenter是一个由 bintray.com维护的Maven仓库 。你可以在<a href="http://jcenter.bintray.com/" target="_blank" rel="external">这里</a>看到整个仓库的内容。</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用jcenter了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Maven-Central"><a href="#Maven-Central" class="headerlink" title="Maven Central"></a>Maven Central</h2><p>Maven Central 则是由sonatype.org维护的Maven仓库。你可以在<a href="https://oss.sonatype.org/content/repositories/releases/" target="_blank" rel="external">这里</a>看到整个仓库。</p>
<p>注：不管是jcenter还是Maven Central ，两者都是Maven仓库</p>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用Maven Central了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，虽然jcenter和Maven Central 都是标准的 android library仓库，但是它们维护在完全不同的服务器上，由不同的人提供内容，两者之间毫无关系。在jcenter上有的可能 Maven Central 上没有，反之亦然。</p>
<p>除了两个标准的服务器之外，如果我们使用的library的作者是把该library放在自己的服务器上，我们还可以自己定义特有的Maven仓库服务器。Twitter的Fabric.io 就是这种情况，它们在<a href="https://maven.fabric.io/" target="_blank" rel="external">https://maven.fabric.io/</a>public上维护了一个自己的Maven仓库。如果你想使用Fabric.io的library，你必须自己如下定义仓库的url。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123; url <span class="string">'https://maven.fabric.io/public'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在里面使用相同的方法获取一个library。</p>
<p>dependencies {<br>    compile ‘com.crashlytics.sdk.android:crashlytics:2.2.4@aar’<br>}<br>但是将library上传到标准的服务器与自建服务器，哪种方法更好呢？当然是前者。如果将我们的library公开，其他开发者除了一行定义依赖名的代码之外不需要定义任何东西。因此这篇文章中，我们将只关注对开发者更友好的jcenter 和 Maven Central 。</p>
<p>实际上可以在Android Studio上使用的除了Maven 仓库之外还有另外一种仓库：Ivy 仓库 。但是根据我的经验来看，我还没看到任何人用过它，包括我，因此本文就直接忽略了。</p>
<h2 id="理解jcenter和Maven-Central"><a href="#理解jcenter和Maven-Central" class="headerlink" title="理解jcenter和Maven Central"></a>理解jcenter和Maven Central</h2><p>为何有两个标准的仓库？</p>
<p>事实上两个仓库都具有相同的使命：提供Java或者Android library服务。上传到哪个（或者都上传）取决于开发者。</p>
<p>起初，Android Studio 选择Maven Central作为默认仓库。如果你使用老版本的Android Studio创建一个新项目，mavenCentral()会自动的定义在build.gradle中。</p>
<p>但 是Maven Central的最大问题是对开发者不够友好。上传library异常困难。上传上去的开发者都是某种程度的极客。同时还因为诸如安全方面的其他原 因，Android Studio团队决定把默认的仓库替换成jcenter。正如你看到的，一旦使用最新版本的Android Studio创建一个项目，jcenter()自动被定义，而不是mavenCentral()。</p>
<p>有许多将Maven Central替换成jcenter的理由，下面是几个主要的原因。</p>
<ul>
<li><p>jcenter通过CDN发送library，开发者可以享受到更快的下载体验。</p>
</li>
<li><p>jcenter是全世界最大的Java仓库，因此在Maven Central 上有的，在jcenter上也极有可能有。换句话说jcenter是Maven Central的超集。</p>
</li>
<li><p>上传library到仓库很简单，不需要像在 Maven Central上做很多复杂的事情。</p>
</li>
<li><p>友好的用户界面</p>
</li>
<li><p>如果你想把library上传到 Maven Central ，你可以在bintray网站上直接点击一个按钮就能实现。</p>
</li>
</ul>
<p>基于上面的原因以及我自己的经验，可以说替换到jcenter是明智之举。</p>
<p>所以我们这篇文章将把重心放在jcenter，反正如果你能成功把library放在jcenter，转到 Maven Central 是非常容易的事情。</p>
<h2 id="gradle是如何从仓库上获取一个library的？"><a href="#gradle是如何从仓库上获取一个library的？" class="headerlink" title="gradle是如何从仓库上获取一个library的？"></a>gradle是如何从仓库上获取一个library的？</h2><p>在讨论如何上传library到jcenter之前，我们先看看gradle是如何从仓库获取library的。比如我们在 build.gradle输入如下代码的时候，这些库是如果奇迹般下载到我们的项目中的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</span></div></pre></td></tr></table></figure></p>
<p>一般来说，我们需要知道library的字符串形式，包含3部分</p>
<p>GROUP_ID:ARTIFACT_ID:VERSION<br>上面的例子中，GROUP_ID是com.inthecheesefactory.thecheeselibrary ，ARTIFACT_ID是fb-like，VERSION是0.9.3。</p>
<p>GROUP_ID 定义了library的group。有可能在同样的上下文中存在多个不同功能的library。如果library具有相同的group，那么它们将共享 一个GROUP_ID。通常我们以开发者包名紧跟着library的group名称来命名，比如com.squareup.picasso。然后 ARTIFACT_ID中是library的真实名称。至于VERSION，就是版本号而已，虽然可以是任意文字，但是我建议设置为x.y.z的形式，如 果喜欢还可以加上beta这样的后缀。</p>
<p>下面是Square library的一个例子。你可以看到每个都可以很容易的分辨出library和开发者的名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.squareup:otto:1.3.7'</span></div><div class="line">  compile <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></div><div class="line">  compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div><div class="line">  compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么在添加了上面的依赖之后会发生什么呢？简单。Gradle会询问Maven仓库服务器这个library是否存在，如果是，gradle会获得 请求library的路径，一般这个路径都是这样的形式：GROUP_ID/ARTIFACT_ID/VERSION_ID。比如可以在<a href="http://jcenter.bintray.com/com/squareup/otto/1.3.7" target="_blank" rel="external">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a> 和  <a href="https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/" target="_blank" rel="external">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a></p>
<p>下获得com.squareup:otto:1.3.7的library文件。</p>
<p>然后Android Studio 将下载这些文件到我们的电脑上，与我们的项目一起编译。整个过程就是这么简单，一点都不复杂。</p>
<p>我 相信你应该清楚的知道从仓库上下载的library只是存储在仓库服务器上的jar 或者aar文件而已。有点类似于自己去下载这些文件，拷贝然后和项目 一起编译。但是使用gradle依赖管理的最大好处是你除了添加几行文字之外啥也不做。library一下子就可以在项目中使用了。</p>
<p>了解aar文件</p>
<p>等等，我刚才说了仓库中存储的有两种类型的library：jar 和 aar。jar文件大家都知道，但是什么是aar文件呢？</p>
<p>aar文件时在jar文件之上开发的。之所以有它是因为有些Android Library需要植入一些安卓特有的文件，比如AndroidManifest.xml，资源文件，Assets或者JNI。这些都不是jar文件的标准。</p>
<p>因此aar文件就时发明出来包含所有这些东西的。总的来说它和jar一样只是普通的zip文件，不过具有不同的文件结构。jar文件以classes.jar的名字被嵌入到aar文件中。其余的文件罗列如下：</p>
<ul>
<li>/AndroidManifest.xml (mandatory)</li>
<li>/classes.jar (mandatory)</li>
<li>/res/ (mandatory)</li>
<li>/R.txt (mandatory)</li>
<li>/assets/ (optional)</li>
<li>/libs/*.jar (optional)</li>
<li>/jni/<abi>/*.so (optional)</abi></li>
<li>/proguard.txt (optional)</li>
<li>/lint.jar (optional)</li>
</ul>
<p>可以看到.aar文件是专门为安卓设计的。</p>
<p>以上转载：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Gradle 2.4之后已经可以使用JitPack发布项目，这个用起来甚至比上述方法还要简单的多，感兴趣的可以了解一下。</p>
<p>JitPack官网：<a href="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a>相当方便</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便 需要把jar发布到Maven服务器&lt;br&gt;网上的步骤看起来实在太麻烦，gituhb上偶然间看到的一个项目，经过实际验证确实可行。github连接：&lt;a href=&quot;https://github.com/xiaopansky/android-library-publish-to-jcenter&quot;&gt;https://github.com/xiaopansky/android-library-publish-to-jcenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个帮助Android开发者将aar发布到jcenter的项目，这个项目已经将需要写的脚本封装好了，我们只需要配置相关属性即可在5分钟之内发布我们的项目到JCenter&lt;/p&gt;
&lt;p&gt;先看一下上传过程图解&lt;br&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://3431339973.github.io/categories/Maven/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转贴" scheme="https://3431339973.github.io/tags/%E8%BD%AC%E8%B4%B4/"/>
    
      <category term="Maven" scheme="https://3431339973.github.io/tags/Maven/"/>
    
      <category term="JCenter" scheme="https://3431339973.github.io/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>关于一个Activity的视图加载</title>
    <link href="https://3431339973.github.io/2016/04/23/201604231/"/>
    <id>https://3431339973.github.io/2016/04/23/201604231/</id>
    <published>2016-04-23T14:42:27.000Z</published>
    <updated>2017-10-04T15:09:37.017Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:我们了解到activity是如何启动的，启动后下一步就应该是渲染activity的视图了，我们都知道一个activity张上面样子 取决于我们在onCreat方法了调用了setContentView，那我们来分析下他吧<br><a id="more"></a></p>
<h1 id="setContentView"><a href="#setContentView" class="headerlink" title="setContentView"></a>setContentView</h1><p>activity里重载了很多个setContentView方法，我们只分析一个就行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    getWindow().setContentView(view);</div><div class="line">    initWindowDecorActionBar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Window <span class="title">getWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mWindow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到  其实是调用了mWindow的setContentView 方法，window我们都知道，他是一个屏幕的最低层，那我们点进去接着往下看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</div><div class="line"><span class="comment">/** Flag for the "options panel" feature.  This is enabled by default. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEATURE_OPTIONS_PANEL = <span class="number">0</span>;</div><div class="line"><span class="comment">/** Flag for the "no title" feature, turning off the title at the top</span></div><div class="line"> *  of the screen. */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEATURE_NO_TITLE = <span class="number">1</span>;</div><div class="line"><span class="comment">/** Flag for the progress indicator feature */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEATURE_PROGRESS = <span class="number">2</span>;</div><div class="line"><span class="comment">/** Flag for having an icon on the left side of th</span></div><div class="line"></div><div class="line">........</div></pre></td></tr></table></figure></p>
<p>咦，这window原来是个抽象类，那他到底是个什么类型，我们在回到activity看看他是如何初始化的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></div><div class="line">        Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</div><div class="line">        Application application, Intent intent, ActivityInfo info,</div><div class="line">        CharSequence title, Activity parent, String id,</div><div class="line">        NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">        Configuration config, IVoiceInteractor voiceInteractor) &#123;</div><div class="line">    attachBaseContext(context);</div><div class="line"></div><div class="line">    mFragments.attachActivity(<span class="keyword">this</span>, mContainer, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">//这里初始化了 window</span></div><div class="line">    mWindow = PolicyManager.makeNewWindow(<span class="keyword">this</span>);</div><div class="line">    mWindow.setCallback(<span class="keyword">this</span>);</div><div class="line">    mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</div><div class="line">    mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</div><div class="line">        mWindow.setSoftInputMode(info.softInputMode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (info.uiOptions != <span class="number">0</span>) &#123;</div><div class="line">        mWindow.setUiOptions(info.uiOptions);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Window是什么"><a href="#Window是什么" class="headerlink" title="Window是什么?"></a>Window是什么?</h2><p>该方法在ActivityThread的performLaunchActivity方法被调用，就是创建一个activity的方法。 这回找到了 mWindow  是如何初始化的，但是还是看不出他什么个什么 实例化对象，而且又出来一个新东西 PolicyManager.makeNewWindow(this);的PolicyManager 是个什么玩意？<br>我没开一探究竟 \frameworks\base\core\java\com\android\internal\policy\PolicyManager</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PolicyManager</span> </span>&#123;</div><div class="line">    <span class="comment">//会通过这个 反射创建 IPolicy实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POLICY_IMPL_CLASS_NAME =</div><div class="line">        <span class="string">"com.android.internal.policy.impl.Policy"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IPolicy sPolicy;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">// Pull in the actual implementation of the policy at run-time</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class policyClass = Class.forName(POLICY_IMPL_CLASS_NAME);</div><div class="line">            sPolicy = (IPolicy)policyClass.newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    POLICY_IMPL_CLASS_NAME + <span class="string">" could not be loaded"</span>, ex);</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    POLICY_IMPL_CLASS_NAME + <span class="string">" could not be instantiated"</span>, ex);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    POLICY_IMPL_CLASS_NAME + <span class="string">" could not be instantiated"</span>, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Cannot instantiate this class</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PolicyManager</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// The static methods to spawn new policy-specific objects</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Window <span class="title">makeNewWindow</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sPolicy.makeNewWindow(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LayoutInflater <span class="title">makeNewLayoutInflater</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sPolicy.makeNewLayoutInflater(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WindowManagerPolicy <span class="title">makeNewWindowManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sPolicy.makeNewWindowManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FallbackEventHandler <span class="title">makeNewFallbackEventHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sPolicy.makeNewFallbackEventHandler(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嗯，这个类就这么几行代码 里面有个关键的东西sPolicy 继续走（注意：前方高能你将进入水下的冰山了）<br>根据上面的 POLICY_IMPL_CLASS_NAME 获取到了Policy 我没来看一下他</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Policy</span> <span class="keyword">implements</span> <span class="title">IPolicy</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PhonePolicy"</span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] preload_classes = &#123;</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneLayoutInflater"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow$1"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow$DialogMenuCallback"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow$DecorView"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow$PanelFeatureState"</span>,</div><div class="line">    <span class="string">"com.android.internal.policy.impl.PhoneWindow$PanelFeatureState$SavedState"</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">// For performance reasons, preload some policy specific classes when</span></div><div class="line">    <span class="comment">// the policy gets loaded.</span></div><div class="line">    <span class="keyword">for</span> (String s : preload_classes) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class.forName(s);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"Could not preload class for phone policy: "</span> + s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回了 Window</span></div><div class="line"><span class="function"><span class="keyword">public</span> Window <span class="title">makeNewWindow</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PhoneWindow(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">makeNewLayoutInflater</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PhoneLayoutInflater(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> WindowManagerPolicy <span class="title">makeNewWindowManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PhoneWindowManager();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> FallbackEventHandler <span class="title">makeNewFallbackEventHandler</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PhoneFallbackEventHandler(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码也不多 但是可以看到 makeNewWindow 里干了什么，他new 了一个 PhoneWindow  还有 makeNewWindowManager 里new 了一个PhoneWindowManager<br>这下我们知道 activity里的getWindow 到底获取到了个 什么东西.</p>
<h2 id="继续setContentView（windows的方法）"><a href="#继续setContentView（windows的方法）" class="headerlink" title="继续setContentView（windows的方法）"></a>继续setContentView（windows的方法）</h2><p>刚才在看activity的时候已经知道 其setContentView方法 其实调用的window的setContentView方法 ，现在我们也知道了这个 window其实是一个 PhoneWindow,来上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> DecorView mDecor;</div><div class="line">   </div><div class="line"><span class="keyword">private</span> ViewGroup mContentParent;</div><div class="line"></div><div class="line"><span class="keyword">private</span> ViewGroup mContentRoot;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    setContentView(view, <span class="keyword">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view, ViewGroup.LayoutParams params)</span> </span>&#123;</div><div class="line">    <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class="line">    <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class="line">    <span class="comment">// before this happens.</span></div><div class="line">    <span class="comment">//判断 mContentParent 没有则创建</span></div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        installDecor();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        mContentParent.removeAllViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        view.setLayoutParams(params);</div><div class="line">        <span class="keyword">final</span> Scene newScene = <span class="keyword">new</span> Scene(mContentParent, view);</div><div class="line">        transitionTo(newScene);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//将传进来的view添加到 mContentParent</span></div><div class="line">        mContentParent.addView(view, params);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> Callback cb = getCallback();</div><div class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class="line">        cb.onContentChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实这里就干了两件事 </p>
<ul>
<li>判断 mContentParent 没有则创建 </li>
<li>然后把传进来的view添加到 mContentParent</li>
</ul>
<p>我们再来看看 installDecor 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installDecor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mDecor == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//创建 DecorView </span></div><div class="line">        mDecor = generateDecor();</div><div class="line">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</div><div class="line">        mDecor.setIsRootNamespace(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class="number">0</span>) &#123;</div><div class="line">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//通过 DecorView 得到mContentParent</span></div><div class="line">        mContentParent = generateLayout(mDecor);</div><div class="line"></div><div class="line">     。。。。。。。其他赋值操作</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续看 generateDecor 和generateLayout 函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//generateDecor 很简单 就是 new 了个DecorView</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> DecorView <span class="title">generateDecor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DecorView(getContext(), -<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> ViewGroup <span class="title">generateLayout</span><span class="params">(DecorView decor)</span> </span>&#123;</div><div class="line">    <span class="comment">// Apply data from current theme.</span></div><div class="line">    TypedArray a = getWindowStyle();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"From style:"</span>);</div><div class="line">        String s = <span class="string">"Attrs:"</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R.styleable.Window.length; i++) &#123;</div><div class="line">            s = s + <span class="string">" "</span> + Integer.toHexString(R.styleable.Window[i]) + <span class="string">"="</span></div><div class="line">                    + a.getString(i);</div><div class="line">        &#125;</div><div class="line">        System.out.println(s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mIsFloating = a.getBoolean(R.styleable.Window_windowIsFloating, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">int</span> flagsToUpdate = (FLAG_LAYOUT_IN_SCREEN|FLAG_LAYOUT_INSET_DECOR)</div><div class="line">            &amp; (~getForcedWindowFlags());</div><div class="line">    <span class="keyword">if</span> (mIsFloating) &#123;</div><div class="line">        setLayout(WRAP_CONTENT, WRAP_CONTENT);</div><div class="line">        setFlags(<span class="number">0</span>, flagsToUpdate);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">.....一堆 赋值操作</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    mDecor.startChanging();</div><div class="line">    <span class="comment">//标题栏</span></div><div class="line">    View in = mLayoutInflater.inflate(layoutResource, <span class="keyword">null</span>);</div><div class="line">    decor.addView(in, <span class="keyword">new</span> ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));</div><div class="line">    mContentRoot = (ViewGroup) in;</div><div class="line">    <span class="comment">//contentParent 由findViewById 返回</span></div><div class="line">    ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);</div><div class="line">    <span class="keyword">if</span> (contentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Window couldn't find content container view"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">.......</div><div class="line"></div><div class="line">    <span class="keyword">return</span> contentParent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>generateDecor 很简单 就是 new 了个DecorView ，而DecorView 实际上就是个 Framelayout.<br>generateLayout 函数很长 差不多300多行 我们只挑重点的看  </p>
<ul>
<li>主要是给DecorView 添加了标题栏</li>
<li>通过findViewById 获取到 contentParent ，这个findViewById 其实是调用了DecorView的这个findViewById<br>如图<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://bmob-cdn-14158.b0.upaiyun.com/2017/10/04/bcc6df51409d50a480955fd270bb04ec.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> 
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>setContentView 其实是调用window的setContentView</li>
<li>window 是通过PolicyManager 获取到的PhoneWindow对象</li>
<li>window 的setContentView 创建了DecorView （Framelayout）</li>
<li>window 的setContentView 创建了DecorView </li>
<li>通过DecorView 创建了contentParent</li>
<li>把setContentView传过来的View add到contentParent 上</li>
</ul>
<h1 id="关于contentParent-的addView-view-params-方法"><a href="#关于contentParent-的addView-view-params-方法" class="headerlink" title="关于contentParent 的addView(view, params)方法"></a>关于contentParent 的addView(view, params)方法</h1><p>下回再说吧，又该睡了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:我们了解到activity是如何启动的，启动后下一步就应该是渲染activity的视图了，我们都知道一个activity张上面样子 取决于我们在onCreat方法了调用了setContentView，那我们来分析下他吧&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="Surface" scheme="https://3431339973.github.io/tags/Surface/"/>
    
  </entry>
  
  <entry>
    <title>关于一个Activity的启动</title>
    <link href="https://3431339973.github.io/2016/04/22/201604221/"/>
    <id>https://3431339973.github.io/2016/04/22/201604221/</id>
    <published>2016-04-22T15:37:23.000Z</published>
    <updated>2017-10-03T15:42:00.750Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:写了两年android  每天都接触activity,activity的生命周期记得滚怪烂熟，那一个activity到底是怎么展示到屏幕上的那，最近打算认真看看这里面的故事。<br><a id="more"></a></p>
<h2 id="Surface"><a href="#Surface" class="headerlink" title="Surface"></a>Surface</h2><p>不论是使用Skia绘制二维图像，还是使用OpenGl绘制三维图像，最终Application都要和Surface交互，Surface就像个画布，儿APP就在画布上作画。</p>
<h2 id="创建一个Activity"><a href="#创建一个Activity" class="headerlink" title="创建一个Activity"></a>创建一个Activity</h2><h3 id="ActivityThread"><a href="#ActivityThread" class="headerlink" title="ActivityThread"></a>ActivityThread</h3><p>代码路径 frameworks\base\core\java\android\app\ActivityThread<br>怎么创建一个Activity?如果了解android系统的启动过程， 应该知道 在zygote 在相应 ActivityManagerService 请求后 会创建一个子进程,这个进程就启动 ActivityThread 的main方法</p>
<p>在ActivityThread 里有个处理消息的方法 handleLaunchActivity 看名字 也应该知道 他是 处理 启动 Activity用的，他在 一个Handle 里被调用 或者 被 handleRelaunchActivity（重启）被调用，其实handleRelaunchActivity也是 在Handle 里被调用，这个Handle还调用了很多 例如handlePauseActivity，handleStopActivity，handleWindowVisibility<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">     <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">         <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">             <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line"></div><div class="line">             r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                     r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">             handleLaunchActivity(r, <span class="keyword">null</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">         &#125; <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> RELAUNCH_ACTIVITY: &#123;</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityRestart"</span>);</div><div class="line">             ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class="line">             handleRelaunchActivity(r);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">         &#125; <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> PAUSE_ACTIVITY:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</div><div class="line">             handlePauseActivity((IBinder)msg.obj, <span class="keyword">false</span>, (msg.arg1&amp;<span class="number">1</span>) != <span class="number">0</span>, msg.arg2,</div><div class="line">                     (msg.arg1&amp;<span class="number">2</span>) != <span class="number">0</span>);</div><div class="line">             maybeSnapshot();</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> PAUSE_ACTIVITY_FINISHING:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</div><div class="line">             handlePauseActivity((IBinder)msg.obj, <span class="keyword">true</span>, (msg.arg1&amp;<span class="number">1</span>) != <span class="number">0</span>, msg.arg2,</div><div class="line">                     (msg.arg1&amp;<span class="number">1</span>) != <span class="number">0</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> STOP_ACTIVITY_SHOW:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStop"</span>);</div><div class="line">             handleStopActivity((IBinder)msg.obj, <span class="keyword">true</span>, msg.arg2);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> STOP_ACTIVITY_HIDE:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStop"</span>);</div><div class="line">             handleStopActivity((IBinder)msg.obj, <span class="keyword">false</span>, msg.arg2);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SHOW_WINDOW:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityShowWindow"</span>);</div><div class="line">             handleWindowVisibility((IBinder)msg.obj, <span class="keyword">true</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> HIDE_WINDOW:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityHideWindow"</span>);</div><div class="line">             handleWindowVisibility((IBinder)msg.obj, <span class="keyword">false</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> RESUME_ACTIVITY:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityResume"</span>);</div><div class="line">             handleResumeActivity((IBinder) msg.obj, <span class="keyword">true</span>, msg.arg1 != <span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SEND_RESULT:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityDeliverResult"</span>);</div><div class="line">             handleSendResult((ResultData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DESTROY_ACTIVITY:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityDestroy"</span>);</div><div class="line">             handleDestroyActivity((IBinder)msg.obj, msg.arg1 != <span class="number">0</span>,</div><div class="line">                     msg.arg2, <span class="keyword">false</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> BIND_APPLICATION:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"bindApplication"</span>);</div><div class="line">             AppBindData data = (AppBindData)msg.obj;</div><div class="line">             handleBindApplication(data);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> EXIT_APPLICATION:</div><div class="line">             <span class="keyword">if</span> (mInitialApplication != <span class="keyword">null</span>) &#123;</div><div class="line">                 mInitialApplication.onTerminate();</div><div class="line">             &#125;</div><div class="line">             Looper.myLooper().quit();</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> NEW_INTENT:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityNewIntent"</span>);</div><div class="line">             handleNewIntent((NewIntentData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> RECEIVER:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"broadcastReceiveComp"</span>);</div><div class="line">             handleReceiver((ReceiverData)msg.obj);</div><div class="line">             maybeSnapshot();</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> CREATE_SERVICE:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceCreate"</span>);</div><div class="line">             handleCreateService((CreateServiceData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> BIND_SERVICE:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceBind"</span>);</div><div class="line">             handleBindService((BindServiceData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> UNBIND_SERVICE:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceUnbind"</span>);</div><div class="line">             handleUnbindService((BindServiceData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SERVICE_ARGS:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceStart"</span>);</div><div class="line">             handleServiceArgs((ServiceArgsData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> STOP_SERVICE:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"serviceStop"</span>);</div><div class="line">             handleStopService((IBinder)msg.obj);</div><div class="line">             maybeSnapshot();</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> CONFIGURATION_CHANGED:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"configChanged"</span>);</div><div class="line">             mCurDefaultDisplayDpi = ((Configuration)msg.obj).densityDpi;</div><div class="line">             handleConfigurationChanged((Configuration)msg.obj, <span class="keyword">null</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> CLEAN_UP_CONTEXT:</div><div class="line">             ContextCleanupInfo cci = (ContextCleanupInfo)msg.obj;</div><div class="line">             cci.context.performFinalCleanup(cci.who, cci.what);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> GC_WHEN_IDLE:</div><div class="line">             scheduleGcIdler();</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DUMP_SERVICE:</div><div class="line">             handleDumpService((DumpComponentInfo)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> LOW_MEMORY:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"lowMemory"</span>);</div><div class="line">             handleLowMemory();</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> ACTIVITY_CONFIGURATION_CHANGED:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityConfigChanged"</span>);</div><div class="line">             handleActivityConfigurationChanged((IBinder)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> PROFILER_CONTROL:</div><div class="line">             handleProfilerControl(msg.arg1 != <span class="number">0</span>, (ProfilerInfo)msg.obj, msg.arg2);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> CREATE_BACKUP_AGENT:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"backupCreateAgent"</span>);</div><div class="line">             handleCreateBackupAgent((CreateBackupAgentData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DESTROY_BACKUP_AGENT:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"backupDestroyAgent"</span>);</div><div class="line">             handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SUICIDE:</div><div class="line">             Process.killProcess(Process.myPid());</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> REMOVE_PROVIDER:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"providerRemove"</span>);</div><div class="line">             completeRemoveProvider((ProviderRefCount)msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> ENABLE_JIT:</div><div class="line">             ensureJitEnabled();</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DISPATCH_PACKAGE_BROADCAST:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"broadcastPackage"</span>);</div><div class="line">             handleDispatchPackageBroadcast(msg.arg1, (String[])msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SCHEDULE_CRASH:</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RemoteServiceException((String)msg.obj);</div><div class="line">         <span class="keyword">case</span> DUMP_HEAP:</div><div class="line">             handleDumpHeap(msg.arg1 != <span class="number">0</span>, (DumpHeapData)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DUMP_ACTIVITY:</div><div class="line">             handleDumpActivity((DumpComponentInfo)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> DUMP_PROVIDER:</div><div class="line">             handleDumpProvider((DumpComponentInfo)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SLEEPING:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"sleeping"</span>);</div><div class="line">             handleSleeping((IBinder)msg.obj, msg.arg1 != <span class="number">0</span>);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> SET_CORE_SETTINGS:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"setCoreSettings"</span>);</div><div class="line">             handleSetCoreSettings((Bundle) msg.obj);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> UPDATE_PACKAGE_COMPATIBILITY_INFO:</div><div class="line">             handleUpdatePackageCompatibilityInfo((UpdateCompatibilityData)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> TRIM_MEMORY:</div><div class="line">             Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"trimMemory"</span>);</div><div class="line">             handleTrimMemory(msg.arg1);</div><div class="line">             Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> UNSTABLE_PROVIDER_DIED:</div><div class="line">             handleUnstableProviderDied((IBinder)msg.obj, <span class="keyword">false</span>);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> REQUEST_ASSIST_CONTEXT_EXTRAS:</div><div class="line">             handleRequestAssistContextExtras((RequestAssistContextExtras)msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> TRANSLUCENT_CONVERSION_COMPLETE:</div><div class="line">             handleTranslucentConversionComplete((IBinder)msg.obj, msg.arg1 == <span class="number">1</span>);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> INSTALL_PROVIDER:</div><div class="line">             handleInstallProvider((ProviderInfo) msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> ON_NEW_ACTIVITY_OPTIONS:</div><div class="line">             Pair&lt;IBinder, ActivityOptions&gt; pair = (Pair&lt;IBinder, ActivityOptions&gt;) msg.obj;</div><div class="line">             onNewActivityOptions(pair.first, pair.second);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> CANCEL_VISIBLE_BEHIND:</div><div class="line">             handleCancelVisibleBehind((IBinder) msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> BACKGROUND_VISIBLE_BEHIND_CHANGED:</div><div class="line">             handleOnBackgroundVisibleBehindChanged((IBinder) msg.obj, msg.arg1 &gt; <span class="number">0</span>);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         <span class="keyword">case</span> ENTER_ANIMATION_COMPLETE:</div><div class="line">             handleEnterAnimationComplete((IBinder) msg.obj);</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&lt;&lt;&lt; done: "</span> + codeToString(msg.what));</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>贴了这么多代码 ，发现 其实这里也并不重要，知识接受到消息后根据不同的消息 来处理不同的请求。不过咱们要讨论的是Activity的启动，所以重点还是要看一下 handleLaunchActivity 方法，先上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">    <span class="comment">// we are back active so skip it.</span></div><div class="line">    unscheduleGcIdler();</div><div class="line">    mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.profilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        mProfiler.setProfiler(r.profilerInfo);</div><div class="line">        mProfiler.startProfiling();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure we are running with the most recent config.</span></div><div class="line">    handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">        TAG, <span class="string">"Handling launch of "</span> + r);</div><div class="line">    <span class="comment">// 第一步  这里返回了一个  activity对象</span></div><div class="line">    Activity a = performLaunchActivity(r, customIntent);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">        r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</div><div class="line">        Bundle oldState = r.state;</div><div class="line">        <span class="comment">//如果不为空 就调用了handleResumeActivity 方法</span></div><div class="line">        handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</div><div class="line">                !r.activity.mFinished &amp;&amp; !r.startsNotResumed);</div><div class="line">    。。。。。。。。。。。。。。。</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在handleLaunchActivity 里做了两件大事 </p>
<ul>
<li>通过 performLaunchActivity 获取到了 一个 Activity 对象</li>
<li>就调用了handleResumeActivity 方法<br>先分析下 performLaunchActivity 方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">      <span class="comment">// System.out.println("##### [" + System.currentTimeMillis() + "] ActivityThread.performLaunchActivity(" + r + ")");</span></div><div class="line"></div><div class="line">      ActivityInfo aInfo = r.activityInfo;</div><div class="line">      <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</div><div class="line">          r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class="line">                  Context.CONTEXT_INCLUDE_CODE);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ComponentName component = r.intent.getComponent();</div><div class="line">      <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</div><div class="line">          component = r.intent.resolveActivity(</div><div class="line">              mInitialApplication.getPackageManager());</div><div class="line">          r.intent.setComponent(component);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</div><div class="line">          component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</div><div class="line">                  r.activityInfo.targetActivity);</div><div class="line">      &#125;</div><div class="line">  </div><div class="line">      <span class="comment">//上部分 主要完成了一些准备工作 </span></div><div class="line">      <span class="comment">//下面开始 创建activity</span></div><div class="line">      Activity activity = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">          <span class="comment">//通过 Intent 带过来的activity名字 和 类加载器 创建出了activity对象</span></div><div class="line">          activity = mInstrumentation.newActivity(</div><div class="line">                  cl, component.getClassName(), r.intent);</div><div class="line">          StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">          r.intent.setExtrasClassLoader(cl);</div><div class="line">          r.intent.prepareToEnterProcess();</div><div class="line">          <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">              r.state.setClassLoader(cl);</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                  <span class="string">"Unable to instantiate activity "</span> + component</div><div class="line">                  + <span class="string">": "</span> + e.toString(), e);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//接下来就是 设置activity的一些 属性的操作 例如某些状态 ，内部引用什么的 ，加载主题什么的</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</div><div class="line">          <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">                  TAG, r + <span class="string">": app="</span> + app</div><div class="line">                  + <span class="string">", appName="</span> + app.getPackageName()</div><div class="line">                  + <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</div><div class="line">                  + <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</div><div class="line">                  + <span class="string">", dir="</span> + r.packageInfo.getAppDir());</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">              Context appContext = createBaseContextForActivity(r, activity);</div><div class="line">              CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">              Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</div><div class="line">              <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></div><div class="line">                      + r.activityInfo.name + <span class="string">" with config "</span> + config);</div><div class="line">              activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                      r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                      r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                      r.voiceInteractor);</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</div><div class="line">                  activity.mIntent = customIntent;</div><div class="line">              &#125;</div><div class="line">              r.lastNonConfigurationInstances = <span class="keyword">null</span>;</div><div class="line">              activity.mStartedActivity = <span class="keyword">false</span>;</div><div class="line">              <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</div><div class="line">              <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</div><div class="line">                  activity.setTheme(theme);</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              activity.mCalled = <span class="keyword">false</span>;</div><div class="line">              <span class="comment">//这里执行完 会调用 Activity 的OnCreate 方法</span></div><div class="line">              <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                  mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                      <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                      <span class="string">" did not call through to super.onCreate()"</span>);</div><div class="line">              &#125;</div><div class="line">              r.activity = activity;</div><div class="line">              r.stopped = <span class="keyword">true</span>;</div><div class="line">              <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                  activity.performStart();</div><div class="line">                  r.stopped = <span class="keyword">false</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                  <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                      <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</div><div class="line">                          mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class="line">                                  r.persistentState);</div><div class="line">                      &#125;</div><div class="line">                  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">                      mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                  activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                  <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                      mInstrumentation.callActivityOnPostCreate(activity, r.state,</div><div class="line">                              r.persistentState);</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                          <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                          <span class="string">" did not call through to super.onPostCreate()"</span>);</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          r.paused = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">          mActivities.put(r.token, r);</div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</div><div class="line">          <span class="keyword">throw</span> e;</div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                  <span class="string">"Unable to start activity "</span> + component</div><div class="line">                  + <span class="string">": "</span> + e.toString(), e);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> activity;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结一下 performLaunchActivity</p>
<ul>
<li>通过intent 带过来的名字 通过反射 创建了activity对象 （<em>**到墙上 </em>^_^*）</li>
<li>完成了 activity的一些属性赋值</li>
<li>通过mInstrumentation.callActivityOnCreate 调用了 activity的OnCreate 方法</li>
</ul>
<p>就这样 activity 创建了 并且调用了其OnCreate方法，那么在OnCreate  方法里都干了什么，作为一个android开发者，你心里没电逼数吗？<br>好吧，往下看 我们来分析下 handleResumeActivity 方法，不给我说你忘了，上面可刚刚说完 handleLaunchActivity 干的第二件大事就是 日了这家伙。</p>
<p>来来 关门放代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">           <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume) &#123;</div><div class="line">       <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">       <span class="comment">// we are back active so skip it.</span></div><div class="line">  。。。。。。。。。。</div><div class="line">           <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</div><div class="line">               <span class="comment">//通过activity获取到window对象</span></div><div class="line">               r.window = r.activity.getWindow();</div><div class="line">               <span class="comment">//获取了DecorView  </span></div><div class="line">               View decor = r.window.getDecorView();</div><div class="line">               decor.setVisibility(View.INVISIBLE);</div><div class="line">               <span class="comment">//获取视图管理</span></div><div class="line">               ViewManager wm = a.getWindowManager();</div><div class="line">               WindowManager.LayoutParams l = r.window.getAttributes();</div><div class="line">               a.mDecor = decor;</div><div class="line">               l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</div><div class="line">               l.softInputMode |= forwardBit;</div><div class="line">               <span class="comment">//将DecorView 弄到了这里面</span></div><div class="line">               <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</div><div class="line">                   a.mWindowAdded = <span class="keyword">true</span>;</div><div class="line">                   wm.addView(decor, l);</div><div class="line">               &#125;</div><div class="line">       。。。。。。。。。。。。。。</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到  window  DecorView 方法  那他们是什么时候创建的呢，这些都是跟视图有关的东西，视图好想是在 activity的onCreat里 调用setContentView才有的，靠那还得回去 看activity的setContentView,哎，反正现在activity不都启动了吗。视图渲染就明天再说吧，洗洗睡了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:写了两年android  每天都接触activity,activity的生命周期记得滚怪烂熟，那一个activity到底是怎么展示到屏幕上的那，最近打算认真看看这里面的故事。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="Surface" scheme="https://3431339973.github.io/tags/Surface/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程</title>
    <link href="https://3431339973.github.io/2016/04/21/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://3431339973.github.io/2016/04/21/Android系统启动流程/</id>
    <published>2016-04-21T14:37:23.000Z</published>
    <updated>2017-10-02T16:29:18.379Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:梳理一下android系统的启动流程，从init进程 到java层面<br><a id="more"></a></p>
<p>init是一个进程，做完android系统启动的第一个进程，同时也是linux内核启动的第一个进程，init进程在启动过程中起到了重要的责任。</p>
<h2 id="init进程的工作"><a href="#init进程的工作" class="headerlink" title="init进程的工作"></a>init进程的工作</h2><ul>
<li>1.解析配置文件<br>  在init进程中会解析两个配置文件，一个是init.rc, 另一个是 与硬件平台相关的 配置</li>
<li>2.解析Service</li>
<li>3.启动zygote</li>
</ul>
<h2 id="关于-zygote"><a href="#关于-zygote" class="headerlink" title="关于 zygote"></a>关于 zygote</h2><p>zygote本身是个Native程序。原名app_process  ,该名字 在Android.mk中指定，运行在 该进程又将自己的 名字改成zygote，<br>zygote 启动AppRuntime.<br>在AppRuntime 中主要完成了3步</p>
<ul>
<li>1.创建虚拟机 startVm</li>
<li>2.注册JNI函数 startReg</li>
<li>3.调用com.android.internal.os.Zygotelnit的main函数，正式让系统进入了java语言的世界</li>
</ul>
<h2 id="在Zygotelnit-的main函数中"><a href="#在Zygotelnit-的main函数中" class="headerlink" title="在Zygotelnit 的main函数中"></a>在Zygotelnit 的main函数中</h2><ul>
<li>1.建立IPC通信服务端 </li>
<li>2.调用registerZygoteSocket ,通过这个函数他可以相应子孙后代的请求，预加载类和资源（预加载相当多的类 1000多个 想想 android启动为啥慢）</li>
<li>3.启动system_server  分裂出一个子进程（承担一部分责任，建立与Binder的链接，调用init1 和inti2来启动一些系统服务）</li>
<li>4.zygote完成创世纪调用下runSelectLoopMode 便睡了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:梳理一下android系统的启动流程，从init进程 到java层面&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="系统" scheme="https://3431339973.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04 编译android6.0</title>
    <link href="https://3431339973.github.io/2016/03/28/20160328/"/>
    <id>https://3431339973.github.io/2016/03/28/20160328/</id>
    <published>2016-03-28T13:45:17.000Z</published>
    <updated>2018-01-21T12:17:45.563Z</updated>
    
    <content type="html"><![CDATA[<p>阅读android源码，应该是每个android 开发者提升 技术最快的途径，如果感兴趣可以自己尝试编译一下android系统，本文编译环境是ubuntu16.04 ，编译的android版本是6.0 由于虚拟机配置比较低，编译器也比较慢，折腾了好几天。估计我的硬盘比我更辛苦，好了进入正题。<br><a id="more"></a></p>
<h2 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1.源码下载"></a>1.源码下载</h2><p>Google采用Git对AOSP项目进行多仓库管理，所以需要先安装git，git的使用之前有记录过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git </div><div class="line">git config --global user.email “test@qq.com” </div><div class="line">git config --global user.name “tom”</div></pre></td></tr></table></figure></p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>（<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp" target="_blank" rel="external">参考科大源</a>）</p>
<p>按照 Google 官方教程 <a href="https://source.android.com/source/downloading.html" target="_blank" rel="external">https://source.android.com/source/downloading.html</a></p>
<p>将 <a href="https://android.googlesource.com/platform/manifest" target="_blank" rel="external">https://android.googlesource.com/platform/manifest</a> 替换为 git://mirrors.ustc.edu.cn/aosp/platform/manifest。</p>
<p>具体做法摘录如下（以防墙抽风）：</p>
<h3 id="首先下载-repo-工具"><a href="#首先下载-repo-工具" class="headerlink" title="首先下载 repo 工具"></a>首先下载 repo 工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir ~/bin</div><div class="line">PATH=~/bin:$PATH</div><div class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</div><div class="line"></div><div class="line">## 如果上述 URL 不可访问，可以用下面的：</div><div class="line">## curl https://storage-googleapis.proxy.ustclug.org/git-repo-downloads/repo &gt; ~/bin/repo</div><div class="line">chmod a+x ~/bin/repo</div></pre></td></tr></table></figure>
<h3 id="然后建立一个工作目录（名字任意）"><a href="#然后建立一个工作目录（名字任意）" class="headerlink" title="然后建立一个工作目录（名字任意）"></a>然后建立一个工作目录（名字任意）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir WORKING_DIRECTORY</div><div class="line">cd WORKING_DIRECTORY</div></pre></td></tr></table></figure>
<p>初始化仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-6.0.1_r62</div><div class="line">## 如果提示无法连接到 gerrit.googlesource.com，可以编辑 ~/bin/repo，把 REPO_URL 一行替换成下面的：</div><div class="line">## REPO_URL = &apos;https://gerrit-googlesource.proxy.ustclug.org/git-repo&apos;</div></pre></td></tr></table></figure></p>
<p>有些时候 更换REPO_URL 依然连接失败，没关系 多试几次<br>如果需要某个特定的 Android 版本（<a href="https://source.android.com/source/build-numbers.html#source-code-tags-and-builds" target="_blank" rel="external">Android 版本列表</a>）：</p>
<h3 id="同步源码树（以后只需执行这条命令来同步）："><a href="#同步源码树（以后只需执行这条命令来同步）：" class="headerlink" title="同步源码树（以后只需执行这条命令来同步）："></a>同步源码树（以后只需执行这条命令来同步）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repo sync</div></pre></td></tr></table></figure>
<p>接下来就是等了，这个过程比较慢 我大概用了一晚上 才下完源码。<br>注：<br>在下载过程中会出现很多问题，所以创建一个自动下载脚本，确保出错后自动执行repo sync，要不睡一觉起来发下代码下载失败那多恼火。<br>先在 WORKING_DIRECTORY下创建一个脚本down.sh,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">repo sync  -j16</div><div class="line">while [ $? = 1 ]; do  </div><div class="line">        echo “======sync failed, re-sync again======”  </div><div class="line">        sleep 3  </div><div class="line">        repo sync  -j16</div><div class="line">done</div></pre></td></tr></table></figure></p>
<p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod a+x down.sh</div><div class="line">./down.sh</div></pre></td></tr></table></figure></p>
<p>这样明天早上起来一看 代码就下完了。大概50多G，所以如果用虚拟机编译的化，建议设置100G以上内存。<br>源码的文件夹中只有一个.repo文件夹，这是正常的，等到所有源码下载完毕，其余文件夹就会出现，不要着急</p>
<h3 id="删除-repo"><a href="#删除-repo" class="headerlink" title="删除.repo"></a>删除.repo</h3><p>下载完源码后，会发现代码有50多G 其中有个隐藏文件夹.repo 他自己就有40多G ，这个文件夹只跟代码同步有关，并不影响编译，果断删除，删除后源码只有7G ，可以备份下源码</p>
<h2 id="2-配置编译环境"><a href="#2-配置编译环境" class="headerlink" title="2.配置编译环境"></a>2.配置编译环境</h2><h3 id="更换软件源为阿里云"><a href="#更换软件源为阿里云" class="headerlink" title="更换软件源为阿里云"></a>更换软件源为阿里云</h3><p>为了更快的安装软件，我们需要更换软件源为国内的软件源，这里推荐使用Ubuntu官方指定的国内软件源阿里云<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/apt/sources.list</div></pre></td></tr></table></figure></p>
<p>在文件最前面加入下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">deb http://mirrors.aliyun.com/ubuntu/ quantal main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ quantal-security main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ quantal-updates main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ quantal-proposed main restricted universe multiverse</div><div class="line">deb http://mirrors.aliyun.com/ubuntu/ quantal-backports main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ quantal main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-security main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-updates main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-proposed main restricted universe multiverse</div><div class="line">deb-src http://mirrors.aliyun.com/ubuntu/ quantal-backports main restricted universe multiverse</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 </div><div class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib </div><div class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 </div><div class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</div><div class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential  </div><div class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib </div><div class="line">sudo apt-get install libc6-dev-i386 </div><div class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev </div><div class="line">sudo apt-get install lib32z-dev ccache</div><div class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</div><div class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip m4</div></pre></td></tr></table></figure>
<p>Ubuntu 16.04请务必使用上面的依赖，Ubuntu 16.04需要的依赖和Ubuntu 14.04所需要的依赖是不同的，博主照着Ubuntu 14.04的依赖结果掉进大坑，详见后面的编译过程记录.</p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>编译android源码  对应android版本对 ubuntu版本有要求</p>
<table>
<thead>
<tr>
<th>Android版本</th>
<th>编译要求的Ubuntu最低版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>Android 6.0至AOSP master</td>
<td>Ubuntu 14.04</td>
<td></td>
</tr>
<tr>
<td>Android 2.3.x至Android 5.x</td>
<td>Ubuntu 12.04</td>
<td></td>
</tr>
<tr>
<td>Android 1.5至Android 2.2.x</td>
<td>Ubuntu 10.04</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Android版本</th>
<th>编译要求的Ubuntu最低版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>AOSP的Android主线</td>
<td>OpenJDK 8</td>
<td></td>
</tr>
<tr>
<td>Android 5.x至android 6.0</td>
<td>OpenJDK 7</td>
<td></td>
</tr>
<tr>
<td>Android 2.3.x至Android 4.4.x</td>
<td>Oracle JDK 6</td>
<td></td>
</tr>
</tbody>
</table>
<p>更具体的可以参看:<a href="https://link.jianshu.com/?t=https://source.android.com/source/requirements.html" target="_blank" rel="external">Google源码编译要求</a></p>
<p>这里我编译的是android6.0 用的是openjdk7<br>Ubuntu 15.04及之后的版本的在线安装库中只支持openjdk8和openjdk9的安装.因此,如果你想要安装openjdk 7需要首先设置ppa:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:openjdk-r/ppa </div><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>然后再执行安装命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openjdk-7-jdk</div></pre></td></tr></table></figure></p>
<p>配置环境变量<br>打开/etc/profile文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/profile</div></pre></td></tr></table></figure></p>
<p>在末尾追加下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre </div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib </div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>修改了/etc/profile文件需要重启才能生效，但使用下面命令可以在不重启的情况下在当前bash环境生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<p>有时候,我们需要编译不同版本的android系统,就可能使用不同的jdk版本.关于jdk版本切换,可以使用如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo update-alternatives --config java</div><div class="line">sudo update-alternatives --config javac</div><div class="line">sudo update-alternatives --config javap</div></pre></td></tr></table></figure></p>
<p>查询下JDK版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p>找到 WORKING_DIRECTORY/art/build/Android.common_build.mk 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifneq ($(WITHOUT_HOST_CLANG),true)</div></pre></td></tr></table></figure>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifneq ($(WITHOUT_HOST_CLANG),false)</div></pre></td></tr></table></figure></p>
<p>如果不修改这里，会遇到一个比较棘手的编译错误，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make:***[out/host/lnux-x86/obj/lib/libartd.so] Error   1</div></pre></td></tr></table></figure></p>
<p>修改的目的是把CLANG这个编译选项关掉，详见后面的编译记录，百度搜狗都无解，这个错误只会在Ubuntu16.04上遇到，Ubuntu14.04则不存在这个问题,这里卡了好几天</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="初始化编译环境"><a href="#初始化编译环境" class="headerlink" title="初始化编译环境"></a>初始化编译环境</h3><p>确保上述过程完成后,接下来我们需要初始化编译环境,命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source build/envsetup.sh</div></pre></td></tr></table></figure></p>
<p>lunch<br>控制台上会显示  选择 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/ou&apos;re building on Linux</div><div class="line">Lunch menu…pick a combo:</div><div class="line">1. aosp_arm-eng</div><div class="line">2. aosp_arm64-eng</div><div class="line">3. aosp_mlps-eng</div><div class="line">4. aosp_mlps64-eng</div><div class="line">5. aosp_x86-eng</div><div class="line">6. aosp_x86_64-eng</div><div class="line">7. aosp_deb-userdebug</div><div class="line">8. aosp_flo-userdebug</div><div class="line">9. full_fugu-userdebug</div><div class="line">10. aosp_fugu-userdebug</div><div class="line">11. mlnl_emulator_arm64-userdebug</div><div class="line">12. n_e_arm-userdebug</div><div class="line">13. mlnl_emulator_mlps-userdebug</div><div class="line">14. mlnl_emulator_x86_64-userdebug</div><div class="line">15. mlnl_emulator_x86-userdebug</div><div class="line">16. aosp_flounder-userdebug</div><div class="line">17. aosp_hammerhead-userdebug</div><div class="line">18. aosp_hammerhead_fp-userdebug</div><div class="line">19. aosp_shanu-userdebug</div><div class="line">rJhlch would you like? [aosp_arm-eng] |</div></pre></td></tr></table></figure></p>
<p>这里说一下user  userdebug  eng</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>用于正式产品</td>
<td></td>
</tr>
<tr>
<td>userdebug</td>
<td>和user类似，但是有root权限，并且可以调试，主要用于调试</td>
<td></td>
</tr>
<tr>
<td>eng</td>
<td>开发用的选项，配有额外的调试工具</td>
<td></td>
</tr>
</tbody>
</table>
<p>如果编译后只在模拟器上运行，则lunch时选择：1 </p>
<p>如果你想更深一步了解lunch该选哪一个，请参考下面的链接，根据第三列选择编译选项<br><a href="https://source.android.com/source/running.html" target="_blank" rel="external">https://source.android.com/source/running.html</a></p>
<h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>通过make指令进行代码编译,该指令通过-j参数来设置参与编译的线程数量,以提高编译速度.比如这里我们设置8个线程同时编译:  一般google推荐这个数字为2倍的cpu个数再加上2，比如4核，就是10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -j8</div></pre></td></tr></table></figure></p>
<p>关于cpu个数，可以用下面命令查看:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat  /proc/cpuinfo</div></pre></td></tr></table></figure></p>
<p>如果顺利，2个小时左右 就可以看到编译成功了，不过 应该是不可能的</p>
<p>还有其他常用命令 你肯定能遇到 make clean，make update-api</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>编译的文件会在 out目录下 编译成功里面会包含 system.img  userdate.img  ramdisk.img<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emulator</div></pre></td></tr></table></figure></p>
<p>不出意外，你将运行起来一个 黏糊糊 热乎乎的 android6.0 没错 你看 他真的很丑。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>编译源码 前前后后一共用了一个 多星期，其中不少坑 ，文章里写的也只是 在编译后能记录下来，还有些坑想想都丢人 一般人也不会犯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读android源码，应该是每个android 开发者提升 技术最快的途径，如果感兴趣可以自己尝试编译一下android系统，本文编译环境是ubuntu16.04 ，编译的android版本是6.0 由于虚拟机配置比较低，编译器也比较慢，折腾了好几天。估计我的硬盘比我更辛苦，好了进入正题。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="源码" scheme="https://3431339973.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 动态加载技术  DexClassLoader和PathClassLoader</title>
    <link href="https://3431339973.github.io/2016/03/22/android%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <id>https://3431339973.github.io/2016/03/22/android动态加载/</id>
    <published>2016-03-22T10:55:23.000Z</published>
    <updated>2017-10-02T16:24:29.160Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:android的插件开发，例如主题APK  AAPK去加载BAPK的资源，重点就是 在程序运行的时候，加载一些程序自身原本不存在的可执行文件并运行这些文件里的代码逻辑。设计的知识点主要是 andrond的动态加载技术，在这之前可以先了解下关于JAVA的类加载方面的知识<a href="http://zhush.xyz/2016/10/21/%E5%85%B3%E4%BA%8EJAVA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/" target="_blank" rel="external">传送门</a><br><a id="more"></a></p>
<p>Dalvik虚拟机如同其他Java虚拟机一样，在运行程序时首先需要将对应的类加载到内存中。而在Java标准的虚拟机中，类加载可以从class文件中读取，也可以是其他形式的二进制流，因此，我们常常利用这一点，在程序运行时手动加载Class，从而达到代码动态加载执行的目的，动态调用外部的Dex文件则是完全没有问题的。在APK文件中往往有一个或者多个Dex文件，我们写的每一句代码都会被编译到这些文件里面，Android应用运行的时候就是通过执行这些Dex文件完成应用的功能的。虽然一个APK一旦构建出来，我们是无法更换里面的Dex文件的，但是我们可以通过加载外部的Dex文件来实现动态加载，这个外部文件可以放在外部存储，或者从网络下载。</p>
<h2 id="Android动态加载的大致过程"><a href="#Android动态加载的大致过程" class="headerlink" title="Android动态加载的大致过程"></a>Android动态加载的大致过程</h2><p>无论上面的哪种动态加载，其实基本原理都是在程序运行时加载一些外部的可执行的文件，然后调用这些文件的某个方法执行业务逻辑。需要说明的是，因为文件是可执行的（so库或者dex包，也就是一种动态链接库），出于安全问题，Android并不允许直接加载手机外部存储这类noexec（不可执行）存储路径上的可执行文件。</p>
<p>对于这些外部的可执行文件，在Android应用中调用它们前，都要先把他们拷贝到data/packagename/内部储存文件路径，确保库不会被第三方应用恶意修改或拦截，然后再将他们加载到当前的运行环境并调用需要的方法执行相应的逻辑，从而实现动态调用。</p>
<p>动态加载的大致过程就是：</p>
<ul>
<li>把可执行文件（dex/jar/apk）拷贝到应用APP内部存储；</li>
<li>加载可执行文件；</li>
<li>调用具体的方法执行业务逻辑；</li>
</ul>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>然而Dalvik虚拟机毕竟不算是标准的Java虚拟机，因此在类加载机制上，它们有相同的地方，也有不同之处。我们必须区别对待<br>例如，在使用标准Java虚拟机时，我们经常自定义继承自ClassLoader的类加载器。然后通过defineClass方法来从一个二进制流中加载Class。然而，这在Android里是行不通的，大家就没必要走弯路了。参看源码我们知道，Android中ClassLoader的defineClass方法具体是调用VMClassLoader的defineClass本地静态方法。而这个本地方法除了抛出一个“UnsupportedOperationException”之外，什么都没做，甚至连返回值都为空</p>
<h2 id="DexClassLoader-和-PathClassLoader"><a href="#DexClassLoader-和-PathClassLoader" class="headerlink" title="DexClassLoader 和 PathClassLoader"></a>DexClassLoader 和 PathClassLoader</h2><p>在Android中，ClassLoader是一个抽象类，实际开发过程中，我们一般是使用其具体的子类DexClassLoader、PathClassLoader这些类加载器来加载类的，它们的不同之处是：</p>
<ul>
<li>DexClassLoader可以加载jar/apk/dex，可以从SD卡中加载未安装的apk；</li>
<li>PathClassLoader只能加载系统中已经安装过的apk；  </li>
</ul>
<h2 id="加载类的过程"><a href="#加载类的过程" class="headerlink" title="加载类的过程"></a>加载类的过程</h2><p>上面还只是创建了类加载器的实例，其中创建了一个DexFile实例，用来保存dex文件，我们猜想这个实例就是用来加载类的。</p>
<p>Android中，ClassLoader用loadClass方法来加载我们需要的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String className) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        <span class="keyword">return</span> loadClass(className, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String className, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class&lt;?&gt; clazz = findLoadedClass(className);</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">            ClassNotFoundException suppressed = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = parent.loadClass(className, <span class="keyword">false</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                suppressed = e;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    clazz = findClass(className);</div><div class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                    e.addSuppressed(suppressed);</div><div class="line">                    <span class="keyword">throw</span> e;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>loadClass方法调用了findClass方法，而BaseDexClassLoader重载了这个方法，得到BaseDexClassLoader看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        Class clazz = pathList.findClass(name);</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>结果还是调用了DexPathList的findClass</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">      <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">          DexFile dex = element.dexFile;</div><div class="line">          <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">              Class clazz = dex.loadClassBinaryName(name, definingContext);</div><div class="line">              <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                  <span class="keyword">return</span> clazz;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里遍历了之前所有的DexFile实例，其实也就是遍历了所有加载过的dex文件，再调用loadClassBinaryName方法一个个尝试能不能加载想要的类，真是简单粗暴</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> defineClass(name, loader, mCookie);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, <span class="keyword">int</span> cookie)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h3><p>平时进行动态加载开发的时候，使用DexClassLoader就够了。但我们也可以创建自己的类去继承ClassLoader，需要注意的是loadClass方法并不是final类型的，所以我们可以重载loadClass方法并改写类的加载逻辑。</p>
<p>通过前面我们分析知道，ClassLoader双亲代理的实现很大一部分就是在loadClass方法里，我们可以通过重写loadClass方法避开双亲代理的框架，这样一来就可以在重新加载已经加载过的类，也可以在加载类的时候注入一些代码。这是一种Hack的开发方式，采用这种开发方式的程序稳定性可能比较差，但是却可以实现一些“黑科技”的功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:android的插件开发，例如主题APK  AAPK去加载BAPK的资源，重点就是 在程序运行的时候，加载一些程序自身原本不存在的可执行文件并运行这些文件里的代码逻辑。设计的知识点主要是 andrond的动态加载技术，在这之前可以先了解下关于JAVA的类加载方面的知识&lt;a href=&quot;http://zhush.xyz/2016/10/21/%E5%85%B3%E4%BA%8EJAVA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="Dalvik" scheme="https://3431339973.github.io/tags/Dalvik/"/>
    
  </entry>
  
  <entry>
    <title>关于JVM类加载器</title>
    <link href="https://3431339973.github.io/2016/03/21/%E5%85%B3%E4%BA%8EJAVA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>https://3431339973.github.io/2016/03/21/关于JAVA类加载器/</id>
    <published>2016-03-21T12:37:23.000Z</published>
    <updated>2017-10-02T16:24:31.049Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近需要弄android的 插件开发，那就先从JAVA的类加载器开始吧<br><a id="more"></a></p>
<h3 id="首先来了解一下字节码和class文件的区别："><a href="#首先来了解一下字节码和class文件的区别：" class="headerlink" title="首先来了解一下字节码和class文件的区别："></a>首先来了解一下字节码和class文件的区别：</h3><p>我们知道，新建一个java对象的时候，JVM要将这个对象对应的字节码加载到内存中，这个字节码的原始信息存放在classpath(就是我们新建Java工程的bin目录下)指定的目录下的.class文件,类加载需要将.class文件导入到硬盘中，经过一些处理之后变成字节码在加载到内存中。</p>
<p>顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。实际的情况可能更加复杂，比如 Java 字节代码可能是通过工具动态生成的，也可能是通过网络下载的。<br>基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例</p>
<h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>来自 <a href="http://blog.csdn.net/gjanyanlig/article/details/6818655/" target="_blank" rel="external">http://blog.csdn.net/gjanyanlig/article/details/6818655/</a><br>JVM将类加载过程分为三个步骤：装载（Load），链接（Link）和初始化(Initialize)链接又分为三个步骤，如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://hi.csdn.net/attachment/201109/25/0_131691377413Tr.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>1) 装载：查找并加载类的二进制数据；<br>2)链接：<br>验证：确保被加载类的正确性；<br>准备：为类的静态变量分配内存，并将其初始化为默认值；<br>解析：把类中的符号引用转换为直接引用；<br>3)初始化：为类的静态变量赋予正确的初始值；<br>          那为什么我要有验证这一步骤呢？首先如果由编译器生成的class文件，它肯定是符合JVM字节码格式的，但是万一有高手自己写一个class文件，让JVM加载并运行，用于恶意用途，就不妙了，因此这个class文件要先过验证这一关，不符合的话不会让它继续执行的，也是为了安全考虑吧。<br>        准备阶段和初始化阶段看似有点牟盾，其实是不牟盾的，如果类中有语句：private static int a = 10，它的执行过程是这样的，首先字节码文件被加载到内存后，先进行链接的验证这一步骤，验证通过后准备阶段，给a分配内存，因为变量a是static的，所以此时a等于int类型的默认初始值0，即a=0,然后到解析（后面在说），到初始化这一步骤时，才把a的真正的值10赋给a,此时a=10。</p>
<ol>
<li>类的初始化<br> 类什么时候才被初始化：<br>1）创建类的实例，也就是new一个对象<br>2）访问某个类或接口的静态变量，或者对该静态变量赋值<br>3）调用类的静态方法<br>4）反射（Class.forName(“com.lyj.load”)）<br>5）初始化一个类的子类（会首先初始化子类的父类）<br>6）JVM启动时标明的启动类，即文件名和类名相同的那个类<pre><code>只有这6中情况才会导致类的类的初始化。
</code></pre>  类的初始化步骤：<pre><code>1）如果这个类还没有被加载和链接，那先进行加载和链接
2）假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一次），那就初始化直接的父类（不适用于接口）
 3)加入类中存在初始化语句（如static变量和static块），那就依次执行这些初始化语句。
</code></pre></li>
</ol>
<p>3.类的加载<br>       类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象。看下面2图</p>
<p><img src="http://hi.csdn.net/attachment/201009/25/0_1285381395C6iW.gif" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://hi.csdn.net/attachment/201109/25/0_1316916841uQvx.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<pre><code> 类的加载的最终产品是位于堆区中的Class对象
Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口
</code></pre><p>加载类的方式有以下几种：<br> 1）从本地系统直接加载<br>2）通过网络下载.class文件<br>3）从zip，jar等归档文件中加载.class文件<br>4）从专有数据库中提取.class文件<br>5）将Java源文件动态编译为.class文件（服务器）</p>
<h2 id="Java虚拟机中类加载器："><a href="#Java虚拟机中类加载器：" class="headerlink" title="Java虚拟机中类加载器："></a>Java虚拟机中类加载器：</h2><p>java虚拟机中主要又3个系统类加载器，BootStrap,ExtClassLoader,AppClassLoader，同时也可以安装多个 其他的加载器</p>
<p>BootStrap,使用C/C++代码写的，是第一个类加载器，已经封装到JVM内核中了，而ExtClassLoader和AppClassLoader是Java类，其他的类加载器也都是JAVA写的。</p>
<p>看一下类加载器的属性结构图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20140101125755203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmd3ZWkwOTEwNDEwMDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Java虚拟机中的所有类加载器采用具有父子关系的树形结构进行组织，在实例化每个类加载器对象的时候，需要为其指定一个父级类加载器对象或者默认采用系统类加载器为其父级类加载<br>类加载器的委托机制：<br>当Java虚拟机要加载第一个类的时候，到底派出哪个类加载器去加载呢？<br>(1). 首先当前线程的类加载器去加载线程中的第一个类(当前线程的类加载器：Thread类中有一个get/setContextClassLoader(ClassLoader cl);方法，可以获取/指定本线程中的类加载器)<br>(2). 如果类A中引用了类B,Java虚拟机将使用加载类A的类加载器来加载类B<br>(3). 还可以直接调用ClassLoader.loadClass(String className)方法来指定某个类加载器去加载某个类<br>每个类加载器加载类时，又先委托给其上级类加载器当所有祖宗类加载器没有加载到类，回到发起者类加载器，还加载不了，则会抛出ClassNotFoundException,不是再去找发起者类加载器的儿子，因为没有getChild()方法。例如：如上图所示： MyClassLoader-&gt;AppClassLoader-&gt;Ext-&gt;ClassLoader-&gt;BootStrap.自定定义的MyClassLoader1首先会先委托给AppClassLoader,AppClassLoader会委托给ExtClassLoader,ExtClassLoader会委托给BootStrap，这时候BootStrap就去加载，如果加载成功，就结束了。如果加载失败，就交给ExtClassLoader去加载，如果ExtClassLoader加载成功了，就结束了，如果加载失败就交给AppClassLoader加载，如果加载成功，就结束了，如果加载失败，就交给自定义的MyClassLoader1类加载器加载，如果加载失败，就报ClassNotFoundException异常，结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近需要弄android的 插件开发，那就先从JAVA的类加载器开始吧&lt;br&gt;
    
    </summary>
    
      <category term="JAVA" scheme="https://3431339973.github.io/categories/JAVA/"/>
    
    
      <category term="AppClassLoader" scheme="https://3431339973.github.io/tags/AppClassLoader/"/>
    
      <category term="JVN" scheme="https://3431339973.github.io/tags/JVN/"/>
    
  </entry>
  
  <entry>
    <title>andfix 增量升级更新 热补丁修复</title>
    <link href="https://3431339973.github.io/2016/03/17/andfix/"/>
    <id>https://3431339973.github.io/2016/03/17/andfix/</id>
    <published>2016-03-17T14:37:23.000Z</published>
    <updated>2017-10-01T12:47:06.109Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵<br><a id="more"></a></p>
<h3 id="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"><a href="#搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）" class="headerlink" title="搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）"></a>搜索发现有这3种方式可以实现（至于其他的方式，暂不清楚）</h3><p>1.dexposed     github <a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">https://github.com/alibaba/dexposed</a></p>
<p>2.andfix   github <a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p>
<p>3.bsdiff  <a href="http://blog.csdn.net/lazyer_dog/article/details/47173013" target="_blank" rel="external">http://blog.csdn.net/lazyer_dog/article/details/47173013</a></p>
<p>dexposed和andfix是alibaba的开源项目，都是apk增量更新的实现框架，目前dexposed的兼容性较差，只有2.3，4.0~4.4兼容，其他Android版本不兼容或未测试，详细可以去dexposed的github项目主页查看，而andfix则兼容2.3~6.0，所以就拿这个项目来实现增量更新吧。至于bsdiff，只是阅览了一下，还没研究过。</p>
<p>首先 Git clone github <a href="https://github.com/alibaba/AndFix，将andfix项目下载下来，Android" target="_blank" rel="external">https://github.com/alibaba/AndFix，将andfix项目下载下来，Android</a> studio可以在build.gradle里导入andfix，</p>
<p>compile ‘com.alipay.euler:andfix:0.3.1@aar’<br>但是我是使用module的方式添加andfix，这样可以直接查看编辑源码，而且直接gradle导入的话还有个问题，后面再说。</p>
<p>andfix项目里有sample，导入也行，自己新建也行，我是自己新建项目，接着导入andfix作为module，demo里就两个类，mainactivity和myapplication</p>
<p>andfix里有些文件夹不用导入的，例如tools，doc等，记得新建jniLibs文件夹，libs里的so文件移到jniLibs里。<br>~~~java<br>public class MainApplication extends Application {<br>    private static final String TAG = “euler”;</p>
<pre><code>private static final String APATCH_PATH = &quot;/out.apatch&quot;;

private static final String DIR = &quot;apatch&quot;;//补丁文件夹
/**
 * patch manager
 */
private PatchManager mPatchManager;

@Override
public void onCreate() {
    super.onCreate();
    // initialize
    mPatchManager = new PatchManager(this);
    mPatchManager.init(&quot;1.0&quot;);
    Log.d(TAG, &quot;inited.&quot;);

    // load patch
    mPatchManager.loadPatch();
</code></pre><p>//        Log.d(TAG, “apatch loaded.”);</p>
<pre><code>    // add patch at runtime
    try {
        // .apatch file path
        String patchFileString = Environment.getExternalStorageDirectory()
                .getAbsolutePath() + APATCH_PATH;
        mPatchManager.addPatch(patchFileString);
        Log.d(TAG, &quot;apatch:&quot; + patchFileString + &quot; added.&quot;);

        //这里我加了个方法，复制加载补丁成功后，删除sdcard的补丁，避免每次进入程序都重新加载一次
        File f = new File(this.getFilesDir(), DIR + APATCH_PATH);
        if (f.exists()) {
            boolean result = new File(patchFileString).delete();
            if (!result)
                Log.e(TAG, patchFileString + &quot; delete fail&quot;);
        }
    } catch (IOException e) {
        Log.e(TAG, &quot;&quot;, e);
    }

}
</code></pre><p>public class MainActivity extends Activity {<br>    private static final String TAG = “euler”;</p>
<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    toast();
}

@Override
protected void onDestroy() {
    super.onDestroy();
    android.os.Process.killProcess(android.os.Process.myPid());
}

//旧方法，1.apk
private void toast() {        Toast.makeText(this, &quot;old&quot;, Toast.LENGTH_SHORT).show();    }}
</code></pre><p>刚刚说的直接在gradle里导入andfix会有个问题，是在原来的项目中，加载一次补丁后，out.apatch文件会copy到getFilesDir目录下的/apatch文件夹中，在下次补丁更新时，会检测补丁是否已经添加在apatch文件夹下，已存在就不会复制加载sdcard的out.apatch。</p>
<p>原来的addpath方法</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if(!src.exists()){<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + path + “] has be loaded.”);<br>        return;<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>修改后，判断apatch下的out.apatch存在即删除掉，重新复制加载sdcard下的out.apatch</p>
<p>public void addPatch(String path) throws IOException {<br>    File src = new File(path);<br>    File dest = new File(mPatchDir, src.getName());<br>    if (!src.exists()) {<br>        throw new FileNotFoundException(path);<br>    }<br>    if (dest.exists()) {<br>        Log.d(TAG, “patch [“ + src.getName() + “] has be loaded.”);<br>        boolean deleteResult = dest.delete();<br>        if (deleteResult)<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] has be delete.”);<br>        else {<br>            Log.e(TAG, “patch [“ + dest.getPath() + “] delete error”);<br>            return;<br>        }<br>    }<br>    FileUtil.copyFile(src, dest);// copy to patch’s directory<br>    Patch patch = addPatch(dest);<br>    if (patch != null) {<br>        loadPatch(patch);<br>    }<br>}</p>
<p>还有源码混淆</p>
<p>-optimizationpasses 5                                                           # 指定代码的压缩级别<br>-dontusemixedcaseclassnames                                                     # 是否使用大小写混合<br>-dontskipnonpubliclibraryclasses                                                # 是否混淆第三方jar<br>-dontpreverify                                                                  # 混淆时是否做预校验<br>-verbose                                                                        # 混淆时是否记录日志<br>-optimizations !code/simplification/arithmetic,!field/<em>,!class/merging/</em>        # 混淆时所采用的算法</p>
<h2 id="重要，別忘了這些，不混淆andfix包，不混淆native方法"><a href="#重要，別忘了這些，不混淆andfix包，不混淆native方法" class="headerlink" title="重要，別忘了這些，不混淆andfix包，不混淆native方法"></a>重要，別忘了這些，不混淆andfix包，不混淆native方法</h2><p>-dontwarn android.annotation<br>-dontwarn com.alipay.euler.<strong><br>-keep class com.alipay.euler.</strong> {<em>;}<br>-keep class </em> extends java.lang.annotation.Annotation<br>-keepclasseswithmembernames class * {<br>    native <methods>;<br>}</methods></p>
<p>接着打包1.apk，</p>
<p>然后修改mainactivity的toast()，打包2.apk</p>
<p>//修改Toast內容，2.apk<br>private void toast() {<br>    Toast.makeText(this, “new”, Toast.LENGTH_SHORT).show();<br>}</p>
<p>cmd输入命令，具体参数看usage</p>
<p>如无错误，编译后会生成一个apatch文件，改名成out.apatch</p>
<p>安装打开1.apk</p>
<p>关闭app，将out.apatch放sdcard根目录后，重新打开app，toast方法改变了</p>
<p>ps：</p>
<ol>
<li><p>这里只是简单的测试了一下，没有复杂的功能，而且andfix不支持布局资源等的修改。</p>
</li>
<li><p>github主页的issues反应说Android4.0.4，以及5.0以上版本会crash，不过我使用了两个虚拟机，genymotion的4.2和5.0虚拟机，没有错误，其他请自测</p>
</li>
<li><p>使用了apk加固时（360加固，百度加固等等），发现在加固前要先apkpatch制作补丁，不能使用加固后的apk制作，否则补丁无法使用，但是在加固前制作的补丁可以很容易的被反编译出源码</p>
</li>
</ol>
<p>demo下载 <a href="http://download.csdn.net/detail/ityangjun/9177377" target="_blank" rel="external">http://download.csdn.net/detail/ityangjun/9177377</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:最近想着Android有没有什么热补丁更新技术的实现，于是上网搜索。接着实现了这一功能后，记录一下，免得自己忘了，可能文章会有出错的地方，望指出，呵呵&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="转载" scheme="https://3431339973.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="增量升级" scheme="https://3431339973.github.io/tags/%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7/"/>
    
      <category term="热补丁修复" scheme="https://3431339973.github.io/tags/%E7%83%AD%E8%A1%A5%E4%B8%81%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="andfix" scheme="https://3431339973.github.io/tags/andfix/"/>
    
  </entry>
  
  <entry>
    <title>Android是怎么把点击屏幕，或者是实体按键 的事件分发到对应的View上的</title>
    <link href="https://3431339973.github.io/2016/01/14/201601141/"/>
    <id>https://3431339973.github.io/2016/01/14/201601141/</id>
    <published>2016-01-14T05:55:12.000Z</published>
    <updated>2017-10-05T09:00:15.339Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:学习了下android的屏幕点击原理，（并不是应用层的事件分发）流程很复杂，简单的梳理了一下，日后再做详细研究<br><a id="more"></a></p>
<p>系统启动后，会有个WindowManagerSeverice（WMS）,WindowManagerSeverice通过IWindow(aidl)跟视图中的viewRoot（后期ViewRootImpl） 关联。</p>
<ul>
<li>当用户点击屏幕后WMS 接受到屏幕发来的消息（通过Binder）</li>
<li>WMS找到屏幕顶端进程的IWindow并调用dispatchKey方法</li>
<li>IWindow 可以找到持有他Bn端的viewRoot</li>
<li>viewRoot在根据坐标 找到内部的view 进行事件处理</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:学习了下android的屏幕点击原理，（并不是应用层的事件分发）流程很复杂，简单的梳理了一下，日后再做详细研究&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="事件" scheme="https://3431339973.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 应用的安装和卸载PackageManagerService</title>
    <link href="https://3431339973.github.io/2016/01/12/201601121/"/>
    <id>https://3431339973.github.io/2016/01/12/201601121/</id>
    <published>2016-01-12T13:55:27.000Z</published>
    <updated>2017-10-05T10:49:57.191Z</updated>
    
    <content type="html"><![CDATA[<p>摘要:android系统的应用安装包是APK格式，这个APK格式如何安装到android设备的呢？<br><a id="more"></a></p>
<h2 id="PackageManagerService"><a href="#PackageManagerService" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h2><p>Android 系统的应用管理主要通过PackageManagerService来完成<br>PackageManagerService 启动时会扫描所有的APK文件 和JAR包 把他们的信息读出来保存到内存中，这样系统就能很快的找到各个应用和组件的信息<br>在android 5.0 以前 ，PackageManagerService会监听安装了应用的目录，一旦目录发生了变化，他讲重新扫描目录，完成自动安装，但是在5.0后 PackageManagerService 不会在监听，这是因为5.0后的目录结构发生了变化。5.0以前/data/app或者/system/app 下面直接存放的是应用APK，而5.0后存放的是应用名称的目录，目录下才是APK 还有个lib的目录 存放的so</p>
<h2 id="Android应用两大类"><a href="#Android应用两大类" class="headerlink" title="Android应用两大类"></a>Android应用两大类</h2><ul>
<li>系统应用<br>系统应用是设备内置的应用，通常情况下不能删除，存放在/system/app目录下，4.4以后 又出现了一个/system/priv-app/。两者的区别在于 app下存放的是普通的系统级应用  如 电话，相机等，而priv-app下存放的是 偏底层的系统应用如 系统页面，系统设置 等等</li>
<li>普通应用<br>普通应用是 用户安装的应用 在/data/app 目录下，同时可以安装的sd卡上</li>
</ul>
<p>##安装应用</p>
<h3 id="1：复制文件"><a href="#1：复制文件" class="headerlink" title="1：复制文件"></a>1：复制文件</h3><p>调用PackageManager的installPackage()方法来开始安装过程，第一阶段就是把应用复制到/data/app目录下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPackage</span><span class="params">(String originPath, IPackageInstallObserver2 observer,</span></span></div><div class="line">        <span class="keyword">int</span> installFlags, String installerPackageName, VerificationParams verificationParams,</div><div class="line">        String packageAbiOverride) &#123;</div><div class="line">        <span class="comment">//传入了当前用户</span></div><div class="line">    installPackageAsUser(originPath, observer, installFlags, installerPackageName, verificationParams,</div><div class="line">            packageAbiOverride, UserHandle.getCallingUserId());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installPackageAsUser</span><span class="params">(String originPath, IPackageInstallObserver2 observer,</span></span></div><div class="line">        <span class="keyword">int</span> installFlags, String installerPackageName, VerificationParams verificationParams,</div><div class="line">        String packageAbiOverride, <span class="keyword">int</span> userId) &#123;</div><div class="line">            <span class="comment">//检查调用进程权限</span></div><div class="line">    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">//检查进程的用户是否有权限安装</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> callingUid = Binder.getCallingUid();</div><div class="line">    enforceCrossUserPermission(callingUid, userId, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="string">"installPackageAsUser"</span>);</div><div class="line">    <span class="comment">//检查制定用户是否被限制安装</span></div><div class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_INSTALL_APPS)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</div><div class="line">                observer.onPackageInstalled(<span class="string">""</span>, INSTALL_FAILED_USER_RESTRICTED, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</div><div class="line">        &#125;</div><div class="line">    。。。。。。。。。。。。。</div><div class="line">    。。。。。。。。。。。。。</div><div class="line">    <span class="comment">//发送消息</span></div><div class="line">    <span class="keyword">final</span> Message msg = mHandler.obtainMessage(INIT_COPY);</div><div class="line">    msg.obj = <span class="keyword">new</span> InstallParams(origin, observer, installFlags,</div><div class="line">            installerPackageName, verificationParams, user, packageAbiOverride);</div><div class="line">    mHandler.sendMessage(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>installPackage() 方法里先是做了一些检查工作，例如检查进程的用户是否有权限安装，最后向PackageHandler 发送了下次，然后执行安装，执行安装其实就是调用 HandlerParams的startCopy方法，看名字也知道 要开始复制了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerParams</span> </span>&#123;</div><div class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES = <span class="number">4</span>;</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Number of times startCopy() has been attempted and had a non-fatal</div><div class="line">       * error.</div><div class="line">       */</div><div class="line">      <span class="keyword">private</span> <span class="keyword">int</span> mRetries = <span class="number">0</span>;</div><div class="line"></div><div class="line">      <span class="comment">/** User handle for the user requesting the information or installation. */</span></div><div class="line">      <span class="keyword">private</span> <span class="keyword">final</span> UserHandle mUser;</div><div class="line"></div><div class="line">      HandlerParams(UserHandle user) &#123;</div><div class="line">          mUser = user;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function">UserHandle <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> mUser;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">startCopy</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">boolean</span> res;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"startCopy "</span> + mUser + <span class="string">": "</span> + <span class="keyword">this</span>);</div><div class="line">              <span class="comment">//如果重试查过4次 就发送通知</span></div><div class="line">              <span class="keyword">if</span> (++mRetries &gt; MAX_RETRIES) &#123;</div><div class="line">                  Slog.w(TAG, <span class="string">"Failed to invoke remote methods on default container service. Giving up"</span>);</div><div class="line">                  mHandler.sendEmptyMessage(MCS_GIVE_UP);</div><div class="line">                  handleServiceError();</div><div class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">//执行复制</span></div><div class="line">                  handleStartCopy();</div><div class="line">                  res = <span class="keyword">true</span>;</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">              <span class="keyword">if</span> (DEBUG_INSTALL) Slog.i(TAG, <span class="string">"Posting install MCS_RECONNECT"</span>);</div><div class="line">              mHandler.sendEmptyMessage(MCS_RECONNECT);</div><div class="line">              res = <span class="keyword">false</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//执行装载</span></div><div class="line">          handleReturnCode();</div><div class="line">          <span class="keyword">return</span> res;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>HandlerParams  是个抽象类，他的handleStartCopy 方法 和handleReturnCode 在InstallParams 里实现。<br>由于代码较长具体代码不贴了又兴趣的，可以研究下 ，到了这里apk<br>的复制算是完成了，然后进行下一步</p>
<p>###:2：装载应用<br>在上一步 最后调用了 handleReturnCode 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleReturnCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// If mArgs is null, then MCS couldn't be reached. When it</span></div><div class="line">        <span class="comment">// reconnects, it will try again to install. At that point, this</span></div><div class="line">        <span class="comment">// will succeed.</span></div><div class="line">        <span class="keyword">if</span> (mArgs != <span class="keyword">null</span>) &#123;</div><div class="line">            processPendingInstall(mArgs, mRet);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processPendingInstall</span><span class="params">(<span class="keyword">final</span> InstallArgs args, <span class="keyword">final</span> <span class="keyword">int</span> currentStatus)</span> </span>&#123;</div><div class="line">    <span class="comment">// Queue up an async operation since the package installation may take a little while.</span></div><div class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">//防止重复调用</span></div><div class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</div><div class="line">             <span class="comment">// Result object to be returned</span></div><div class="line">            PackageInstalledInfo res = <span class="keyword">new</span> PackageInstalledInfo();</div><div class="line">            res.returnCode = currentStatus;</div><div class="line">            res.uid = -<span class="number">1</span>;</div><div class="line">            res.pkg = <span class="keyword">null</span>;</div><div class="line">            res.removedInfo = <span class="keyword">new</span> PackageRemovedInfo();</div><div class="line">            <span class="keyword">if</span> (res.returnCode == PackageManager.INSTALL_SUCCEEDED) &#123;</div><div class="line">                <span class="comment">//如果安装成功了</span></div><div class="line">                args.doPreInstall(res.returnCode);</div><div class="line">                <span class="keyword">synchronized</span> (mInstallLock) &#123;</div><div class="line">                    <span class="comment">//装载APP</span></div><div class="line">                    installPackageLI(args, res);</div><div class="line">                &#125;</div><div class="line">                args.doPostInstall(res.returnCode, res.uid);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    。。。。。。。。</div><div class="line">            <span class="keyword">if</span> (!doRestore) &#123;</div><div class="line">                <span class="comment">// No restore possible, or the Backup Manager was mysteriously not</span></div><div class="line">                <span class="comment">// available -- just fire the post-install work request directly.</span></div><div class="line">                <span class="keyword">if</span> (DEBUG_INSTALL) Log.v(TAG, <span class="string">"No restore - queue post-install for "</span> + token);</div><div class="line">                <span class="comment">//发送完成消息</span></div><div class="line">                Message msg = mHandler.obtainMessage(POST_INSTALL, token, <span class="number">0</span>);</div><div class="line">                mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法里主要调用了 installPackageLI 方法 来装载APP<br>installPackageLI 也比较长 主要就是 解析的apk文件创建了 判断是老应用还是新应用  如果是新应用就调用<br>installNewPackageLI来创建各种目录 跟文件</p>
<p>其实安装过程中还需要往PackageManagerService 里写入很多 缓存数据等等 这里就不分析了</p>
<h2 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h2><p>PackageManagerService 的卸载方法是 deletePackage()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePackage</span><span class="params">(<span class="keyword">final</span> String packageName,</span></span></div><div class="line">        <span class="keyword">final</span> IPackageDeleteObserver2 observer, <span class="keyword">final</span> <span class="keyword">int</span> userId, <span class="keyword">final</span> <span class="keyword">int</span> flags) &#123;</div><div class="line">    mContext.enforceCallingOrSelfPermission(</div><div class="line">            android.Manifest.permission.DELETE_PACKAGES, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> uid = Binder.getCallingUid();</div><div class="line">    <span class="keyword">if</span> (UserHandle.getUserId(uid) != userId) &#123;</div><div class="line">        mContext.enforceCallingPermission(</div><div class="line">                android.Manifest.permission.INTERACT_ACROSS_USERS_FULL,</div><div class="line">                <span class="string">"deletePackage for user "</span> + userId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isUserRestricted(userId, UserManager.DISALLOW_UNINSTALL_APPS)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            observer.onPackageDeleted(packageName,</div><div class="line">                    PackageManager.DELETE_FAILED_USER_RESTRICTED, <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> uninstallBlocked = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> ((flags &amp; PackageManager.DELETE_ALL_USERS) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span>[] users = sUserManager.getUserIds();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; users.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (getBlockUninstallForUser(packageName, users[i])) &#123;</div><div class="line">                uninstallBlocked = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        uninstallBlocked = getBlockUninstallForUser(packageName, userId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (uninstallBlocked) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            observer.onPackageDeleted(packageName, PackageManager.DELETE_FAILED_OWNER_BLOCKED,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (DEBUG_REMOVE) &#123;</div><div class="line">        Slog.d(TAG, <span class="string">"deletePackageAsUser: pkg="</span> + packageName + <span class="string">" user="</span> + userId);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Queue up an async operation since the package deletion may take a little while.</span></div><div class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            mHandler.removeCallbacks(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> returnCode = deletePackageX(packageName, userId, flags);</div><div class="line">            <span class="keyword">if</span> (observer != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    observer.onPackageDeleted(packageName, returnCode, <span class="keyword">null</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                    Log.i(TAG, <span class="string">"Observer no longer exists."</span>);</div><div class="line">                &#125; <span class="comment">//end catch</span></div><div class="line">            &#125; <span class="comment">//end if</span></div><div class="line">        &#125; <span class="comment">//end run</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是删除安装时 生成的apk  和目录  ，同时也删除了 PackageManagerService 里的信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要:android系统的应用安装包是APK格式，这个APK格式如何安装到android设备的呢？&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https://3431339973.github.io/categories/Android/"/>
    
    
      <category term="移动开发" scheme="https://3431339973.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="https://3431339973.github.io/tags/Android/"/>
    
      <category term="PackageManagerService" scheme="https://3431339973.github.io/tags/PackageManagerService/"/>
    
  </entry>
  
</feed>
